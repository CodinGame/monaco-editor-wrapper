[
  {
    "type": "object",
    "title": "TypeScript",
    "order": 20,
    "properties": {
      "typescript.tsdk": {
        "type": "string",
        "markdownDescription": "Specifies the folder path to the tsserver and `lib*.d.ts` files under a TypeScript install to use for IntelliSense, for example: `./node_modules/typescript/lib`.\n\n- When specified as a user setting, the TypeScript version from `typescript.tsdk` automatically replaces the built-in TypeScript version.\n- When specified as a workspace setting, `typescript.tsdk` allows you to switch to use that workspace version of TypeScript for IntelliSense with the `TypeScript: Select TypeScript version` command.\n\nSee the [TypeScript documentation](https://code.visualstudio.com/docs/typescript/typescript-compiling#_using-newer-typescript-versions) for more detail about managing TypeScript versions.",
        "scope": "window"
      },
      "typescript.disableAutomaticTypeAcquisition": {
        "type": "boolean",
        "default": false,
        "markdownDescription": "Disables [automatic type acquisition](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition). Automatic type acquisition fetches `@types` packages from npm to improve IntelliSense for external libraries.",
        "scope": "window",
        "tags": [
          "usesOnlineServices"
        ]
      },
      "typescript.enablePromptUseWorkspaceTsdk": {
        "type": "boolean",
        "default": false,
        "description": "Enables prompting of users to use the TypeScript version configured in the workspace for Intellisense.",
        "scope": "window"
      },
      "typescript.npm": {
        "type": "string",
        "markdownDescription": "Specifies the path to the npm executable used for [Automatic Type Acquisition](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition).",
        "scope": "machine"
      },
      "typescript.check.npmIsInstalled": {
        "type": "boolean",
        "default": true,
        "markdownDescription": "Check if npm is installed for [Automatic Type Acquisition](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition).",
        "scope": "window"
      },
      "javascript.referencesCodeLens.enabled": {
        "type": "boolean",
        "default": false,
        "description": "Enable/disable references CodeLens in JavaScript files.",
        "scope": "window"
      },
      "javascript.referencesCodeLens.showOnAllFunctions": {
        "type": "boolean",
        "default": false,
        "description": "Enable/disable references CodeLens on all functions in JavaScript files.",
        "scope": "window"
      },
      "typescript.referencesCodeLens.enabled": {
        "type": "boolean",
        "default": false,
        "description": "Enable/disable references CodeLens in TypeScript files.",
        "scope": "window"
      },
      "typescript.referencesCodeLens.showOnAllFunctions": {
        "type": "boolean",
        "default": false,
        "description": "Enable/disable references CodeLens on all functions in TypeScript files.",
        "scope": "window"
      },
      "typescript.implementationsCodeLens.enabled": {
        "type": "boolean",
        "default": false,
        "description": "Enable/disable implementations CodeLens. This CodeLens shows the implementers of an interface.",
        "scope": "window"
      },
      "typescript.tsserver.enableTracing": {
        "type": "boolean",
        "default": false,
        "description": "Enables tracing TS server performance to a directory. These trace files can be used to diagnose TS Server performance issues. The log may contain file paths, source code, and other potentially sensitive information from your project.",
        "scope": "window"
      },
      "typescript.tsserver.log": {
        "type": "string",
        "enum": [
          "off",
          "terse",
          "normal",
          "verbose"
        ],
        "default": "off",
        "description": "Enables logging of the TS server to a file. This log can be used to diagnose TS Server issues. The log may contain file paths, source code, and other potentially sensitive information from your project.",
        "scope": "window"
      },
      "typescript.tsserver.pluginPaths": {
        "type": "array",
        "items": {
          "type": "string",
          "description": "Either an absolute or relative path. Relative path will be resolved against workspace folder(s)."
        },
        "default": [],
        "description": "Additional paths to discover TypeScript Language Service plugins.",
        "scope": "machine"
      },
      "typescript.tsserver.trace": {
        "type": "string",
        "enum": [
          "off",
          "messages",
          "verbose"
        ],
        "default": "off",
        "description": "Enables tracing of messages sent to the TS server. This trace can be used to diagnose TS Server issues. The trace may contain file paths, source code, and other potentially sensitive information from your project.",
        "scope": "window"
      },
      "javascript.suggest.completeFunctionCalls": {
        "type": "boolean",
        "default": false,
        "description": "Complete functions with their parameter signature.",
        "scope": "resource"
      },
      "typescript.suggest.completeFunctionCalls": {
        "type": "boolean",
        "default": false,
        "description": "Complete functions with their parameter signature.",
        "scope": "resource"
      },
      "javascript.suggest.includeAutomaticOptionalChainCompletions": {
        "type": "boolean",
        "default": true,
        "description": "Enable/disable showing completions on potentially undefined values that insert an optional chain call. Requires TS 3.7+ and strict null checks to be enabled.",
        "scope": "resource"
      },
      "typescript.suggest.includeAutomaticOptionalChainCompletions": {
        "type": "boolean",
        "default": true,
        "description": "Enable/disable showing completions on potentially undefined values that insert an optional chain call. Requires TS 3.7+ and strict null checks to be enabled.",
        "scope": "resource"
      },
      "typescript.inlayHints.parameterNames.enabled": {
        "type": "string",
        "enum": [
          "none",
          "literals",
          "all"
        ],
        "enumDescriptions": [
          "Disable parameter name hints.",
          "Enable parameter name hints only for literal arguments.",
          "Enable parameter name hints for literal and non-literal arguments."
        ],
        "default": "none",
        "markdownDescription": "[object Object]",
        "scope": "resource"
      },
      "typescript.inlayHints.parameterNames.suppressWhenArgumentMatchesName": {
        "type": "boolean",
        "default": true,
        "markdownDescription": "[object Object]",
        "scope": "resource"
      },
      "typescript.inlayHints.parameterTypes.enabled": {
        "type": "boolean",
        "default": false,
        "markdownDescription": "[object Object]",
        "scope": "resource"
      },
      "typescript.inlayHints.variableTypes.enabled": {
        "type": "boolean",
        "default": false,
        "markdownDescription": "[object Object]",
        "scope": "resource"
      },
      "typescript.inlayHints.propertyDeclarationTypes.enabled": {
        "type": "boolean",
        "default": false,
        "markdownDescription": "[object Object]",
        "scope": "resource"
      },
      "typescript.inlayHints.functionLikeReturnTypes.enabled": {
        "type": "boolean",
        "default": false,
        "markdownDescription": "[object Object]",
        "scope": "resource"
      },
      "typescript.inlayHints.enumMemberValues.enabled": {
        "type": "boolean",
        "default": false,
        "markdownDescription": "[object Object]",
        "scope": "resource"
      },
      "javascript.inlayHints.parameterNames.enabled": {
        "type": "string",
        "enum": [
          "none",
          "literals",
          "all"
        ],
        "enumDescriptions": [
          "Disable parameter name hints.",
          "Enable parameter name hints only for literal arguments.",
          "Enable parameter name hints for literal and non-literal arguments."
        ],
        "default": "none",
        "markdownDescription": "[object Object]",
        "scope": "resource"
      },
      "javascript.inlayHints.parameterNames.suppressWhenArgumentMatchesName": {
        "type": "boolean",
        "default": true,
        "markdownDescription": "[object Object]",
        "scope": "resource"
      },
      "javascript.inlayHints.parameterTypes.enabled": {
        "type": "boolean",
        "default": false,
        "markdownDescription": "[object Object]",
        "scope": "resource"
      },
      "javascript.inlayHints.variableTypes.enabled": {
        "type": "boolean",
        "default": false,
        "markdownDescription": "[object Object]",
        "scope": "resource"
      },
      "javascript.inlayHints.propertyDeclarationTypes.enabled": {
        "type": "boolean",
        "default": false,
        "markdownDescription": "[object Object]",
        "scope": "resource"
      },
      "javascript.inlayHints.functionLikeReturnTypes.enabled": {
        "type": "boolean",
        "default": false,
        "markdownDescription": "[object Object]",
        "scope": "resource"
      },
      "javascript.inlayHints.enumMemberValues.enabled": {
        "type": "boolean",
        "default": false,
        "markdownDescription": "[object Object]",
        "scope": "resource"
      },
      "javascript.suggest.includeCompletionsForImportStatements": {
        "type": "boolean",
        "default": true,
        "description": "Enable/disable auto-import-style completions on partially-typed import statements. Requires using TypeScript 4.3+ in the workspace.",
        "scope": "resource"
      },
      "typescript.suggest.includeCompletionsForImportStatements": {
        "type": "boolean",
        "default": true,
        "description": "Enable/disable auto-import-style completions on partially-typed import statements. Requires using TypeScript 4.3+ in the workspace.",
        "scope": "resource"
      },
      "typescript.suggest.includeCompletionsWithSnippetText": {
        "type": "boolean",
        "default": true,
        "description": "Enable/disable snippet completions from TS Server. Requires using TypeScript 4.3+ in the workspace.",
        "scope": "resource"
      },
      "typescript.reportStyleChecksAsWarnings": {
        "type": "boolean",
        "default": true,
        "description": "Report style checks as warnings.",
        "scope": "window"
      },
      "typescript.validate.enable": {
        "type": "boolean",
        "default": true,
        "description": "Enable/disable TypeScript validation.",
        "scope": "window"
      },
      "typescript.format.enable": {
        "type": "boolean",
        "default": true,
        "description": "Enable/disable default TypeScript formatter.",
        "scope": "window"
      },
      "typescript.format.insertSpaceAfterCommaDelimiter": {
        "type": "boolean",
        "default": true,
        "description": "Defines space handling after a comma delimiter.",
        "scope": "resource"
      },
      "typescript.format.insertSpaceAfterConstructor": {
        "type": "boolean",
        "default": false,
        "description": "Defines space handling after the constructor keyword.",
        "scope": "resource"
      },
      "typescript.format.insertSpaceAfterSemicolonInForStatements": {
        "type": "boolean",
        "default": true,
        "description": "Defines space handling after a semicolon in a for statement.",
        "scope": "resource"
      },
      "typescript.format.insertSpaceBeforeAndAfterBinaryOperators": {
        "type": "boolean",
        "default": true,
        "description": "Defines space handling after a binary operator.",
        "scope": "resource"
      },
      "typescript.format.insertSpaceAfterKeywordsInControlFlowStatements": {
        "type": "boolean",
        "default": true,
        "description": "Defines space handling after keywords in a control flow statement.",
        "scope": "resource"
      },
      "typescript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": {
        "type": "boolean",
        "default": true,
        "description": "Defines space handling after function keyword for anonymous functions.",
        "scope": "resource"
      },
      "typescript.format.insertSpaceBeforeFunctionParenthesis": {
        "type": "boolean",
        "default": false,
        "description": "Defines space handling before function argument parentheses.",
        "scope": "resource"
      },
      "typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": {
        "type": "boolean",
        "default": false,
        "description": "Defines space handling after opening and before closing non-empty parenthesis.",
        "scope": "resource"
      },
      "typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": {
        "type": "boolean",
        "default": false,
        "description": "Defines space handling after opening and before closing non-empty brackets.",
        "scope": "resource"
      },
      "typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces": {
        "type": "boolean",
        "default": true,
        "description": "Defines space handling after opening and before closing non-empty braces.",
        "scope": "resource"
      },
      "typescript.format.insertSpaceAfterOpeningAndBeforeClosingEmptyBraces": {
        "type": "boolean",
        "default": true,
        "description": "Defines space handling after opening and before closing empty braces.",
        "scope": "resource"
      },
      "typescript.format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": {
        "type": "boolean",
        "default": false,
        "description": "Defines space handling after opening and before closing template string braces.",
        "scope": "resource"
      },
      "typescript.format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces": {
        "type": "boolean",
        "default": false,
        "description": "Defines space handling after opening and before closing JSX expression braces.",
        "scope": "resource"
      },
      "typescript.format.insertSpaceAfterTypeAssertion": {
        "type": "boolean",
        "default": false,
        "description": "Defines space handling after type assertions in TypeScript.",
        "scope": "resource"
      },
      "typescript.format.placeOpenBraceOnNewLineForFunctions": {
        "type": "boolean",
        "default": false,
        "description": "Defines whether an open brace is put onto a new line for functions or not.",
        "scope": "resource"
      },
      "typescript.format.placeOpenBraceOnNewLineForControlBlocks": {
        "type": "boolean",
        "default": false,
        "description": "Defines whether an open brace is put onto a new line for control blocks or not.",
        "scope": "resource"
      },
      "typescript.format.semicolons": {
        "type": "string",
        "default": "ignore",
        "description": "Defines handling of optional semicolons. Requires using TypeScript 3.7 or newer in the workspace.",
        "scope": "resource",
        "enum": [
          "ignore",
          "insert",
          "remove"
        ],
        "enumDescriptions": [
          "Don't insert or remove any semicolons.",
          "Insert semicolons at statement ends.",
          "Remove unnecessary semicolons."
        ]
      },
      "javascript.validate.enable": {
        "type": "boolean",
        "default": true,
        "description": "Enable/disable JavaScript validation.",
        "scope": "window"
      },
      "javascript.format.enable": {
        "type": "boolean",
        "default": true,
        "description": "Enable/disable default JavaScript formatter.",
        "scope": "window"
      },
      "javascript.format.insertSpaceAfterCommaDelimiter": {
        "type": "boolean",
        "default": true,
        "description": "Defines space handling after a comma delimiter.",
        "scope": "resource"
      },
      "javascript.format.insertSpaceAfterConstructor": {
        "type": "boolean",
        "default": false,
        "description": "Defines space handling after the constructor keyword.",
        "scope": "resource"
      },
      "javascript.format.insertSpaceAfterSemicolonInForStatements": {
        "type": "boolean",
        "default": true,
        "description": "Defines space handling after a semicolon in a for statement.",
        "scope": "resource"
      },
      "javascript.format.insertSpaceBeforeAndAfterBinaryOperators": {
        "type": "boolean",
        "default": true,
        "description": "Defines space handling after a binary operator.",
        "scope": "resource"
      },
      "javascript.format.insertSpaceAfterKeywordsInControlFlowStatements": {
        "type": "boolean",
        "default": true,
        "description": "Defines space handling after keywords in a control flow statement.",
        "scope": "resource"
      },
      "javascript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": {
        "type": "boolean",
        "default": true,
        "description": "Defines space handling after function keyword for anonymous functions.",
        "scope": "resource"
      },
      "javascript.format.insertSpaceBeforeFunctionParenthesis": {
        "type": "boolean",
        "default": false,
        "description": "Defines space handling before function argument parentheses.",
        "scope": "resource"
      },
      "javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": {
        "type": "boolean",
        "default": false,
        "description": "Defines space handling after opening and before closing non-empty parenthesis.",
        "scope": "resource"
      },
      "javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": {
        "type": "boolean",
        "default": false,
        "description": "Defines space handling after opening and before closing non-empty brackets.",
        "scope": "resource"
      },
      "javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces": {
        "type": "boolean",
        "default": true,
        "description": "Defines space handling after opening and before closing non-empty braces.",
        "scope": "resource"
      },
      "javascript.format.insertSpaceAfterOpeningAndBeforeClosingEmptyBraces": {
        "type": "boolean",
        "default": true,
        "description": "Defines space handling after opening and before closing empty braces.",
        "scope": "resource"
      },
      "javascript.format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": {
        "type": "boolean",
        "default": false,
        "description": "Defines space handling after opening and before closing template string braces.",
        "scope": "resource"
      },
      "javascript.format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces": {
        "type": "boolean",
        "default": false,
        "description": "Defines space handling after opening and before closing JSX expression braces.",
        "scope": "resource"
      },
      "javascript.format.placeOpenBraceOnNewLineForFunctions": {
        "type": "boolean",
        "default": false,
        "description": "Defines whether an open brace is put onto a new line for functions or not.",
        "scope": "resource"
      },
      "javascript.format.placeOpenBraceOnNewLineForControlBlocks": {
        "type": "boolean",
        "default": false,
        "description": "Defines whether an open brace is put onto a new line for control blocks or not.",
        "scope": "resource"
      },
      "javascript.format.semicolons": {
        "type": "string",
        "default": "ignore",
        "description": "Defines handling of optional semicolons. Requires using TypeScript 3.7 or newer in the workspace.",
        "scope": "resource",
        "enum": [
          "ignore",
          "insert",
          "remove"
        ],
        "enumDescriptions": [
          "Don't insert or remove any semicolons.",
          "Insert semicolons at statement ends.",
          "Remove unnecessary semicolons."
        ]
      },
      "javascript.implicitProjectConfig.checkJs": {
        "type": "boolean",
        "default": false,
        "markdownDescription": "Enable/disable semantic checking of JavaScript files. Existing `jsconfig.json` or `tsconfig.json` files override this setting.",
        "markdownDeprecationMessage": "This setting has been deprecated in favor of `js/ts.implicitProjectConfig.checkJs`.",
        "scope": "window"
      },
      "js/ts.implicitProjectConfig.checkJs": {
        "type": "boolean",
        "default": false,
        "markdownDescription": "Enable/disable semantic checking of JavaScript files. Existing `jsconfig.json` or `tsconfig.json` files override this setting.",
        "scope": "window"
      },
      "javascript.implicitProjectConfig.experimentalDecorators": {
        "type": "boolean",
        "default": false,
        "markdownDescription": "Enable/disable `experimentalDecorators` in JavaScript files that are not part of a project. Existing `jsconfig.json` or `tsconfig.json` files override this setting.",
        "markdownDeprecationMessage": "This setting has been deprecated in favor of `js/ts.implicitProjectConfig.experimentalDecorators`.",
        "scope": "window"
      },
      "js/ts.implicitProjectConfig.experimentalDecorators": {
        "type": "boolean",
        "default": false,
        "markdownDescription": "Enable/disable `experimentalDecorators` in JavaScript files that are not part of a project. Existing `jsconfig.json` or `tsconfig.json` files override this setting.",
        "scope": "window"
      },
      "js/ts.implicitProjectConfig.strictNullChecks": {
        "type": "boolean",
        "default": false,
        "markdownDescription": "Enable/disable [strict null checks](https://www.typescriptlang.org/tsconfig#strictNullChecks) in JavaScript and TypeScript files that are not part of a project. Existing `jsconfig.json` or `tsconfig.json` files override this setting.",
        "scope": "window"
      },
      "js/ts.implicitProjectConfig.strictFunctionTypes": {
        "type": "boolean",
        "default": true,
        "markdownDescription": "Enable/disable [strict function types](https://www.typescriptlang.org/tsconfig#strictFunctionTypes) in JavaScript and TypeScript files that are not part of a project. Existing `jsconfig.json` or `tsconfig.json` files override this setting.",
        "scope": "window"
      },
      "javascript.suggest.names": {
        "type": "boolean",
        "default": true,
        "markdownDescription": "Enable/disable including unique names from the file in JavaScript suggestions. Note that name suggestions are always disabled in JavaScript code that is semantically checked using `@ts-check` or `checkJs`.",
        "scope": "resource"
      },
      "typescript.tsc.autoDetect": {
        "type": "string",
        "default": "on",
        "enum": [
          "on",
          "off",
          "build",
          "watch"
        ],
        "markdownEnumDescriptions": [
          "Create both build and watch tasks.",
          "Disable this feature.",
          "Only create single run compile tasks.",
          "Only create compile and watch tasks."
        ],
        "description": "Controls auto detection of tsc tasks.",
        "scope": "window"
      },
      "javascript.suggest.paths": {
        "type": "boolean",
        "default": true,
        "description": "Enable/disable suggestions for paths in import statements and require calls.",
        "scope": "resource"
      },
      "typescript.suggest.paths": {
        "type": "boolean",
        "default": true,
        "description": "Enable/disable suggestions for paths in import statements and require calls.",
        "scope": "resource"
      },
      "javascript.suggest.autoImports": {
        "type": "boolean",
        "default": true,
        "description": "Enable/disable auto import suggestions.",
        "scope": "resource"
      },
      "typescript.suggest.autoImports": {
        "type": "boolean",
        "default": true,
        "description": "Enable/disable auto import suggestions.",
        "scope": "resource"
      },
      "javascript.suggest.completeJSDocs": {
        "type": "boolean",
        "default": true,
        "description": "Enable/disable suggestion to complete JSDoc comments.",
        "scope": "resource"
      },
      "typescript.suggest.completeJSDocs": {
        "type": "boolean",
        "default": true,
        "description": "Enable/disable suggestion to complete JSDoc comments.",
        "scope": "resource"
      },
      "javascript.suggest.jsdoc.generateReturns": {
        "type": "boolean",
        "default": true,
        "markdownDescription": "Enable/disable generating `@return` annotations for JSDoc templates. Requires using TypeScript 4.2+ in the workspace.",
        "scope": "resource"
      },
      "typescript.suggest.jsdoc.generateReturns": {
        "type": "boolean",
        "default": true,
        "markdownDescription": "Enable/disable generating `@return` annotations for JSDoc templates. Requires using TypeScript 4.2+ in the workspace.",
        "scope": "resource"
      },
      "typescript.locale": {
        "type": "string",
        "enum": [
          "de",
          "es",
          "en",
          "fr",
          "it",
          "ja",
          "ko",
          "ru",
          "zh-CN",
          "zh-TW"
        ],
        "markdownDescription": "Sets the locale used to report JavaScript and TypeScript errors. Defaults to use VS Code's locale.",
        "scope": "window"
      },
      "javascript.suggestionActions.enabled": {
        "type": "boolean",
        "default": true,
        "description": "Enable/disable suggestion diagnostics for JavaScript files in the editor.",
        "scope": "resource"
      },
      "typescript.suggestionActions.enabled": {
        "type": "boolean",
        "default": true,
        "description": "Enable/disable suggestion diagnostics for TypeScript files in the editor.",
        "scope": "resource"
      },
      "javascript.preferences.quoteStyle": {
        "type": "string",
        "enum": [
          "auto",
          "single",
          "double"
        ],
        "default": "auto",
        "markdownDescription": "Preferred quote style to use for quick fixes: `single` quotes, `double` quotes, or `auto` infer quote type from existing imports.",
        "scope": "resource"
      },
      "typescript.preferences.quoteStyle": {
        "type": "string",
        "enum": [
          "auto",
          "single",
          "double"
        ],
        "default": "auto",
        "markdownDescription": "Preferred quote style to use for quick fixes: `single` quotes, `double` quotes, or `auto` infer quote type from existing imports.",
        "scope": "resource"
      },
      "javascript.preferences.importModuleSpecifier": {
        "type": "string",
        "enum": [
          "shortest",
          "relative",
          "non-relative",
          "project-relative"
        ],
        "markdownEnumDescriptions": [
          "Prefers a non-relative import only if one is available that has fewer path segments than a relative import.",
          "Prefers a relative path to the imported file location.",
          "Prefers a non-relative import based on the `baseUrl` or `paths` configured in your `jsconfig.json` / `tsconfig.json`.",
          "Prefers a non-relative import only if the relative import path would leave the package or project directory. Requires using TypeScript 4.2+ in the workspace."
        ],
        "default": "shortest",
        "description": "Preferred path style for auto imports.",
        "scope": "resource"
      },
      "typescript.preferences.importModuleSpecifier": {
        "type": "string",
        "enum": [
          "shortest",
          "relative",
          "non-relative",
          "project-relative"
        ],
        "markdownEnumDescriptions": [
          "Prefers a non-relative import only if one is available that has fewer path segments than a relative import.",
          "Prefers a relative path to the imported file location.",
          "Prefers a non-relative import based on the `baseUrl` or `paths` configured in your `jsconfig.json` / `tsconfig.json`.",
          "Prefers a non-relative import only if the relative import path would leave the package or project directory. Requires using TypeScript 4.2+ in the workspace."
        ],
        "default": "shortest",
        "description": "Preferred path style for auto imports.",
        "scope": "resource"
      },
      "javascript.preferences.importModuleSpecifierEnding": {
        "type": "string",
        "enum": [
          "auto",
          "minimal",
          "index",
          "js"
        ],
        "markdownEnumDescriptions": [
          "Use project settings to select a default.",
          "Shorten `./component/index.js` to `./component`.",
          "Shorten `./component/index.js` to `./component/index`.",
          "Do not shorten path endings; include the `.js` extension."
        ],
        "default": "auto",
        "description": "Preferred path ending for auto imports. Requires using TypeScript 4.5+ in the workspace.",
        "scope": "resource"
      },
      "typescript.preferences.importModuleSpecifierEnding": {
        "type": "string",
        "enum": [
          "auto",
          "minimal",
          "index",
          "js"
        ],
        "markdownEnumDescriptions": [
          "Use project settings to select a default.",
          "Shorten `./component/index.js` to `./component`.",
          "Shorten `./component/index.js` to `./component/index`.",
          "Do not shorten path endings; include the `.js` extension."
        ],
        "default": "auto",
        "description": "Preferred path ending for auto imports. Requires using TypeScript 4.5+ in the workspace.",
        "scope": "resource"
      },
      "javascript.preferences.jsxAttributeCompletionStyle": {
        "type": "string",
        "enum": [
          "auto",
          "braces",
          "none"
        ],
        "markdownEnumDescriptions": [
          "Insert `={}` or `=\"\"` after attribute names based on the prop type.",
          "Insert `={}` after attribute names.",
          "Only insert attribute names."
        ],
        "default": "auto",
        "description": "Preferred style for JSX attribute completions.",
        "scope": "resource"
      },
      "typescript.preferences.jsxAttributeCompletionStyle": {
        "type": "string",
        "enum": [
          "auto",
          "braces",
          "none"
        ],
        "markdownEnumDescriptions": [
          "Insert `={}` or `=\"\"` after attribute names based on the prop type.",
          "Insert `={}` after attribute names.",
          "Only insert attribute names."
        ],
        "default": "auto",
        "description": "Preferred style for JSX attribute completions.",
        "scope": "resource"
      },
      "typescript.preferences.includePackageJsonAutoImports": {
        "type": "string",
        "enum": [
          "auto",
          "on",
          "off"
        ],
        "enumDescriptions": [
          "Search dependencies based on estimated performance impact.",
          "Always search dependencies.",
          "Never search dependencies."
        ],
        "default": "auto",
        "markdownDescription": "Enable/disable searching `package.json` dependencies for available auto imports.",
        "scope": "window"
      },
      "javascript.preferences.renameShorthandProperties": {
        "type": "boolean",
        "default": true,
        "description": "Enable/disable introducing aliases for object shorthand properties during renames. Requires using TypeScript 3.4 or newer in the workspace.",
        "deprecationMessage": "The setting 'typescript.preferences.renameShorthandProperties' has been deprecated in favor of 'typescript.preferences.useAliasesForRenames'",
        "scope": "resource"
      },
      "typescript.preferences.renameShorthandProperties": {
        "type": "boolean",
        "default": true,
        "description": "Enable/disable introducing aliases for object shorthand properties during renames. Requires using TypeScript 3.4 or newer in the workspace.",
        "deprecationMessage": "The setting 'typescript.preferences.renameShorthandProperties' has been deprecated in favor of 'typescript.preferences.useAliasesForRenames'",
        "scope": "resource"
      },
      "javascript.preferences.useAliasesForRenames": {
        "type": "boolean",
        "default": true,
        "description": "Enable/disable introducing aliases for object shorthand properties during renames. Requires using TypeScript 3.4 or newer in the workspace.",
        "scope": "resource"
      },
      "typescript.preferences.useAliasesForRenames": {
        "type": "boolean",
        "default": true,
        "description": "Enable/disable introducing aliases for object shorthand properties during renames. Requires using TypeScript 3.4 or newer in the workspace.",
        "scope": "resource"
      },
      "typescript.updateImportsOnFileMove.enabled": {
        "type": "string",
        "enum": [
          "prompt",
          "always",
          "never"
        ],
        "markdownEnumDescriptions": [
          "Prompt on each rename.",
          "Always update paths automatically.",
          "Never rename paths and don't prompt."
        ],
        "default": "prompt",
        "description": "Enable/disable automatic updating of import paths when you rename or move a file in VS Code.",
        "scope": "resource"
      },
      "javascript.updateImportsOnFileMove.enabled": {
        "type": "string",
        "enum": [
          "prompt",
          "always",
          "never"
        ],
        "markdownEnumDescriptions": [
          "Prompt on each rename.",
          "Always update paths automatically.",
          "Never rename paths and don't prompt."
        ],
        "default": "prompt",
        "description": "Enable/disable automatic updating of import paths when you rename or move a file in VS Code.",
        "scope": "resource"
      },
      "typescript.autoClosingTags": {
        "type": "boolean",
        "default": true,
        "description": "Enable/disable automatic closing of JSX tags."
      },
      "javascript.autoClosingTags": {
        "type": "boolean",
        "default": true,
        "description": "Enable/disable automatic closing of JSX tags."
      },
      "javascript.suggest.enabled": {
        "type": "boolean",
        "default": true,
        "description": "Enabled/disable autocomplete suggestions.",
        "scope": "resource"
      },
      "typescript.suggest.enabled": {
        "type": "boolean",
        "default": true,
        "description": "Enabled/disable autocomplete suggestions.",
        "scope": "resource"
      },
      "typescript.surveys.enabled": {
        "type": "boolean",
        "default": true,
        "description": "Enabled/disable occasional surveys that help us improve VS Code's JavaScript and TypeScript support.",
        "scope": "window"
      },
      "typescript.tsserver.useSeparateSyntaxServer": {
        "type": "boolean",
        "default": true,
        "description": "Enable/disable spawning a separate TypeScript server that can more quickly respond to syntax related operations, such as calculating folding or computing document symbols. Requires using TypeScript 3.4.0 or newer in the workspace.",
        "markdownDeprecationMessage": "This setting has been deprecated in favor of `typescript.tsserver.useSyntaxServer`.",
        "scope": "window"
      },
      "typescript.tsserver.useSyntaxServer": {
        "type": "string",
        "scope": "window",
        "description": "Controls if TypeScript launches a dedicated server to more quickly handle syntax related operations, such as computing code folding.",
        "default": "auto",
        "enum": [
          "always",
          "never",
          "auto"
        ],
        "enumDescriptions": [
          "Use a lighter weight syntax server to handle all IntelliSense operations. This syntax server can only provide IntelliSense for opened files.",
          "Don't use a dedicated syntax server. Use a single server to handle all IntelliSense operations.",
          "Spawn both a full server and a lighter weight server dedicated to syntax operations. The syntax server is used to speed up syntax operations and provide IntelliSense while projects are loading."
        ]
      },
      "typescript.tsserver.maxTsServerMemory": {
        "type": "number",
        "default": 3072,
        "description": "The maximum amount of memory (in MB) to allocate to the TypeScript server process.",
        "scope": "window"
      },
      "typescript.tsserver.experimental.enableProjectDiagnostics": {
        "type": "boolean",
        "default": false,
        "description": "(Experimental) Enables project wide error reporting.",
        "scope": "window"
      },
      "typescript.tsserver.watchOptions": {
        "type": "object",
        "description": "Configure which watching strategies should be used to keep track of files and directories. Requires using TypeScript 3.8+ in the workspace.",
        "scope": "window",
        "properties": {
          "watchFile": {
            "type": "string",
            "description": "Strategy for how individual files are watched.",
            "enum": [
              "fixedChunkSizePolling",
              "fixedPollingInterval",
              "priorityPollingInterval",
              "dynamicPriorityPolling",
              "useFsEvents",
              "useFsEventsOnParentDirectory"
            ],
            "enumDescriptions": [
              "Polls files in chunks at regular interval. Requires using TypeScript 4.3+ in the workspace.",
              "Check every file for changes several times a second at a fixed interval.",
              "Check every file for changes several times a second, but use heuristics to check certain types of files less frequently than others.",
              "Use a dynamic queue where less-frequently modified files will be checked less often.",
              "Attempt to use the operating system/file system's native events for file changes.",
              "Attempt to use the operating system/file system's native events to listen for changes on a file's containing directories. This can use fewer file watchers, but might be less accurate."
            ],
            "default": "useFsEvents"
          },
          "watchDirectory": {
            "type": "string",
            "description": "Strategy for how entire directory trees are watched under systems that lack recursive file-watching functionality.",
            "enum": [
              "fixedChunkSizePolling",
              "fixedPollingInterval",
              "dynamicPriorityPolling",
              "useFsEvents"
            ],
            "enumDescriptions": [
              "Polls directories in chunks at regular interval. Requires using TypeScript 4.3+ in the workspace.",
              "Check every directory for changes several times a second at a fixed interval.",
              "Use a dynamic queue where less-frequently modified directories will be checked less often.",
              "Attempt to use the operating system/file system's native events for directory changes."
            ],
            "default": "useFsEvents"
          },
          "fallbackPolling": {
            "type": "string",
            "description": "When using file system events, this option specifies the polling strategy that gets used when the system runs out of native file watchers and/or doesn't support native file watchers.",
            "enum": [
              "fixedPollingInterval",
              "priorityPollingInterval",
              "dynamicPriorityPolling"
            ],
            "enumDescriptions": [
              "configuration.tsserver.watchOptions.fallbackPolling.fixedPollingInterval",
              "configuration.tsserver.watchOptions.fallbackPolling.priorityPollingInterval",
              "configuration.tsserver.watchOptions.fallbackPolling.dynamicPriorityPolling"
            ]
          },
          "synchronousWatchDirectory": {
            "type": "boolean",
            "description": "Disable deferred watching on directories. Deferred watching is useful when lots of file changes might occur at once (e.g. a change in node_modules from running npm install), but you might want to disable it with this flag for some less-common setups."
          }
        }
      },
      "typescript.workspaceSymbols.scope": {
        "type": "string",
        "enum": [
          "allOpenProjects",
          "currentProject"
        ],
        "enumDescriptions": [
          "Search all open JavaScript or TypeScript projects for symbols. Requires using TypeScript 3.9 or newer in the workspace.",
          "Only search for symbols in the current JavaScript or TypeScript project."
        ],
        "default": "allOpenProjects",
        "markdownDescription": "Controls which files are searched by [go to symbol in workspace](https://code.visualstudio.com/docs/editor/editingevolved#_open-symbol-by-name).",
        "scope": "window"
      },
      "javascript.suggest.classMemberSnippets.enabled": {
        "type": "boolean",
        "default": true,
        "description": "Enable/disable snippet completions for class members. Requires using TypeScript 4.5+ in the workspace",
        "scope": "resource"
      },
      "typescript.suggest.classMemberSnippets.enabled": {
        "type": "boolean",
        "default": true,
        "description": "Enable/disable snippet completions for class members. Requires using TypeScript 4.5+ in the workspace",
        "scope": "resource"
      }
    }
  },
  {
    "title": "Angular Language Service",
    "properties": {
      "angular.log": {
        "type": "string",
        "enum": [
          "off",
          "terse",
          "normal",
          "verbose"
        ],
        "default": "off",
        "description": "Enables logging of the Angular server to a file. This log can be used to diagnose Angular Server issues. The log may contain file paths, source code, and other potentially sensitive information from your project."
      },
      "angular.view-engine": {
        "type": "boolean",
        "default": false,
        "description": "Use legacy View Engine language service."
      },
      "angular.enable-strict-mode-prompt": {
        "type": "boolean",
        "default": true,
        "markdownDescription": "Prompt to enable the [strictTemplates](https://angular.io/guide/angular-compiler-options#stricttemplates) flag in [angularCompilerOptions](https://angular.io/guide/angular-compiler-options). Note that strict mode is only available when using Ivy."
      },
      "angular.trace.server": {
        "type": "string",
        "scope": "window",
        "enum": [
          "off",
          "messages",
          "verbose"
        ],
        "default": "off",
        "description": "Traces the communication between VS Code and the Angular language server."
      },
      "angular.suggest.includeAutomaticOptionalChainCompletions": {
        "type": "boolean",
        "default": true,
        "markdownDescription": "Enable/disable showing completions on potentially undefined values that insert an optional chain call. Requires TS 3.7+, strict null checks to be enabled and the `legacy View Engine` option to be disabled."
      },
      "angular.suggest.includeCompletionsWithSnippetText": {
        "type": "boolean",
        "default": true,
        "markdownDescription": "Enable/disable snippet completions from Angular language server. Requires using TypeScript 4.3+ in the workspace and the `legacy View Engine` option to be disabled."
      }
    }
  },
  {
    "title": "D",
    "type": "object",
    "properties": {
      "d.servedPath": {
        "type": "string",
        "scope": "machine-overridable",
        "default": "serve-d",
        "description": "Path of the serve-d executable. Path can be omitted if in $PATH or installed using code-d"
      },
      "d.stdlibPath": {
        "scope": "machine-overridable",
        "oneOf": [
          {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "type": "string"
          }
        ],
        "defaultSnippets": [
          {
            "label": "Choose based on platform",
            "body": "auto"
          },
          {
            "label": "Linux Default",
            "body": [
              "/usr/include/dmd/druntime/import",
              "/usr/include/dmd/phobos"
            ]
          },
          {
            "label": "ArchLinux Default",
            "body": [
              "/usr/include/dlang/dmd"
            ]
          },
          {
            "label": "Windows Default",
            "body": [
              "C:\\D\\dmd2\\src\\druntime\\import",
              "C:\\D\\dmd2\\src\\phobos"
            ]
          },
          {
            "label": "OSX Default",
            "body": [
              "/Library/D/dmd/src/druntime/import",
              "/Library/D/dmd/src/phobos"
            ]
          }
        ],
        "description": "Array of paths to phobos and D runtime for automatic inclusion for auto completion"
      },
      "d.dcdClientPath": {
        "title": "DCD Client Path",
        "type": "string",
        "scope": "machine-overridable",
        "default": "dcd-client",
        "description": "Path of the dcd-client executable. Path can be omitted if in $PATH or installed using code-d"
      },
      "d.dcdServerPath": {
        "title": "DCD Server Path",
        "type": "string",
        "scope": "machine-overridable",
        "default": "dcd-server",
        "description": "Path of the dcd-server executable. Path can be omitted if in $PATH or installed using code-d"
      },
      "d.dubPath": {
        "type": "string",
        "scope": "machine-overridable",
        "default": "dub",
        "description": "Path of the dub executable. Path can be omitted if in $PATH or installed using code-d"
      },
      "d.dmdPath": {
        "type": "string",
        "scope": "machine-overridable",
        "default": "dmd",
        "description": "Path of the dmd executable. Path can be omitted if in $PATH"
      },
      "d.enableLinting": {
        "type": "boolean",
        "scope": "resource",
        "default": true,
        "description": "If code-d should watch for file saves and report static analysis. Might interfere with other lint plugins or settings."
      },
      "d.enableSDLLinting": {
        "type": "boolean",
        "scope": "resource",
        "default": true,
        "description": "If code-d should report errors in your dub.sdl file."
      },
      "d.enableDubLinting": {
        "type": "boolean",
        "scope": "resource",
        "default": true,
        "description": "If code-d should build on save to check for compile errors."
      },
      "d.enableStaticLinting": {
        "type": "boolean",
        "scope": "resource",
        "default": true,
        "description": "If code-d should use DScanner to statically lint files."
      },
      "d.enableAutoComplete": {
        "type": "boolean",
        "scope": "resource",
        "default": true,
        "description": "Start dcd-server at startup and complete using dcd-client."
      },
      "d.enableFormatting": {
        "type": "boolean",
        "scope": "resource",
        "default": true,
        "description": "If the default formatting keybind should call dfmt on D files."
      },
      "d.enableDMDImportTiming": {
        "type": "boolean",
        "scope": "resource",
        "default": false,
        "description": "Add code lenses on import statements executing a dmd instance trying to compile that import statement to get the impact on compilation time by this import."
      },
      "d.enableCoverageDecoration": {
        "type": "boolean",
        "scope": "resource",
        "default": true,
        "description": "Automatically highlight tested/untested coverage lines with light red/green backgrounds per line for *.lst files."
      },
      "d.enableGCProfilerDecorations": {
        "type": "boolean",
        "scope": "resource",
        "default": true,
        "description": "Automatically embed code lenses for all GC allocations based on profilegc.log."
      },
      "d.neverUseDub": {
        "type": "boolean",
        "scope": "resource",
        "default": false,
        "description": "If this is true then a custom workspace where you manually provide the import paths will always be used instead of dub. See d.projectImportPaths for setting import paths then. This is discouraged as it will remove most features like packages, building & compiler linting. If this is a standalone project with no external dependencies with a custom build system then this should be true."
      },
      "d.projectImportPaths": {
        "type": "array",
        "scope": "resource",
        "items": {
          "type": "string"
        },
        "default": [],
        "description": "Setting for import paths in your workspace if not using dub. This will replace other paths. Its recommended to set this in your workspace settings instead of your user settings to keep it separate for each project."
      },
      "d.dubConfiguration": {
        "type": "string",
        "scope": "resource",
        "description": "Sets the default configuration to use when starting up"
      },
      "d.dubArchType": {
        "type": "string",
        "scope": "resource",
        "description": "Sets the default arch type to use when starting up"
      },
      "d.dubBuildType": {
        "type": "string",
        "scope": "resource",
        "description": "Sets the default build type to use when starting up"
      },
      "d.dubCompiler": {
        "type": "string",
        "scope": "resource",
        "description": "Sets the default compiler to use when starting up"
      },
      "d.overrideDfmtEditorconfig": {
        "type": "boolean",
        "scope": "resource",
        "default": true,
        "description": "Uses dfmt config options & vscode editor config instead of .editorconfig because of inconsistencies with the vscode editor settings."
      },
      "d.aggressiveUpdate": {
        "type": "boolean",
        "scope": "application",
        "default": true,
        "description": "Update/install outdated & missing tools without confirmation"
      },
      "d.argumentSnippets": {
        "type": "boolean",
        "scope": "resource",
        "default": false,
        "description": "When autocompleting functions automatically insert the signature as snippet which can be navigated using tab."
      },
      "d.betaStream": {
        "type": "boolean",
        "scope": "application",
        "deprecationMessage": "This option has been replaced with \"d.servedReleaseChannel\":\"nightly\"",
        "default": false,
        "description": "Always get latest serve-d commit when starting vscode and an update is available."
      },
      "d.servedReleaseChannel": {
        "type": "string",
        "scope": "application",
        "default": "stable",
        "enum": [
          "stable",
          "beta",
          "nightly",
          "frozen"
        ],
        "enumDescriptions": [
          "Always fetch the latest pre-compiled stable release binaries from the serve-d GitHub repository",
          "Always fetch the latest pre-compiled potentially unstable pre-release binaries from the serve-d GitHub repository",
          "Always fetch the latest pre-compiled nightly binaries from the serve-d GitHub repository. These are being generated every night (UTC) if something changed and tests passed.",
          "Don't do any update checks for serve-d (not recommended if you don't update serve-d outside code-d)"
        ],
        "description": "Release channel (stable, beta, nightly) to automatically download serve-d binaries from. serve-d is the D language server used with code-d and provides all language functionality except syntax highlighting, which is provided by code-d."
      },
      "d.smartServedUpdates": {
        "type": "boolean",
        "scope": "application",
        "default": true,
        "description": "Randomly omits serve-d update checks to save bandwidth, lower startup delay and minimize breakage on new releases with quick fixes. Also avoids to update when working on fridays."
      },
      "d.scanAllFolders": {
        "type": "boolean",
        "scope": "resource",
        "default": true,
        "description": "Initialize an instance for every dub.sdl and dub.json file in all folders."
      },
      "d.disabledRootGlobs": {
        "type": "array",
        "scope": "resource",
        "items": {
          "type": "string"
        },
        "default": [],
        "description": "Array of globs for disabling/preventing project instances by the d.scanAllFolders setting."
      },
      "d.extraRoots": {
        "type": "array",
        "scope": "resource",
        "items": {
          "type": "string"
        },
        "default": [],
        "description": "Array of workspace-relative (or absolute) folders to force start a project instance in."
      },
      "d.alwaysShowDubStatusButtons": {
        "type": "boolean",
        "scope": "resource",
        "default": false,
        "description": "Switch to always show dub Configuration/Arch Type/Build Type/Compiler buttons in dub projects and not just when a D file is open."
      },
      "d.alwaysShowCoverageStatus": {
        "type": "boolean",
        "scope": "resource",
        "default": false,
        "description": "Switch to always show coverage status when available through lst files and not just when a D file is open."
      },
      "d.manyProjectsAction": {
        "type": "string",
        "scope": "resource",
        "default": "ask",
        "enum": [
          "ask",
          "skip",
          "load"
        ],
        "enumDescriptions": [
          "Open a dialog box each time there are too many projects. (recommended for user-settings)",
          "Never load any more projects than the d.manyProjectsThreshold setting specified. (this or \"load\" recommended only per-project)",
          "Load all projects even if there are more than the d.manyProjectsThreshold setting specified. (this or \"skip\" recommended only per-project; never recommended for user-settings or large projects with many dub test projects)"
        ],
        "description": "What to do when there are too many project roots to load from. The deepest folder paths are skipped for skip."
      },
      "d.manyProjectsThreshold": {
        "type": "number",
        "scope": "resource",
        "default": 4,
        "minimum": 0,
        "description": "For how many projects to start triggering the manyProjectsAction to load or not load further projects."
      },
      "d.ignoreDebugHints": {
        "type": "boolean",
        "scope": "window",
        "default": false,
        "description": "If true, no hints will be shown when a project may be wrongly configured when trying to start debugging."
      },
      "d.lintOnFileOpen": {
        "type": "string",
        "scope": "resource",
        "default": "project",
        "enum": [
          "always",
          "project",
          "never"
        ],
        "enumDescriptions": [
          "D-Scanner runs on every file that is opened immediately, also for any internal cross-project or external dependencies.",
          "D-Scanner runs on every file only in the current project that is opened immediately. It then only starts on other files when changing something.",
          "D-Scanner never runs when opening a file and only starts running when changing something."
        ],
        "description": "Enables dscanner linting when opening a new file."
      },
      "d.dietContextCompletion": {
        "type": "boolean",
        "scope": "resource",
        "default": false,
        "description": "Enables parsing of //-context= in diet files to import local variables shared with the opened diet template."
      },
      "d.generateModuleNames": {
        "type": "boolean",
        "scope": "resource",
        "default": true,
        "description": "Automatically insert/replace the module name definition in the current file when creating or renaming a file."
      },
      "d.showUpdateChangelogs": {
        "type": "boolean",
        "scope": "application",
        "default": true,
        "description": "Open CHANGELOG.md on every code-d update (which also includes serve-d updates) to see new features."
      },
      "dfmt.alignSwitchStatements": {
        "type": "boolean",
        "scope": "resource",
        "default": true,
        "description": "Align labels, cases, and defaults with their enclosing switch."
      },
      "dfmt.braceStyle": {
        "type": "string",
        "scope": "resource",
        "enum": [
          "allman",
          "otbs",
          "stroustrup"
        ],
        "enumDescriptions": [
          "Curly braces always on separate lines",
          "Curly braces on the same line as for example if or while statements. Else on same line as closing curly brace.",
          "Curly braces on the same line as for example if or while statements, but a new line after the closing curly brace, even if there is an else"
        ],
        "default": "allman",
        "description": "See Wikipedia https://en.wikipedia.org/wiki/Brace_style"
      },
      "dfmt.outdentAttributes": {
        "type": "boolean",
        "scope": "resource",
        "default": true,
        "description": "Not yet implemented (on dfmt side)"
      },
      "dfmt.spaceAfterCast": {
        "type": "boolean",
        "scope": "resource",
        "default": true,
        "description": "Insert space after the closing paren of a cast expression."
      },
      "dfmt.splitOperatorAtLineEnd": {
        "type": "boolean",
        "scope": "resource",
        "default": false,
        "description": "Place operators on the end of the previous line when splitting lines."
      },
      "dfmt.selectiveImportSpace": {
        "type": "boolean",
        "scope": "resource",
        "default": true,
        "description": "Insert space after the module name and before the : for selective imports."
      },
      "dfmt.compactLabeledStatements": {
        "type": "boolean",
        "scope": "resource",
        "default": true,
        "description": "Place labels on the same line as the labeled switch, for, foreach, or while statement."
      },
      "dfmt.templateConstraintStyle": {
        "type": "string",
        "scope": "resource",
        "enum": [
          "conditional_newline_indent",
          "conditional_newline",
          "always_newline",
          "always_newline_indent"
        ],
        "enumDescriptions": [
          "newline only if constraint will wrap, indent constraint",
          "newline only if constraint will wrap",
          "always add newline",
          "always add newline and indent the constraint"
        ],
        "default": "conditional_newline_indent",
        "description": "Control the formatting of template constraints. See https://github.com/dlang-community/dfmt/issues/215"
      },
      "dfmt.spaceBeforeFunctionParameters": {
        "type": "boolean",
        "scope": "resource",
        "default": false,
        "description": "Insert space before the opening paren of a function parameter list."
      },
      "dfmt.singleTemplateConstraintIndent": {
        "type": "boolean",
        "scope": "resource",
        "default": false,
        "description": "Set if the constraints are indented by a single tab instead of two. Has only an effect if the style set to `always_newline_indent` or `conditional_newline_indent`."
      },
      "dfmt.spaceBeforeAAColon": {
        "type": "boolean",
        "scope": "resource",
        "default": false,
        "description": "Adds a space after an associative array key before the `:` like in older dfmt versions."
      },
      "dfmt.keepLineBreaks": {
        "type": "boolean",
        "scope": "resource",
        "default": true,
        "description": "Keep existing line breaks if these don't violate other formatting rules."
      },
      "dfmt.singleIndent": {
        "type": "boolean",
        "scope": "resource",
        "default": true,
        "description": "Set if the code in parens is indented by a single tab instead of two."
      },
      "dscanner.ignoredKeys": {
        "type": "array",
        "scope": "resource",
        "items": {
          "type": "string",
          "enum": [
            "dscanner.bugs.backwards_slices",
            "dscanner.bugs.if_else_same",
            "dscanner.bugs.logic_operator_operands",
            "dscanner.bugs.self_assignment",
            "dscanner.confusing.argument_parameter_mismatch",
            "dscanner.confusing.brexp",
            "dscanner.confusing.builtin_property_names",
            "dscanner.confusing.constructor_args",
            "dscanner.confusing.function_attributes",
            "dscanner.confusing.lambda_returns_lambda",
            "dscanner.confusing.logical_precedence",
            "dscanner.confusing.struct_constructor_default_args",
            "dscanner.deprecated.delete_keyword",
            "dscanner.deprecated.floating_point_operators",
            "dscanner.if_statement",
            "dscanner.performance.enum_array_literal",
            "dscanner.style.allman",
            "dscanner.style.alias_syntax",
            "dscanner.style.doc_missing_params",
            "dscanner.style.doc_missing_returns",
            "dscanner.style.doc_non_existing_params",
            "dscanner.style.explicitly_annotated_unittest",
            "dscanner.style.has_public_example",
            "dscanner.style.imports_sortedness",
            "dscanner.style.long_line",
            "dscanner.style.number_literals",
            "dscanner.style.phobos_naming_convention",
            "dscanner.style.undocumented_declaration",
            "dscanner.suspicious.auto_ref_assignment",
            "dscanner.suspicious.catch_em_all",
            "dscanner.suspicious.comma_expression",
            "dscanner.suspicious.incomplete_operator_overloading",
            "dscanner.suspicious.incorrect_infinite_range",
            "dscanner.suspicious.label_var_same_name",
            "dscanner.suspicious.length_subtraction",
            "dscanner.suspicious.local_imports",
            "dscanner.suspicious.missing_return",
            "dscanner.suspicious.object_const",
            "dscanner.suspicious.redundant_attributes",
            "dscanner.suspicious.redundant_parens",
            "dscanner.suspicious.static_if_else",
            "dscanner.suspicious.unmodified",
            "dscanner.suspicious.unused_label",
            "dscanner.suspicious.unused_parameter",
            "dscanner.suspicious.unused_variable",
            "dscanner.suspicious.useless_assert",
            "dscanner.unnecessary.duplicate_attribute",
            "dscanner.useless.final",
            "dscanner.useless-initializer",
            "dscanner.vcall_ctor",
            "dscanner.syntax"
          ]
        },
        "description": "DScanner warnings to ignore in this project."
      }
    }
  },
  {
    "0": {
      "title": "Analyzer",
      "properties": {
        "dart.additionalAnalyzerFileExtensions": {
          "type": "array",
          "default": [],
          "description": "Additional file extensions that should be analyzed (usually used in combination with analyzer plugins).",
          "items": {
            "type": "string"
          },
          "scope": "window"
        },
        "dart.analysisExcludedFolders": {
          "type": "array",
          "default": [],
          "description": "An array of paths to be excluded from Dart analysis. This option should usually be set at the Workspace level. Excluded folders will also be ignored when detecting project types.",
          "items": {
            "type": "string"
          },
          "scope": "resource"
        },
        "dart.analyzeAngularTemplates": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Whether to enable analysis for AngularDart templates (requires the Angular analyzer plugin to be enabled in `analysis_options.yaml`).",
          "scope": "window"
        },
        "dart.analyzerAdditionalArgs": {
          "type": "array",
          "default": [],
          "description": "Additional arguments to pass to the Dart analysis server.",
          "scope": "window",
          "items": {
            "type": "string"
          }
        },
        "dart.analyzerDiagnosticsPort": {
          "type": [
            "null",
            "number"
          ],
          "default": null,
          "description": "The port number to be used for the Dart analyzer diagnostic server.",
          "scope": "window"
        },
        "dart.analyzerPath": {
          "type": [
            "null",
            "string"
          ],
          "default": null,
          "description": "The path to a custom Dart analysis server.",
          "scope": "machine-overridable"
        },
        "dart.analyzerSshHost": {
          "type": [
            "null",
            "string"
          ],
          "default": null,
          "description": "An SSH host to run the analysis server.\nThis can be useful when modifying code on a remote machine using SSHFS.",
          "scope": "window"
        },
        "dart.analyzerVmServicePort": {
          "type": [
            "null",
            "number"
          ],
          "default": null,
          "description": "The port number to be used for the Dart analysis server VM service.",
          "scope": "window"
        },
        "dart.notifyAnalyzerErrors": {
          "type": "boolean",
          "default": true,
          "description": "Whether to show a notification the first few times an analysis server exception occurs.",
          "scope": "window"
        },
        "dart.onlyAnalyzeProjectsWithOpenFiles": {
          "type": "boolean",
          "default": false,
          "description": "Whether to ignore workspace folders and perform analysis based on the open files, as if no workspace was open at all. This allows opening large folders without causing them to be completely analyzed.",
          "scope": "window"
        },
        "dart.showTodos": {
          "type": "boolean",
          "default": true,
          "description": "Whether to show TODOs in the Problems list.",
          "scope": "window"
        },
        "dart.useLsp": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Whether to run the analyzer in [LSP mode](https://microsoft.github.io/language-server-protocol/). Some features are not supported if this setting is disabled and in a future release LSP will be the only supported option.",
          "scope": "window"
        }
      }
    },
    "1": {
      "title": "DevTools",
      "properties": {
        "dart.devToolsBrowser": {
          "enum": [
            "chrome",
            "default"
          ],
          "enumDescriptions": [
            "Locate and launch Google Chrome from your system",
            "Use your systems default web browser"
          ],
          "default": "chrome",
          "description": "Whether to launch external DevTools windows using Chrome or the system default browser.",
          "scope": "window"
        },
        "dart.devToolsPort": {
          "type": [
            "null",
            "number"
          ],
          "default": null,
          "description": "The port number to be used for the Dart DevTools.",
          "scope": "window"
        },
        "dart.devToolsReuseWindows": {
          "type": "boolean",
          "default": true,
          "description": "Whether to try to reuse existing DevTools windows instead of launching new ones. Only works for instances of DevTools launched by the DevTools server on the local machine.",
          "scope": "window"
        },
        "dart.devToolsTheme": {
          "enum": [
            "dark",
            "light"
          ],
          "default": "dark",
          "description": "The theme to use for Dart DevTools.",
          "scope": "window"
        },
        "dart.embedDevTools": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Whether to load [Dart DevTools](https://dart.dev/tools/dart-devtools) embedded inside VS Code.",
          "scope": "window"
        },
        "dart.openDevTools": {
          "enum": [
            "never",
            "flutter",
            "always"
          ],
          "enumDescriptions": [
            "Do not automatically launch DevTools when starting a debug session",
            "Automatically launch DevTools when starting a Flutter debug session",
            "Automatically launch DevTools when starting any debug session"
          ],
          "default": "never",
          "description": "Whether to automatically open DevTools at the start of a debug session. If embedded DevTools is enabled, this will launch the Widget Inspector embedded for Flutter projects, or launch DevTools externally in a browser for Dart projects.",
          "scope": "window"
        },
        "dart.shareDevToolsWithFlutter": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Whether to eagerly run DevTools for Flutter workspaces and share the spawned server with `flutter run`.",
          "scope": "window"
        },
        "dart.showInspectorNotificationsForWidgetErrors": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Whether to show notifications for widget errors that offer Inspect Widget links. This requires that the `#dart.shareDevToolsWithFlutter#` setting is also enabled.",
          "scope": "window"
        }
      }
    },
    "2": {
      "title": "Editor",
      "properties": {
        "dart.analysisServerFolding": {
          "type": "boolean",
          "default": true,
          "description": "Whether to use folding data from the Dart analysis server instead of the built-in VS Code indent-based folding.",
          "scope": "window"
        },
        "dart.autoImportCompletions": {
          "type": "boolean",
          "default": true,
          "description": "Whether to include symbols that have not been imported in the code completion list and automatically insert the required import when selecting them (requires restart).",
          "scope": "window"
        },
        "dart.automaticCommentSlashes": {
          "enum": [
            "none",
            "tripleSlash",
            "all"
          ],
          "default": "tripleSlash",
          "markdownDescription": "Determines when to insert comment slashes when pressing `<enter>` in the editor (requires restart).\n\nWhen using `tripleSlash`, double-slashes will still be included when breaking existing double-slash comments across additional lines.",
          "enumDescriptions": [
            "Never insert slashes automatically",
            "Insert `///` when pressing `<enter>` at the end of a triple-slash comment",
            "Insert `///` when pressing `<enter>` at the end of a triple-slash comment and also `//` when pressing `<enter>` at the end of a double-slash comment"
          ],
          "scope": "window"
        },
        "dart.closingLabels": {
          "type": "boolean",
          "default": true,
          "description": "Whether to show annotations against constructor, method invocations and lists that span multiple lines.",
          "scope": "window"
        },
        "dart.completeFunctionCalls": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Whether to insert parentheses and placeholders for positional and required arguments during code completions when using LSP. This feature is automatically disabled if commit characters are enabled.",
          "scope": "resource"
        },
        "dart.doNotFormat": {
          "type": "array",
          "default": [],
          "markdownDescription": "An array of glob patterns that should be excluded for formatting. The pattern is matched against the absolute path of the file. Use `**/test/**` to skip formatting for all test directories.",
          "items": {
            "type": "string"
          },
          "scope": "resource"
        },
        "dart.enableCompletionCommitCharacters": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Whether to automatically commit the selected completion item when pressing certain keys such as . , ( and [. This setting does not currently apply to LSP, see `#dart.previewCommitCharacters#`.",
          "scope": "resource"
        },
        "dart.enableSdkFormatter": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Whether to enable the [dart_style](https://pub.dev/packages/dart_style) formatter for Dart code.",
          "scope": "window"
        },
        "dart.enableSnippets": {
          "type": "boolean",
          "default": true,
          "description": "Whether to include Dart and Flutter snippets in code completion.",
          "scope": "window"
        },
        "dart.insertArgumentPlaceholders": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Whether to insert argument placeholders during code completions. This feature is automatically disabled when `enableCompletionCommitCharacters` is enabled.",
          "scope": "resource"
        },
        "dart.lineLength": {
          "type": "integer",
          "default": 80,
          "description": "The maximum length of a line of code. This is used by the document formatter.",
          "scope": "resource"
        },
        "dart.lspSnippetTextEdits": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Whether to enable [Snippet support in LSP TextEdits](https://github.com/rust-analyzer/rust-analyzer/blob/979e788957ced1957ee9ac1da70fb97abf9fe2b1/docs/dev/lsp-extensions.md#snippet-textedit).",
          "scope": "window"
        },
        "dart.renameFilesWithClasses": {
          "default": "never",
          "enum": [
            "never",
            "prompt",
            "always"
          ],
          "markdownDescription": "Whether to rename files when renaming classes with matching names (for example renaming 'class Person' inside 'person.dart'). If set to 'prompt', will ask each time before renaming. If set to 'always', the file will automatically be renamed. This setting requires using LSP and a Dart SDK of at least v2.15.",
          "scope": "window"
        },
        "dart.showDartPadSampleCodeLens": {
          "type": "boolean",
          "default": true,
          "description": "Whether to show CodeLens actions in the editor for opening online DartPad samples.",
          "scope": "window"
        },
        "dart.showIgnoreQuickFixes": {
          "type": "boolean",
          "default": true,
          "description": "Whether to show quick fixes for ignoring hints and lints.",
          "scope": "window"
        },
        "dart.showMainCodeLens": {
          "type": "boolean",
          "default": true,
          "description": "Whether to show CodeLens actions in the editor for quick running / debugging scripts with main functions.",
          "scope": "window"
        },
        "dart.showTestCodeLens": {
          "type": "boolean",
          "default": true,
          "description": "Whether to show CodeLens actions in the editor for quick running / debugging tests.",
          "scope": "window"
        },
        "dart.triggerSignatureHelpAutomatically": {
          "type": "boolean",
          "default": false,
          "description": "Whether to automatically trigger signature help when pressing keys such as , and (.",
          "scope": "window"
        },
        "dart.updateImportsOnRename": {
          "type": "boolean",
          "default": true,
          "description": "Whether to automatically update imports when moving or renaming files. Currently only supports single file moves / renames.",
          "scope": "window"
        },
        "dart.warnWhenEditingFilesOutsideWorkspace": {
          "type": "boolean",
          "default": true,
          "description": "Whether to show a warning when modifying files outside of the workspace.",
          "scope": "window"
        },
        "dart.warnWhenEditingFilesInPubCache": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Whether to show a warning when modifying files in the [system package cache](https://dart.dev/tools/pub/glossary#system-cache) directory.",
          "scope": "window"
        }
      }
    },
    "3": {
      "title": "Flutter",
      "properties": {
        "dart.flutterAdbConnectOnChromeOs": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Whether to automatically run `adb connect 100.115.92.2:5555` when spawning the Flutter daemon when running on Chrome OS.",
          "scope": "window"
        },
        "dart.flutterAdditionalArgs": {
          "type": "array",
          "default": [],
          "markdownDescription": "Additional args to pass to all `flutter` commands including `flutter daemon`. Do not use this to pass arguments to your Flutter app, use the `args` field in a `launch.json` or the `#dart.flutterRunAdditionalArgs#` setting.",
          "scope": "resource",
          "items": {
            "type": "string"
          }
        },
        "dart.flutterAttachAdditionalArgs": {
          "type": "array",
          "default": [],
          "markdownDescription": "Additional args to pass to the `flutter attach` command. Using the `args`/`toolArgs` fields in `launch.json` is usually better than this setting as this setting will apply to _all_ projects.",
          "scope": "resource",
          "items": {
            "type": "string"
          }
        },
        "dart.flutterCreateAndroidLanguage": {
          "enum": [
            "java",
            "kotlin"
          ],
          "default": "kotlin",
          "description": "The programming language to use for Android apps when creating new projects using the 'Flutter: New Project' command.",
          "scope": "window"
        },
        "dart.flutterCreateIOSLanguage": {
          "enum": [
            "objc",
            "swift"
          ],
          "default": "swift",
          "description": "The programming language to use for iOS apps when creating new projects using the 'Flutter: New Project' command.",
          "scope": "window"
        },
        "dart.flutterCreateOffline": {
          "type": "boolean",
          "default": false,
          "description": "Whether to use offline mode when creating new projects with the 'Flutter: New Project' command.",
          "scope": "window"
        },
        "dart.flutterCreateOrganization": {
          "type": [
            "null",
            "string"
          ],
          "default": null,
          "markdownDescription": "The organization responsible for your new Flutter project, in reverse domain name notation (e.g. `com.google`). This string is used in Java package names and as prefix in the iOS bundle identifier when creating new projects using the 'Flutter: New Project' command.",
          "scope": "window"
        },
        "dart.flutterCustomEmulators": {
          "type": "array",
          "default": [],
          "description": "Custom emulators to show in the emulator list for easier launching. If IDs match existing emulators returned by Flutter, the custom emulators will override them.",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "executable": {
                "type": "string"
              },
              "args": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "env": {}
            }
          },
          "scope": "window"
        },
        "dart.flutterGutterIcons": {
          "type": "boolean",
          "default": true,
          "description": "Whether to show Flutter icons and colors in the editor gutter.",
          "scope": "window"
        },
        "dart.flutterHotReloadOnSave": {
          "enum": [
            "never",
            "always",
            "manual"
          ],
          "enumDescriptions": [
            "Do not reload when saving",
            "Reload for all saves, manual or automatic",
            "Only reload for manual saves (requires pressing Save explicitly if using autosave)"
          ],
          "default": "manual",
          "markdownDescription": "Whether to automatically send a Hot Reload request to Flutter apps during a debug session when saving files. Dart apps are controlled by the hotReloadOnSave setting.",
          "scope": "window"
        },
        "dart.hotReloadOnSave": {
          "enum": [
            "never",
            "always",
            "manual"
          ],
          "enumDescriptions": [
            "Do not reload when saving",
            "Reload for all saves, manual or automatic",
            "Only reload for manual saves (requires pressing Save explicitly if using autosave)"
          ],
          "default": "never",
          "markdownDescription": "Whether to automatically send a Hot Reload request to Dart apps during a debug session when saving files. Flutter apps are controlled by the flutterHotReloadOnSave setting.",
          "scope": "window"
        },
        "dart.flutterHotRestartOnSave": {
          "type": "boolean",
          "default": true,
          "description": "Whether to automatically send a Hot Restart request during a debug session when saving files if Hot Reload is not available but Hot Restart is.",
          "scope": "window"
        },
        "dart.flutterOutline": {
          "type": "boolean",
          "default": true,
          "description": "Whether to show the Flutter Outline tree in the sidebar.",
          "scope": "window"
        },
        "dart.flutterRunAdditionalArgs": {
          "type": "array",
          "default": [],
          "markdownDescription": "Additional args to pass to the `flutter run` command. Using the `args`/`toolArgs` fields in `launch.json` is usually better than this setting as this setting will apply to _all_ projects.",
          "scope": "resource",
          "items": {
            "type": "string"
          }
        },
        "dart.flutterScreenshotPath": {
          "type": [
            "null",
            "string"
          ],
          "default": null,
          "description": "The path to a directory to save Flutter screenshots.",
          "scope": "machine-overridable"
        },
        "dart.flutterSelectDeviceWhenConnected": {
          "type": "boolean",
          "default": true,
          "description": "Whether to set newly connected devices as the current device in Flutter projects.",
          "scope": "window"
        },
        "dart.flutterShowEmulators": {
          "enum": [
            "local",
            "always"
          ],
          "enumDescriptions": [
            "Only show for local workspaces",
            "Always show, even for remote sessions"
          ],
          "default": "local",
          "markdownDescription": "When to show the Flutter emulators. These are usually hidden for remote workspaces because it is usually not possible to see or interact with emulators in a remote session. If you are using remoting/containers in a way that you can interact with launched emulator processes, you may wish to set this to 'always'.",
          "scope": "window"
        },
        "dart.flutterShowWebServerDevice": {
          "enum": [
            "remote",
            "always"
          ],
          "enumDescriptions": [
            "Only show for remote workspaces (includes browser-based workspaces)",
            "Always show, even for local sessions"
          ],
          "default": "remote",
          "markdownDescription": "When to show the Flutter headless web-server device. This requires using the Dart Debug extension for Chrome and is usually only used for remote environments where Chrome is not available such as browser/cloud-based IDEs (requires restart).",
          "scope": "window"
        },
        "dart.flutterStructuredErrors": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Whether to use Flutter's [structured error support](https://medium.com/flutter/improving-flutters-error-messages-e098513cecf9) for improved error display.",
          "scope": "resource"
        },
        "dart.flutterTestAdditionalArgs": {
          "type": "array",
          "default": [],
          "markdownDescription": "Additional args to pass to the `flutter test` command. Using the `args`/`toolArgs` fields in `launch.json` is usually better than this setting as this setting will apply to _all_ projects.",
          "scope": "resource",
          "items": {
            "type": "string"
          }
        },
        "dart.flutterTrackWidgetCreation": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Whether to pass `--track-widget-creation` to Flutter apps (required to support 'Inspect Widget'). This setting is always ignored when running in Profile or Release mode.",
          "scope": "resource"
        },
        "dart.flutterWebRenderer": {
          "enum": [
            "auto",
            "html",
            "canvaskit"
          ],
          "enumDescriptions": [
            "Allow Flutter to pick the best renderer based on the users device",
            "Always use the HTML renderer",
            "Always use the CanvasKit renderer"
          ],
          "default": "auto",
          "markdownDescription": "Sets the [Web renderer](https://flutter.dev/docs/development/tools/web-renderers) used for Flutter web apps.",
          "scope": "window"
        }
      }
    },
    "4": {
      "title": "Logging",
      "properties": {
        "dart.analyzerInstrumentationLogFile": {
          "type": [
            "null",
            "string"
          ],
          "default": null,
          "description": "The path to a log file for very detailed logging in the Dart analysis server that may be useful when trying to diagnose analysis server issues.",
          "scope": "machine-overridable"
        },
        "dart.analyzerLogFile": {
          "type": [
            "null",
            "string"
          ],
          "default": null,
          "description": "The path to a log file for communication between Dart Code and the analysis server.",
          "scope": "machine-overridable"
        },
        "dart.dapLogFile": {
          "type": [
            "null",
            "string"
          ],
          "default": null,
          "markdownDescription": "The path to a log file for communication with the DAP debug adapters. This is useful when trying to diagnose issues with debugging such as missed breakpoints.",
          "scope": "machine-overridable"
        },
        "dart.devToolsLogFile": {
          "type": [
            "null",
            "string"
          ],
          "default": null,
          "description": "The path to a low-traffic log file for the Dart DevTools service.",
          "scope": "machine-overridable"
        },
        "dart.extensionLogFile": {
          "type": [
            "null",
            "string"
          ],
          "default": null,
          "description": "The path to a low-traffic log file for basic extension and editor issues.",
          "scope": "machine-overridable"
        },
        "dart.flutterDaemonLogFile": {
          "type": [
            "null",
            "string"
          ],
          "default": null,
          "markdownDescription": "The path to a log file for the `flutter daemon` service, which provides information about connected devices to show in the status bar.",
          "scope": "machine-overridable"
        },
        "dart.flutterRunLogFile": {
          "type": [
            "null",
            "string"
          ],
          "default": null,
          "markdownDescription": "The path to a log file for `flutter run`, which is used to launch Flutter apps from VS Code. This is useful when trying to diagnose issues with apps launching (or failing to) on simulators and devices. Use `${name}` in the log file name to prevent concurrent debug sessions overwriting each others logs.",
          "scope": "machine-overridable"
        },
        "dart.flutterTestLogFile": {
          "type": [
            "null",
            "string"
          ],
          "default": null,
          "markdownDescription": "The path to a log file for `flutter test`, which is used to run unit tests from VS Code. This is useful when trying to diagnose issues with unit test executions. Use `${name}` in the log file name to prevent concurrent debug sessions overwriting each others logs.",
          "scope": "machine-overridable"
        },
        "dart.maxLogLineLength": {
          "type": "number",
          "default": 2000,
          "description": "The maximum length of a line in the log file. Lines longer than this will be truncated and suffixed with an ellipsis.",
          "scope": "window"
        },
        "dart.dartTestLogFile": {
          "type": [
            "null",
            "string"
          ],
          "default": null,
          "markdownDescription": "The path to a log file for Dart test runs. This is useful when trying to diagnose issues with unit test executions. Use `${name}` in the log file name to prevent concurrent debug sessions overwriting each others logs.",
          "scope": "machine-overridable"
        },
        "dart.vmServiceLogFile": {
          "type": [
            "null",
            "string"
          ],
          "default": null,
          "markdownDescription": "The path to a log file for communication between Dart Code and the VM service. This is useful when trying to diagnose issues with debugging such as missed breakpoints. Use `${name}` in the log file name to prevent concurrent debug sessions overwriting each others logs.",
          "scope": "machine-overridable"
        },
        "dart.webDaemonLogFile": {
          "type": [
            "null",
            "string"
          ],
          "default": null,
          "markdownDescription": "The path to a log file for communication between Dart Code and the webdev daemon. This is useful when trying to diagnose issues with launching web apps. Use `${name`} in the log file name to prevent concurrent debug sessions overwriting each others logs.",
          "scope": "machine-overridable"
        }
      }
    },
    "5": {
      "title": "Pub",
      "properties": {
        "dart.promptToGetPackages": {
          "type": "boolean",
          "default": true,
          "description": "Whether to prompt to get packages when opening a project with out of date packages.",
          "scope": "resource"
        },
        "dart.pubAdditionalArgs": {
          "type": "array",
          "default": [],
          "markdownDescription": "Additional args to pass to all `pub` commands.",
          "scope": "resource",
          "items": {
            "type": "string"
          }
        },
        "dart.runPubGetOnPubspecChanges": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Whether to automatically run `pub get` whenever `pubspec.yaml` is saved.",
          "scope": "resource"
        }
      }
    },
    "6": {
      "title": "Run and Debug",
      "properties": {
        "dart.buildRunnerAdditionalArgs": {
          "type": "array",
          "default": [],
          "markdownDescription": "Additional args to pass to the `build_runner` when building/watching/serving.",
          "scope": "window",
          "items": {
            "type": "string"
          }
        },
        "dart.cliConsole": {
          "enum": [
            "debugConsole",
            "terminal",
            "externalTerminal"
          ],
          "default": "debugConsole",
          "description": "Whether to run Dart CLI apps in the Debug Console or a terminal. The Debug Console has more functionality because the process is controlled by the debug adapter, but is unable to accept input from the user via stdin.",
          "enumDescriptions": [
            "Run in the Debug Console pane, using the input as a REPL to evaluate expressions",
            "Run in the VS Code integrated terminal where input will be sent to stdin",
            "Run in an external terminal where input will be sent to stdin"
          ],
          "scope": "window"
        },
        "dart.debugExtensionBackendProtocol": {
          "enum": [
            "sse",
            "ws"
          ],
          "enumDescriptions": [
            "Server-Sent Events",
            "WebSockets"
          ],
          "default": "ws",
          "description": "The protocol to use for the Dart Debug Extension backend service and injected client. Using WebSockets can improve performance but may fail when connecting through some proxy servers.",
          "scope": "window"
        },
        "dart.debugExternalPackageLibraries": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Whether to mark external pub package libraries (including `package:flutter`) as debuggable, enabling stepping into them while debugging.",
          "scope": "window"
        },
        "dart.evaluateGettersInDebugViews": {
          "type": "boolean",
          "default": true,
          "description": "Whether to evaluate getters in order to display them in debug views (such as the Variables, Watch and Hovers views).",
          "scope": "resource"
        },
        "dart.evaluateToStringInDebugViews": {
          "type": "boolean",
          "default": true,
          "description": "Whether to call toString() on objects when rendering them in debug views (such as the Variables, Watch and Hovers views). Only applies to views of 100 or fewer values for performance reasons.",
          "scope": "window"
        },
        "dart.hotReloadProgress": {
          "enum": [
            "notification",
            "statusBar"
          ],
          "enumDescriptions": [
            "Hot reload progress will be shown in a toast notification",
            "Hot reload progress will be shown only in the status bar"
          ],
          "default": "notification",
          "description": "Determines how to display Hot Restart and Hot Reload progress.",
          "scope": "window"
        },
        "dart.promptToRunIfErrors": {
          "type": "boolean",
          "default": true,
          "description": "Whether to prompt before running if there are errors in your project. Test scripts will be excluded from the check unless they're the script being run.",
          "scope": "window"
        },
        "dart.showDartDeveloperLogs": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Whether to show logs from the `dart:developer` `log()` function in the debug console.",
          "scope": "resource"
        },
        "dart.showDevToolsDebugToolBarButtons": {
          "type": "boolean",
          "default": true,
          "description": "Whether to show DevTools buttons in the floating Debug toolbar.",
          "scope": "window"
        },
        "dart.suppressTestTimeouts": {
          "enum": [
            "never",
            "debug",
            "always"
          ],
          "enumDescriptions": [
            "Do not suppress test timeouts",
            "Suppress test timeouts when Debugging",
            "Suppress test timeouts both when Running and Debugging"
          ],
          "default": "never",
          "markdownDescription": "Whether to suppress test timeouts when running/debugging tests. This currently works by increasing the default timeout to 1d but will not affect tests that have explicit (non-factor) timeouts set with @timeout.",
          "scope": "resource"
        },
        "dart.cliAdditionalArgs": {
          "type": "array",
          "default": [],
          "markdownDescription": "Additional args to pass to the `dart` command when running CLI scripts. Using the `args`/`toolArgs` fields in `launch.json` is usually better than this setting as this setting will apply to _all_ projects.",
          "scope": "resource",
          "items": {
            "type": "string"
          }
        },
        "dart.testAdditionalArgs": {
          "type": "array",
          "default": [],
          "markdownDescription": "Additional args to pass to the `dart test` command. Using the `args`/`toolArgs` fields in `launch.json` is usually better than this setting as this setting will apply to _all_ projects.",
          "scope": "resource",
          "items": {
            "type": "string"
          }
        },
        "dart.vmAdditionalArgs": {
          "type": "array",
          "default": [],
          "description": "Additional args to pass to the Dart VM when running/debugging command line apps or Dart test scripts.",
          "scope": "resource",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "7": {
      "title": "SDK",
      "properties": {
        "dart.checkForSdkUpdates": {
          "type": "boolean",
          "default": true,
          "description": "Whether to check you are using the latest version of the Dart SDK at startup.",
          "scope": "window"
        },
        "dart.sdkPath": {
          "type": [
            "null",
            "string"
          ],
          "default": null,
          "markdownDescription": "The location of the Dart SDK to use for analyzing and executing code. If blank, Dart Code will attempt to find it from the `PATH` environment variable. When editing a Flutter project, the version of Dart included in the Flutter SDK is used in preference.",
          "scope": "machine-overridable"
        },
        "dart.sdkPaths": {
          "type": "array",
          "default": [],
          "description": "An array of paths that either directly point to a Dart SDK or the parent directory of multiple Dart SDKs. When set, the version number in the status bar can be used to quickly switch between SDKs.",
          "items": {
            "type": "string"
          },
          "scope": "machine-overridable"
        },
        "dart.debugSdkLibraries": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Whether to mark Dart SDK libraries (`dart:*`) as debuggable, enabling stepping into them while debugging.",
          "scope": "window"
        },
        "dart.flutterSdkPath": {
          "type": [
            "null",
            "string"
          ],
          "default": null,
          "markdownDescription": "The location of the Flutter SDK to use. If blank, Dart Code will attempt to find it from the project directory, `FLUTTER_ROOT` environment variable and the `PATH` environment variable.",
          "scope": "machine-overridable"
        },
        "dart.flutterSdkPaths": {
          "type": "array",
          "default": [],
          "description": "An array of paths that either directly point to a Flutter SDK or the parent directory of multiple Flutter SDKs. When set, the version number in the status bar can be used to quickly switch between SDKs.",
          "items": {
            "type": "string"
          },
          "scope": "machine-overridable"
        }
      }
    },
    "8": {
      "title": "Testing",
      "properties": {
        "dart.allowTestsOutsideTestFolder": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Whether to consider files ending `_test.dart` that are outside of the test directory as tests. This should be enabled if you put tests inside the `lib` directory of your Flutter app so they will be run with `flutter test` and not `flutter run`.",
          "scope": "window"
        },
        "dart.openTestView": {
          "type": "array",
          "items": {
            "enum": [
              "testRunStart",
              "testFailure"
            ]
          },
          "default": [
            "testRunStart"
          ],
          "description": "When to automatically switch focus to the test list (array to support multiple values).",
          "scope": "window"
        },
        "dart.showSkippedTests": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Whether to show skipped tests in the test tree.",
          "scope": "window"
        }
      }
    },
    "9": {
      "title": "Other",
      "order": 9,
      "properties": {
        "dart.allowAnalytics": {
          "type": "boolean",
          "default": true,
          "description": "Whether to send analytics such as startup timings, frequency of use of features and analysis server crashes.",
          "scope": "window"
        },
        "dart.env": {
          "type": "object",
          "default": {},
          "description": "Additional environment variables to be added to all Dart/Flutter processes spawned by the Dart and Flutter extensions.",
          "scope": "window"
        }
      }
    },
    "10": {
      "title": "Experimental",
      "order": 10,
      "properties": {
        "dart.enableServerSnippets": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "This setting is currently unused and should be left set to 'false'. It will be updated and enabled by default in the future.",
          "scope": "window"
        },
        "dart.normalizeFileCasing": {
          "type": "boolean",
          "default": false,
          "description": "Whether to normalize file casings before sending them to the LSP server. This may fix issues with file_names lints not disappearing after renaming a file if the VS Code API continues to use the original casing.",
          "scope": "window"
        },
        "dart.previewBazelWorkspaceCustomScripts": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "EXPERIMENTAL: Whether to look for custom script definitions at `dart/config/intellij-plugins/flutter.json` in Bazel workspaces. Currently supported for macOS and Linux only.",
          "scope": "window"
        },
        "dart.previewCommitCharacters": {
          "type": "boolean",
          "default": false,
          "description": "EXPERIMENTAL: Whether to enable commit characters for the LSP server. In a future release, the dart.enableCompletionCommitCharacters setting will also apply to LSP.",
          "scope": "window"
        },
        "dart.previewFlutterUiGuides": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "EXPERIMENTAL: Whether to enable the [Flutter UI Guides preview](https://dartcode.org/releases/v3-1/#preview-flutter-ui-guides).",
          "scope": "window"
        },
        "dart.previewFlutterUiGuidesCustomTracking": {
          "type": "boolean",
          "default": false,
          "description": "EXPERIMENTAL: Whether to enable custom tracking of Flutter UI guidelines (to hide some latency of waiting for the next Flutter Outline).",
          "scope": "window"
        },
        "dart.previewHotReloadOnSaveWatcher": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Whether to perform hot reload on save based on a filesystem watcher for Dart files rather than using VS Code's `onDidSave` event. This allows reloads to trigger when external tools modify Dart source files.",
          "scope": "window"
        }
      }
    },
    "properties": {}
  },
  {
    "type": "object",
    "title": "Haskell configuration",
    "properties": {
      "haskell.indentationRules.enabled": {
        "type": "boolean",
        "default": true,
        "description": "Set to 'false' to disable automatically increasing indent on newlines after '=', 'do', 'where' etc."
      }
    }
  },
  {
    "type": "object",
    "title": "Reason configuration",
    "properties": {
      "reason.codelens.unicode": {
        "type": "boolean",
        "default": true,
        "description": "Enable the use of unicode symbols in codelens."
      },
      "reason.codelens.enabled": {
        "type": "boolean",
        "default": false,
        "description": "Specifies whether the code lens is shown."
      },
      "reason.debounce.linter": {
        "oneOf": [
          {
            "type": "integer"
          },
          {
            "enum": [
              "Infinity"
            ]
          }
        ],
        "default": 500,
        "description": "How long to idle (in milliseconds) after keypresses before refreshing linter diagnostics. Smaller values refresh diagnostics more quickly."
      },
      "reason.diagnostics.tools": {
        "type": "array",
        "items": {
          "enum": [
            "merlin",
            "bsb"
          ]
        },
        "default": [
          "merlin"
        ],
        "maxItems": 2,
        "uniqueItems": true,
        "description": "Specifies which tool or tools will be used to get diagnostics. If you choose both \"merlin\" and \"bsb\", merlin will be used while editing and bsb when saving."
      },
      "reason.format.width": {
        "type": [
          "number",
          null
        ],
        "default": null,
        "description": "Set the width of lines when formatting code with refmt"
      },
      "reason.path.bsb": {
        "type": "string",
        "default": "./node_modules/bs-platform/lib/bsb.exe",
        "description": "The path to the `bsb` binary."
      },
      "reason.path.ocamlfind": {
        "type": "string",
        "default": "ocamlfind",
        "description": "The path to the `ocamlfind` binary."
      },
      "reason.path.esy": {
        "type": "string",
        "default": "esy",
        "description": "The path to the `esy` binary."
      },
      "reason.path.env": {
        "type": "string",
        "default": "env",
        "description": "The path to the `env` command which prints the language server environment for debugging editor issues."
      },
      "reason.path.ocamlmerlin": {
        "type": "string",
        "default": "ocamlmerlin",
        "description": "The path to the `ocamlmerlin` binary."
      },
      "reason.path.ocpindent": {
        "type": "string",
        "default": "ocp-indent",
        "description": "The path to the `ocp-indent` binary."
      },
      "reason.path.opam": {
        "type": "string",
        "default": "opam",
        "description": "The path to the `opam` binary."
      },
      "reason.path.rebuild": {
        "type": "string",
        "default": "rebuild",
        "description": "The path to the `rebuild` binary."
      },
      "reason.path.refmt": {
        "type": "string",
        "default": "refmt",
        "description": "The path to the `refmt` binary."
      },
      "reason.path.refmterr": {
        "type": "string",
        "default": "refmterr",
        "description": "The path to the `refmterr` binary."
      },
      "reason.path.rtop": {
        "type": "string",
        "default": "rtop",
        "description": "The path to the `rtop` binary."
      },
      "reason.server.languages": {
        "type": "array",
        "items": {
          "enum": [
            "ocaml",
            "reason"
          ]
        },
        "default": [
          "ocaml",
          "reason"
        ],
        "maxItems": 2,
        "uniqueItems": true,
        "description": "The list of languages enable support for in the language server."
      }
    }
  },
  {
    "type": "object",
    "title": "Pascal",
    "properties": {
      "pascal.tags.autoGenerate": {
        "type": "boolean",
        "default": true,
        "description": "Controls if the extension should automatically generate tags in projects opened for the first time"
      },
      "pascal.codeNavigation": {
        "type": "string",
        "default": "workspace",
        "scope": "resource",
        "description": "Select how the code navigation should work",
        "enum": [
          "workspace",
          "file"
        ]
      }
    }
  },
  {
    "type": "object",
    "title": "PGSQL configuration",
    "properties": {
      "pgsql.logDebugInfo": {
        "type": "boolean",
        "default": false,
        "description": "[Optional] Log debug output to the VS Code console (Help -> Toggle Developer Tools)",
        "scope": "window"
      },
      "pgsql.debugSourcePath": {
        "type": [
          "string",
          "null"
        ],
        "default": null,
        "description": "[Optional] Path to the source directory of the PostgreSQL Tools Service, for debugging"
      },
      "pgsql.useDebugSource": {
        "type": "boolean",
        "default": false,
        "description": "[Optional] Enable running the PGSQL extension via the path set in pgsql.debugSourcePath"
      },
      "pgsql.enableStartupDebugging": {
        "type": "boolean",
        "default": false,
        "description": "[Optional] Whether to make the PostgreSQL Tools Service wait for a debugger to attach when starting"
      },
      "pgsql.debugServerPort": {
        "type": "number",
        "default": 3000,
        "description": "[Optional] The port to run the PostgreSQL Tools Service remote debugger on (default 3000)"
      },
      "pgsql.maxRecentConnections": {
        "type": "number",
        "default": 5,
        "description": "The maximum number of recently used connections to store in the connection list.",
        "scope": "window"
      },
      "pgsql.connections": {
        "type": "array",
        "default": [
          {
            "server": "{{put-server-name-here}}",
            "database": "{{put-database-name-here}}",
            "user": "{{put-username-here}}",
            "password": "{{put-password-here}}"
          }
        ],
        "description": "Connection profiles defined in 'User Settings' are shown under 'PostgreSQL: Connect' command in the command palette.",
        "items": {
          "type": "object",
          "properties": {
            "host": {
              "type": "string",
              "default": "{{put-server-name-here}}",
              "description": "[Required] Specify the server name to connect to. Use 'hostname instance' or '<server>.postgres.database.azure.com' for Azure Database for PostgreSQL servers."
            },
            "dbname": {
              "type": "string",
              "default": "{{put-database-name-here}}",
              "description": "[Optional] Specify the database name to connect to. If database is not specified, the default user database setting is used, typically 'postgres'."
            },
            "user": {
              "type": "string",
              "default": "{{put-username-here}}",
              "description": "[Required] Specify the user name for PostgreSQL Server authentication. If user name is not specified, when you connect, you will be asked again."
            },
            "password": {
              "type": "string",
              "default": "{{put-password-here}}",
              "description": "[Required] Specify the password for PostgreSQL Server authentication. If password is not specified or already saved, when you connect, you will be asked again."
            },
            "emptyPasswordInput": {
              "type": "boolean",
              "description": "[Optional] Indicates whether this profile has an empty password explicitly set"
            },
            "port": {
              "type": "string",
              "default": "{{put-port-here}}",
              "description": "[Optional] Indicates port number of the server"
            },
            "hostaddr": {
              "type": "string",
              "default": "{{put-hostaddr-here}}",
              "description": "[Optional] Indicates IP address of the server"
            },
            "connectTimeout": {
              "type": "number",
              "default": "15",
              "description": "[Optional] Seconds to wait before timing out when connecting"
            },
            "clientEncoding": {
              "type": "string",
              "default": "{{put-clientEncoding-here}}",
              "description": "[Optional] Indicates client encoding for the connection"
            },
            "options": {
              "type": "string",
              "default": "{{put-Command-line options-here}}",
              "description": "[Optional] Command-line options to send to the server when the connection starts"
            },
            "applicationName": {
              "type": "string",
              "default": "{{put-applicationName-here}}",
              "description": "[Optional] Indicates Value for the 'application_name' configuration parameter"
            },
            "sslmode": {
              "type": "string",
              "default": "prefer",
              "description": "[Optional] Indicates sslmode used when connecting"
            },
            "sslcompression": {
              "type": "boolean",
              "default": "{{put-sslcompression-here}}",
              "description": "[Optional] Whether to compress SSL connections"
            },
            "sslcert": {
              "type": "string",
              "default": "{{put-sslcert-here}}",
              "description": "[Optional] The filename of the SSL certificate to use"
            },
            "sslkey": {
              "type": "string",
              "default": "{{put-sslkey-here}}",
              "description": "[Optional] The filename of the key to use for the SSL certificate"
            },
            "sslrootcert": {
              "type": "string",
              "default": "{{put-sslrootcert-here}}",
              "description": "[Optional] The filename of the SSL root CA certificate to use"
            },
            "sslcrl": {
              "type": "string",
              "default": "{{put-sslcrl-here}}",
              "description": "[Optional] The filename of the SSL certificate revocation list to use"
            },
            "requirepeer": {
              "type": "string",
              "default": "{{put-requirepeer-here}}",
              "description": "[Optional] The required username of the server process"
            },
            "service": {
              "type": "string",
              "default": "{{put-service-here}}",
              "description": "[Optional] The service name in pg_service.conf to use for connection parameters"
            }
          }
        },
        "scope": "resource"
      },
      "pgsql.shortcuts": {
        "type": "object",
        "description": "Shortcuts related to the results window",
        "default": {
          "_comment": "Short cuts must follow the format (ctrl)+(shift)+(alt)+[key]",
          "event.toggleResultPane": "ctrl+alt+r",
          "event.toggleMessagePane": "ctrl+alt+y",
          "event.prevGrid": "ctrl+up",
          "event.nextGrid": "ctrl+down",
          "event.copySelection": "ctrl+c",
          "event.copyWithHeaders": "",
          "event.maximizeGrid": "",
          "event.selectAll": "",
          "event.saveAsJSON": "",
          "event.saveAsCSV": "",
          "event.saveAsExcel": ""
        },
        "scope": "resource"
      },
      "pgsql.messagesDefaultOpen": {
        "type": "boolean",
        "description": "True for the messages pane to be open by default; false for closed",
        "default": true,
        "scope": "resource"
      },
      "pgsql.resultsFontFamily": {
        "type": "string",
        "description": "Set the font family for the results grid; set to blank to use the editor font",
        "default": "-apple-system,BlinkMacSystemFont,Segoe WPC,Segoe UI,HelveticaNeue-Light,Ubuntu,Droid Sans,sans-serif",
        "scope": "resource"
      },
      "pgsql.resultsFontSize": {
        "type": "number",
        "description": "Set the font size for the results grid; set to blank to use the editor size",
        "default": 13,
        "scope": "resource"
      },
      "pgsql.saveAsCsv.includeHeaders": {
        "type": "boolean",
        "description": "[Optional] When true, column headers are included when saving results as CSV",
        "default": true,
        "scope": "resource"
      },
      "pgsql.copyIncludeHeaders": {
        "type": "boolean",
        "description": "[Optional] Configuration options for copying results from the Results View",
        "default": false,
        "scope": "resource"
      },
      "pgsql.copyRemoveNewLine": {
        "type": "boolean",
        "description": "[Optional] Configuration options for copying multi-line results from the Results View",
        "default": true,
        "scope": "resource"
      },
      "pgsql.showBatchTime": {
        "type": "boolean",
        "description": "[Optional] Should execution time be shown for individual batches",
        "default": false,
        "scope": "resource"
      },
      "pgsql.splitPaneSelection": {
        "type": "string",
        "description": "[Optional] Configuration options for which column new result panes should open in",
        "default": "next",
        "enum": [
          "next",
          "current",
          "end"
        ],
        "scope": "resource"
      },
      "pgsql.format.alignColumnDefinitionsInColumns": {
        "type": "boolean",
        "description": "Should column definitions be aligned?",
        "default": false,
        "scope": "window"
      },
      "pgsql.format.datatypeCasing": {
        "type": "string",
        "description": "Should data types be formatted as UPPERCASE, lowercase, or none (not formatted)",
        "default": "none",
        "enum": [
          "none",
          "uppercase",
          "lowercase"
        ],
        "scope": "window"
      },
      "pgsql.format.keywordCasing": {
        "type": "string",
        "description": "Should keywords be formatted as UPPERCASE, lowercase, or none (not formatted)",
        "default": "none",
        "enum": [
          "none",
          "uppercase",
          "lowercase"
        ],
        "scope": "window"
      },
      "pgsql.format.placeCommasBeforeNextStatement": {
        "type": "boolean",
        "description": "should commas be placed at the beginning of each statement in a list e.g. ', mycolumn2' instead of at the end e.g. 'mycolumn1,'",
        "default": false,
        "scope": "window"
      },
      "pgsql.format.placeSelectStatementReferencesOnNewLine": {
        "type": "boolean",
        "description": "Should references to objects in a select statements be split into separate lines? E.g. for 'SELECT C1, C2 FROM T1' both C1 and C2 will be on separate lines",
        "default": false,
        "scope": "window"
      },
      "pgsql.applyLocalization": {
        "type": "boolean",
        "description": "[Optional] Configuration options for localizing into VSCode's configured locale (must restart VSCode for settings to take effect)",
        "default": false,
        "scope": "window"
      },
      "pgsql.query.displayBitAsNumber": {
        "type": "boolean",
        "default": true,
        "description": "Should BIT columns be displayed as numbers (1 or 0)? If false, BIT columns will be displayed as 'true' or 'false'",
        "scope": "window"
      },
      "pgsql.intelliSense.enableIntelliSense": {
        "type": "boolean",
        "default": true,
        "description": "Should IntelliSense be enabled",
        "scope": "window"
      },
      "pgsql.intelliSense.enableErrorChecking": {
        "type": "boolean",
        "default": true,
        "description": "Should IntelliSense error checking be enabled",
        "scope": "window"
      },
      "pgsql.intelliSense.enableSuggestions": {
        "type": "boolean",
        "default": true,
        "description": "Should IntelliSense suggestions be enabled",
        "scope": "window"
      },
      "pgsql.intelliSense.enableQuickInfo": {
        "type": "boolean",
        "default": true,
        "description": "Should IntelliSense quick info be enabled",
        "scope": "window"
      },
      "pgsql.intelliSense.lowerCaseSuggestions": {
        "type": "boolean",
        "default": false,
        "description": "Should IntelliSense suggestions be lowercase",
        "scope": "window"
      },
      "pgsql.persistQueryResultTabs": {
        "type": "boolean",
        "default": false,
        "description": "Should query result selections and scroll positions be saved when switching tabs (may impact performance)",
        "scope": "window"
      }
    }
  },
  {
    "title": "COBOL Language Support",
    "properties": {
      "cobol-lsp.cpy-manager.profiles": {
        "type": "string",
        "description": "Current default profile for copybook downloader"
      },
      "cobol-lsp.cpy-manager.paths-local": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Default list of relative local paths to search for copybooks",
        "uniqueItems": true
      },
      "cobol-lsp.cpy-manager.paths-dsn": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Default list of datasets to search for copybooks",
        "uniqueItems": true
      },
      "cobol-lsp.subroutine-manager.paths-local": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of relative local paths to search for subroutines",
        "uniqueItems": true,
        "default": [
          "/tmp/project"
        ]
      },
      "cobol-lsp.logging.level.root": {
        "type": "string",
        "default": "ERROR",
        "enum": [
          "ERROR",
          "WARN",
          "INFO",
          "DEBUG",
          "TRACE",
          "ALL"
        ],
        "enumDescriptions": [
          "ERROR level logs error events which may or not be fatal to the application",
          "WARN level logs potentially harmful situations",
          "INFO level logs informational messages highlighting overall progress of the application",
          "DEBUG level logs informational events of very low importance",
          "TRACE level logs informational events of very low importance",
          "ALL level is used to turn on all logging"
        ],
        "description": "The logging level for COBOL LS backend"
      },
      "cobol-lsp.target-sql-backend": {
        "type": "string",
        "default": "DB2_SERVER",
        "enum": [
          "DB2_SERVER",
          "DATACOM_SERVER"
        ],
        "enumDescriptions": [
          "DB2_SERVER  - IBM DB2 SQL Server",
          "DATACOM_SERVER - CA DATACOM Server"
        ],
        "description": "The target SQL backend server which will be used in mainframe"
      }
    }
  },
  {
    "type": "object",
    "title": "Elixir settings",
    "properties": {
      "elixir.useElixirSense": {
        "type": "boolean",
        "default": true,
        "description": "Use elixir-sense instead of alchemist-server"
      },
      "elixir.autoSpawnElixirSenseServers": {
        "type": "boolean",
        "default": true,
        "description": "Automatically handle spawning of elixir-sense servers for each folder in the workspace"
      },
      "elixir.command": {
        "type": "string",
        "default": "elixir",
        "description": "Command to be run for launching the elixir_sense server providing intellisense features. Defaults to 'elixir'"
      },
      "elixir.elixirEnv": {
        "type": "string",
        "default": "dev",
        "description": "Project environment"
      },
      "elixir.projectPath": {
        "type": "string",
        "default": "",
        "description": "The path to the mix project in the folder structure of your project"
      }
    }
  },
  {
    "type": "object",
    "title": "Erlang",
    "properties": {
      "erlang.erlangPath": {
        "type": "string",
        "default": "",
        "description": "Directory where erl/escript are located. Leave empty to use default."
      },
      "erlang.rebarPath": {
        "type": "string",
        "default": "",
        "description": "Directory where rebar/rebar3 are located. Leave empty to use default."
      },
      "erlang.rebarBuildArgs": {
        "type": "array",
        "items": {
          "type": "string",
          "title": "argument",
          "default": ""
        },
        "default": [
          "compile"
        ],
        "description": "Arguments passed to rebar/rebar3 build command."
      },
      "erlang.includePaths": {
        "type": "array",
        "items": {
          "type": "string",
          "title": "path",
          "default": ""
        },
        "default": [],
        "description": "Include paths used when extension analyses the sources. Paths are read from rebar.config, and also standard set of paths is used. This setting is for special cases when the default behaviour is not enough."
      },
      "erlang.linting": {
        "type": "boolean",
        "default": true,
        "description": "Enable/disable dynamic validation of opened Erlang source files."
      },
      "erlang.codeLensEnabled": {
        "type": "boolean",
        "default": false,
        "description": "Enable/disable references CodeLens on functions."
      },
      "erlang.verbose": {
        "type": "boolean",
        "description": "Enable/disable technical traces for use in the extension development.",
        "default": false
      },
      "erlang.debuggerRunMode": {
        "type": "string",
        "default": "external",
        "description": "Specifies how to run vscode debugadapter. Useful in extension development.",
        "enum": [
          "external",
          "server",
          "inline"
        ],
        "enumDescriptions": [
          "external : launch debug adapter in separate process",
          "server: launch debugadapter as a socket based server",
          "inline: launch debugadapter in current process"
        ]
      },
      "erlang.eep48Help": {
        "type": "boolean",
        "default": true,
        "description": "Enable/disable help based on Erlang documentation storage added in OTP 23. The setting is ignored in earlier versions."
      }
    }
  },
  {
    "title": "Verilog configuration",
    "properties": {
      "verilog.linting.linter": {
        "scope": "window",
        "type": "string",
        "enum": [
          "xvlog",
          "iverilog",
          "verilator",
          "modelsim",
          "none"
        ],
        "default": "none",
        "description": "Select the verilog linter. Possible values are 'iverilog', 'verilator', xvlog' or 'none'."
      },
      "verilog.linting.xvlog.arguments": {
        "scope": "window",
        "type": "string",
        "default": "",
        "description": "Add xvlog arguments here. They will be added to xvlog while linting."
      },
      "verilog.linting.iverilog.arguments": {
        "scope": "window",
        "type": "string",
        "default": "",
        "description": "Add Icarus Verilog arguments here (like macros). They will be added to Icarus Verilog while linting (The command \"-t null\" will be added by the linter by default)."
      },
      "verilog.linting.iverilog.runAtFileLocation": {
        "scope": "window",
        "type": "boolean",
        "default": false,
        "description": "If enabled, Icarus Verilog will be run at the file location for linting. Else it will be run at workspace folder. Disabled by default."
      },
      "verilog.linting.modelsim.runAtFileLocation": {
        "scope": "window",
        "type": "boolean",
        "default": false,
        "description": "If enabled, Modelsim will be run at the file location for linting. Else it will be run at workspace folder. Disabled by default."
      },
      "verilog.linting.modelsim.arguments": {
        "scope": "window",
        "type": "string",
        "default": "",
        "description": "Add Modelsim arguments here. They will be added to Modelsim while linting."
      },
      "verilog.linting.modelsim.work": {
        "scope": "window",
        "type": "string",
        "default": "",
        "description": "Add Modelsim work library here."
      },
      "verilog.linting.verilator.arguments": {
        "scope": "window",
        "type": "string",
        "default": "",
        "description": "Add Verilator arguments here (like macros). They will be added to Verilator while linting (The command \"--lint-only -I<document folder>\" will be added by the linter by default)."
      },
      "verilog.linting.verilator.runAtFileLocation": {
        "scope": "window",
        "type": "boolean",
        "default": false,
        "description": "If enabled, Verilator will be run at the file location for linting. Else it will be run at workspace folder. Disabled by default."
      },
      "verilog.linting.verilator.useWSL": {
        "scope": "window",
        "type": "boolean",
        "default": false,
        "description": "If enabled, run verilator in WSL."
      },
      "verilog.ctags.path": {
        "scope": "window",
        "type": "string",
        "default": "ctags",
        "description": "A path to the installation of Universal Ctags."
      },
      "verilog.languageServer": {
        "scope": "window",
        "type": "string",
        "default": "none",
        "description": "Select the Language Server. Currently supports `svls`."
      },
      "verilog.logging.enabled": {
        "scope": "window",
        "type": "boolean",
        "default": false,
        "description": "Enable logging for this extension."
      }
    }
  },
  {
    "type": "object",
    "title": "PostgreSQL",
    "properties": {
      "vscode-postgres.defaultConnection": {
        "type": "string",
        "default": "",
        "description": "The default connection to use"
      },
      "vscode-postgres.defaultDatabase": {
        "type": "string",
        "default": "",
        "description": "The default database on the default connection to use"
      },
      "vscode-postgres.showExplorer": {
        "type": "boolean",
        "default": true,
        "description": "Show or hide the database explorer."
      },
      "vscode-postgres.prettyPrintJSONfields": {
        "type": "boolean",
        "default": false,
        "description": "Turns on/off pretty printing of JSON fields"
      },
      "vscode-postgres.setConnectionFromExplorer": {
        "type": "string",
        "enum": [
          "always",
          "ifunset",
          "never"
        ],
        "default": "always",
        "description": "Controls whether selecting a database in explorer changes the current editor's connection"
      },
      "vscode-postgres.tableColumnSortOrder": {
        "type": "string",
        "enum": [
          "db-order",
          "alpha",
          "reverse-alpha"
        ],
        "default": "db-order",
        "description": "Controls the order of the columns in the database explorer. Default is db-order which orders the columns as the were added to the table (how postgres reports them)"
      },
      "vscode-postgres.intervalFormat": {
        "type": "string",
        "enum": [
          "iso_8601",
          "humanize",
          "succinct"
        ],
        "default": "iso_8601",
        "description": "Controls the display format for `interval` columns. Default is the iso_8601 standard which does not cover milliseconds."
      },
      "vscode-postgres.virtualFolders": {
        "type": "array",
        "default": [
          "functions"
        ],
        "description": "Controls virtual folders that are shown under schema. Currently only functions are supported."
      }
    }
  },
  {
    "type": "object",
    "title": "Java",
    "properties": {
      "java.home": {
        "type": [
          "string",
          "null"
        ],
        "default": null,
        "description": "Specifies the folder path to the JDK (11 or more recent) used to launch the Java Language Server.\nOn Windows, backslashes must be escaped, i.e.\n\"java.home\":\"C:\\\\Program Files\\\\Java\\\\jdk11.0_8\"",
        "scope": "machine-overridable",
        "deprecationMessage": "This setting will be deprecated, please use the environment variable 'JAVA_HOME' instead."
      },
      "java.jdt.ls.vmargs": {
        "type": [
          "string",
          "null"
        ],
        "default": "-XX:+UseParallelGC -XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90 -Dsun.zip.disableMemoryMapping=true -Xmx1G -Xms100m",
        "description": "Specifies extra VM arguments used to launch the Java Language Server. Eg. use `-XX:+UseParallelGC -XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90 -Dsun.zip.disableMemoryMapping=true -Xmx1G -Xms100m ` to optimize memory usage with the parallel garbage collector",
        "scope": "window"
      },
      "java.errors.incompleteClasspath.severity": {
        "type": [
          "string"
        ],
        "enum": [
          "ignore",
          "info",
          "warning",
          "error"
        ],
        "default": "warning",
        "description": "Specifies the severity of the message when the classpath is incomplete for a Java file",
        "scope": "window"
      },
      "java.configuration.checkProjectSettingsExclusions": {
        "type": "boolean",
        "default": true,
        "description": "Controls whether to exclude extension-generated project settings files (.project, .classpath, .factorypath, .settings/) from the file explorer.",
        "scope": "window"
      },
      "java.configuration.updateBuildConfiguration": {
        "type": [
          "string"
        ],
        "enum": [
          "disabled",
          "interactive",
          "automatic"
        ],
        "default": "interactive",
        "description": "Specifies how modifications on build files update the Java classpath/configuration",
        "scope": "window"
      },
      "java.trace.server": {
        "type": "string",
        "enum": [
          "off",
          "messages",
          "verbose"
        ],
        "default": "off",
        "description": "Traces the communication between VS Code and the Java language server.",
        "scope": "window"
      },
      "java.import.maven.enabled": {
        "type": "boolean",
        "default": true,
        "description": "Enable/disable the Maven importer.",
        "scope": "window"
      },
      "java.import.gradle.enabled": {
        "type": "boolean",
        "default": true,
        "description": "Enable/disable the Gradle importer.",
        "scope": "window"
      },
      "java.import.gradle.wrapper.enabled": {
        "type": "boolean",
        "default": true,
        "description": "Use Gradle from the 'gradle-wrapper.properties' file.",
        "scope": "window"
      },
      "java.import.gradle.version": {
        "type": "string",
        "default": null,
        "description": "Use Gradle from the specific version if the Gradle wrapper is missing or disabled.",
        "scope": "window"
      },
      "java.import.gradle.home": {
        "type": "string",
        "default": null,
        "description": "Use Gradle from the specified local installation directory or GRADLE_HOME if the Gradle wrapper is missing or disabled and no 'java.import.gradle.version' is specified.",
        "scope": "window"
      },
      "java.import.gradle.java.home": {
        "type": "string",
        "default": null,
        "description": "The location to the JVM used to run the Gradle daemon.",
        "scope": "machine"
      },
      "java.import.gradle.offline.enabled": {
        "type": "boolean",
        "default": false,
        "description": "Enable/disable the Gradle offline mode.",
        "scope": "window"
      },
      "java.import.gradle.arguments": {
        "type": "string",
        "default": null,
        "description": "Arguments to pass to Gradle.",
        "scope": "machine"
      },
      "java.import.gradle.jvmArguments": {
        "type": "string",
        "default": null,
        "description": "JVM arguments to pass to Gradle.",
        "scope": "machine"
      },
      "java.import.gradle.user.home": {
        "type": "string",
        "default": null,
        "description": "Setting for GRADLE_USER_HOME.",
        "scope": "window"
      },
      "java.maven.downloadSources": {
        "type": "boolean",
        "default": false,
        "description": "Enable/disable download of Maven source artifacts as part of importing Maven projects.",
        "scope": "window"
      },
      "java.eclipse.downloadSources": {
        "type": "boolean",
        "default": false,
        "description": "Enable/disable download of Maven source artifacts for Eclipse projects.",
        "scope": "window"
      },
      "java.maven.updateSnapshots": {
        "type": "boolean",
        "default": false,
        "description": "Force update of Snapshots/Releases.",
        "scope": "window"
      },
      "java.referencesCodeLens.enabled": {
        "type": "boolean",
        "default": false,
        "description": "Enable/disable the references code lens.",
        "scope": "window"
      },
      "java.signatureHelp.enabled": {
        "type": "boolean",
        "default": false,
        "description": "Enable/disable the signature help.",
        "scope": "window"
      },
      "java.implementationsCodeLens.enabled": {
        "type": "boolean",
        "default": false,
        "description": "Enable/disable the implementations code lens.",
        "scope": "window"
      },
      "java.configuration.maven.userSettings": {
        "type": "string",
        "default": null,
        "description": "Path to Maven's user settings.xml",
        "scope": "window"
      },
      "java.configuration.maven.globalSettings": {
        "type": "string",
        "default": null,
        "description": "Path to Maven's global settings.xml",
        "scope": "window"
      },
      "java.configuration.maven.notCoveredPluginExecutionSeverity": {
        "type": "string",
        "enum": [
          "ignore",
          "warning",
          "error"
        ],
        "default": "warning",
        "description": "Specifies severity if the plugin execution is not covered by Maven build lifecycle.",
        "scope": "window"
      },
      "java.configuration.workspaceCacheLimit": {
        "type": [
          "null",
          "integer"
        ],
        "default": null,
        "minimum": 1,
        "description": "The number of days (if enabled) to keep unused workspace cache data. Beyond this limit, cached workspace data may be removed.",
        "scope": "application"
      },
      "java.format.enabled": {
        "type": "boolean",
        "default": true,
        "description": "Enable/disable default Java formatter",
        "scope": "window"
      },
      "java.saveActions.organizeImports": {
        "type": "boolean",
        "default": false,
        "description": "Enable/disable auto organize imports on save action",
        "scope": "window"
      },
      "java.import.exclusions": {
        "type": "array",
        "description": "Configure glob patterns for excluding folders. Use `!` to negate patterns to allow subfolders imports. You have to include a parent directory. The order is important.",
        "default": [
          "**/node_modules/**",
          "**/.metadata/**",
          "**/archetype-resources/**",
          "**/META-INF/maven/**"
        ],
        "scope": "window"
      },
      "java.import.generatesMetadataFilesAtProjectRoot": {
        "type": "boolean",
        "markdownDescription": "Specify whether the project metadata files(.project, .classpath, .factorypath, .settings/) will be generated at the project root. Click [HERE](command:_java.metadataFilesGeneration) to learn how to change the setting to make it take effect.",
        "default": false,
        "scope": "window"
      },
      "java.project.referencedLibraries": {
        "type": [
          "array",
          "object"
        ],
        "description": "Configure glob patterns for referencing local libraries to a Java project.",
        "default": [
          "lib/**/*.jar"
        ],
        "properties": {
          "include": {
            "type": "array"
          },
          "exclude": {
            "type": "array"
          },
          "sources": {
            "type": "object"
          }
        },
        "required": [
          "include"
        ],
        "additionalProperties": false,
        "scope": "window"
      },
      "java.project.outputPath": {
        "type": [
          "string",
          "null"
        ],
        "markdownDescription": "A relative path to the workspace where stores the compiled output. `Only` effective in the `WORKSPACE` scope. The setting will `NOT` affect Maven or Gradle project.",
        "default": "",
        "scope": "window"
      },
      "java.project.sourcePaths": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "markdownDescription": "Relative paths to the workspace where stores the source files. `Only` effective in the `WORKSPACE` scope. The setting will `NOT` affect Maven or Gradle project.",
        "default": [],
        "scope": "window"
      },
      "java.contentProvider.preferred": {
        "type": "string",
        "description": "Preferred content provider (a 3rd party decompiler id, usually)",
        "default": null,
        "scope": "window"
      },
      "java.autobuild.enabled": {
        "type": "boolean",
        "default": true,
        "description": "Enable/disable the 'auto build'",
        "scope": "window"
      },
      "java.maxConcurrentBuilds": {
        "type": "integer",
        "default": 1,
        "description": "Max simultaneous project builds",
        "scope": "window",
        "minimum": 1
      },
      "java.recommendations.dependency.analytics.show": {
        "type": "boolean",
        "default": true,
        "description": "Show the recommended Dependency Analytics extension.",
        "scope": "window"
      },
      "java.completion.maxResults": {
        "type": "integer",
        "default": 0,
        "markdownDescription": "Maximum number of completion results (not including snippets).\n`0` (the default value) disables the limit, all results are returned. In case of performance problems, consider setting a sensible limit.",
        "scope": "window"
      },
      "java.completion.enabled": {
        "type": "boolean",
        "default": true,
        "description": "Enable/disable code completion support",
        "scope": "window"
      },
      "java.completion.overwrite": {
        "type": "boolean",
        "default": true,
        "description": "When set to true, code completion overwrites the current text. When set to false, code is simply added instead.",
        "scope": "window"
      },
      "java.completion.guessMethodArguments": {
        "type": "boolean",
        "default": false,
        "description": "When set to true, method arguments are guessed when a method is selected from as list of code assist proposals.",
        "scope": "window"
      },
      "java.completion.favoriteStaticMembers": {
        "type": "array",
        "description": "Defines a list of static members or types with static members. Content assist will propose those static members even if the import is missing.",
        "default": [
          "org.junit.Assert.*",
          "org.junit.Assume.*",
          "org.junit.jupiter.api.Assertions.*",
          "org.junit.jupiter.api.Assumptions.*",
          "org.junit.jupiter.api.DynamicContainer.*",
          "org.junit.jupiter.api.DynamicTest.*",
          "org.mockito.Mockito.*",
          "org.mockito.ArgumentMatchers.*",
          "org.mockito.Answers.*"
        ],
        "scope": "window"
      },
      "java.completion.filteredTypes": {
        "type": "array",
        "description": "Defines the type filters. All types whose fully qualified name matches the selected filter strings will be ignored in content assist or quick fix proposals and when organizing imports. For example 'java.awt.*' will hide all types from the awt packages.",
        "default": [
          "java.awt.*",
          "com.sun.*",
          "sun.*",
          "jdk.*",
          "org.graalvm.*",
          "io.micrometer.shaded.*"
        ],
        "scope": "window"
      },
      "java.completion.importOrder": {
        "type": "array",
        "description": "Defines the sorting order of import statements. A package or type name prefix (e.g. 'org.eclipse') is a valid entry. An import is always added to the most specific group.",
        "default": [
          "java",
          "javax",
          "com",
          "org"
        ],
        "scope": "window"
      },
      "java.foldingRange.enabled": {
        "type": "boolean",
        "default": true,
        "description": "Enable/disable smart folding range support. If disabled, it will use the default indentation-based folding range provided by VS Code.",
        "scope": "window"
      },
      "java.progressReports.enabled": {
        "type": "boolean",
        "description": "[Experimental] Enable/disable progress reports from background processes on the server.",
        "default": true,
        "scope": "window"
      },
      "java.format.settings.url": {
        "type": "string",
        "markdownDescription": "Specifies the url or file path to the [Eclipse formatter xml settings](https://github.com/redhat-developer/vscode-java/wiki/Formatter-settings).",
        "default": null,
        "scope": "window"
      },
      "java.format.settings.profile": {
        "type": "string",
        "description": "Optional formatter profile name from the Eclipse formatter settings.",
        "default": null,
        "scope": "window"
      },
      "java.format.comments.enabled": {
        "type": "boolean",
        "description": "Includes the comments during code formatting.",
        "default": true,
        "scope": "window"
      },
      "java.format.onType.enabled": {
        "type": "boolean",
        "description": "Enable/disable automatic block formatting when typing `;`, `<enter>` or `}`",
        "default": true,
        "scope": "window"
      },
      "java.codeGeneration.hashCodeEquals.useJava7Objects": {
        "type": "boolean",
        "description": "Use Objects.hash and Objects.equals when generating the hashCode and equals methods. This setting only applies to Java 7 and higher.",
        "default": false,
        "scope": "window"
      },
      "java.codeGeneration.hashCodeEquals.useInstanceof": {
        "type": "boolean",
        "description": "Use 'instanceof' to compare types when generating the hashCode and equals methods.",
        "default": false,
        "scope": "window"
      },
      "java.codeGeneration.useBlocks": {
        "type": "boolean",
        "description": "Use blocks in 'if' statements when generating the methods.",
        "default": false,
        "scope": "window"
      },
      "java.codeGeneration.generateComments": {
        "type": "boolean",
        "description": "Generate method comments when generating the methods.",
        "default": false,
        "scope": "window"
      },
      "java.codeGeneration.toString.template": {
        "type": "string",
        "description": "The template for generating the toString method.",
        "default": "${object.className} [${member.name()}=${member.value}, ${otherMembers}]"
      },
      "java.codeGeneration.toString.codeStyle": {
        "type": "string",
        "enum": [
          "STRING_CONCATENATION",
          "STRING_BUILDER",
          "STRING_BUILDER_CHAINED",
          "STRING_FORMAT"
        ],
        "enumDescriptions": [
          "String concatenation",
          "StringBuilder/StringBuffer",
          "StringBuilder/StringBuffer - chained call",
          "String.format/MessageFormat"
        ],
        "description": "The code style for generating the toString method.",
        "default": "STRING_CONCATENATION"
      },
      "java.codeGeneration.toString.skipNullValues": {
        "type": "boolean",
        "description": "Skip null values when generating the toString method.",
        "default": false,
        "scope": "window"
      },
      "java.codeGeneration.toString.listArrayContents": {
        "type": "boolean",
        "description": "List contents of arrays instead of using native toString().",
        "default": true,
        "scope": "window"
      },
      "java.codeGeneration.toString.limitElements": {
        "type": "integer",
        "description": "Limit number of items in arrays/collections/maps to list, if 0 then list all.",
        "default": 0,
        "scope": "window"
      },
      "java.codeGeneration.insertionLocation": {
        "type": "string",
        "enum": [
          "afterCursor",
          "beforeCursor",
          "lastMember"
        ],
        "enumDescriptions": [
          "Insert the generated code after the member where the cursor is located.",
          "Insert the generated code before the member where the cursor is located.",
          "Insert the generated code as the last member of the target type."
        ],
        "description": "Specifies the insertion location of the code generated by source actions.",
        "default": "afterCursor",
        "scope": "window"
      },
      "java.selectionRange.enabled": {
        "type": "boolean",
        "default": true,
        "description": "Enable/disable Smart Selection support for Java. Disabling this option will not affect the VS Code built-in word-based and bracket-based smart selection.",
        "scope": "window"
      },
      "java.showBuildStatusOnStart.enabled": {
        "anyOf": [
          {
            "enum": [
              "notification",
              "terminal",
              "off"
            ],
            "enumDescriptions": [
              "Show the build status via progress notification on start",
              "Show the build status via terminal on start",
              "Do not show any build status on start"
            ]
          },
          "boolean"
        ],
        "description": "Automatically show build status on startup.",
        "default": "notification",
        "scope": "window"
      },
      "java.configuration.runtimes": {
        "type": "array",
        "description": "Map Java Execution Environments to local JDKs.",
        "items": {
          "type": "object",
          "default": {},
          "required": [
            "path",
            "name"
          ],
          "properties": {
            "name": {
              "type": "string",
              "enum": [
                "J2SE-1.5",
                "JavaSE-1.6",
                "JavaSE-1.7",
                "JavaSE-1.8",
                "JavaSE-9",
                "JavaSE-10",
                "JavaSE-11",
                "JavaSE-12",
                "JavaSE-13",
                "JavaSE-14",
                "JavaSE-15",
                "JavaSE-16",
                "JavaSE-17"
              ],
              "description": "Java Execution Environment name. Must be unique."
            },
            "path": {
              "type": "string",
              "pattern": ".*(?<!\\/bin|\\/bin\\/|\\\\bin|\\\\bin\\\\)$",
              "description": "JDK home path. Should be the JDK installation directory, not the Java bin path.\n On Windows, backslashes must be escaped, i.e.\n\"path\":\"C:\\\\Program Files\\\\Java\\\\jdk1.8.0_161\"."
            },
            "sources": {
              "type": "string",
              "description": "JDK sources path."
            },
            "javadoc": {
              "type": "string",
              "description": "JDK javadoc path."
            },
            "default": {
              "type": "boolean",
              "description": "Is default runtime? Only one runtime can be default."
            }
          },
          "additionalProperties": false
        },
        "default": [],
        "scope": "machine"
      },
      "java.server.launchMode": {
        "type": "string",
        "enum": [
          "Standard",
          "LightWeight",
          "Hybrid"
        ],
        "enumDescriptions": [
          "Provides full features such as intellisense, refactoring, building, Maven/Gradle support etc.",
          "Starts a syntax server with lower start-up cost. Only provides syntax features such as outline, navigation, javadoc, syntax errors.",
          "Provides full features with better responsiveness. It starts a standard language server and a secondary syntax server. The syntax server provides syntax features until the standard server is ready."
        ],
        "description": "The launch mode for the Java extension",
        "default": "Hybrid",
        "scope": "window"
      },
      "java.sources.organizeImports.starThreshold": {
        "type": "integer",
        "description": "Specifies the number of imports added before a star-import declaration is used.",
        "default": 99,
        "scope": "window",
        "minimum": 1
      },
      "java.sources.organizeImports.staticStarThreshold": {
        "type": "integer",
        "description": "Specifies the number of static imports added before a star-import declaration is used.",
        "default": 99,
        "scope": "window",
        "minimum": 1
      },
      "java.imports.gradle.wrapper.checksums": {
        "type": "array",
        "items": {
          "type": "object",
          "default": {},
          "required": [
            "sha256"
          ],
          "properties": {
            "sha256": {
              "type": "string",
              "label": "SHA-256 checksum."
            },
            "allowed": {
              "type": "boolean",
              "default": true,
              "label": "Is allowed?"
            }
          },
          "additionalProperties": false,
          "uniqueItems": true
        },
        "description": "Defines allowed/disallowed SHA-256 checksums of Gradle Wrappers",
        "default": [],
        "scope": "application"
      },
      "java.project.importOnFirstTimeStartup": {
        "type": "string",
        "enum": [
          "disabled",
          "interactive",
          "automatic"
        ],
        "default": "automatic",
        "description": "Specifies whether to import the Java projects, when opening the folder in Hybrid mode for the first time.",
        "scope": "application"
      },
      "java.project.importHint": {
        "type": "boolean",
        "description": "Enable/disable the server-mode switch information, when Java projects import is skipped on startup.",
        "default": true,
        "scope": "application"
      },
      "java.project.resourceFilters": {
        "type": "array",
        "default": [
          "node_modules",
          ".git"
        ],
        "description": "Excludes files and folders from being refreshed by the Java Language Server, which can improve the overall performance. For example, [\"node_modules\",\".git\"] will exclude all files and folders named 'node_modules' or '.git'. Defaults to [\"node_modules\",\".git\"].",
        "scope": "window"
      },
      "java.templates.fileHeader": {
        "type": "array",
        "markdownDescription": "Specifies the file header comment for new Java file. Supports configuring multi-line comments with an array of strings, and using ${variable} to reference the [predefined variables](command:_java.templateVariables).",
        "scope": "window",
        "default": []
      },
      "java.templates.typeComment": {
        "type": "array",
        "markdownDescription": "Specifies the type comment for new Java type. Supports configuring multi-line comments with an array of strings, and using ${variable} to reference the [predefined variables](command:_java.templateVariables).",
        "scope": "window",
        "default": []
      },
      "java.references.includeAccessors": {
        "type": "boolean",
        "default": true,
        "description": "Include getter, setter and builder/constructor when finding references.",
        "scope": "window"
      },
      "java.references.includeDecompiledSources": {
        "type": "boolean",
        "default": true,
        "description": "Include the decompiled sources when finding references.",
        "scope": "window"
      },
      "java.typeHierarchy.lazyLoad": {
        "type": "boolean",
        "default": false,
        "description": "Enable/disable lazy loading the content in type hierarchy. Lazy loading could save a lot of loading time but every type should be expanded manually to load its content.",
        "scope": "window"
      },
      "java.settings.url": {
        "type": "string",
        "markdownDescription": "Specifies the url or file path to the workspace Java settings. See [Setting Global Preferences](https://github.com/redhat-developer/vscode-java/wiki/Settings-Global-Preferences)",
        "default": null,
        "scope": "window"
      },
      "java.symbols.includeSourceMethodDeclarations": {
        "type": "boolean",
        "markdownDescription": "Include method declarations from source files in symbol search.",
        "default": false,
        "scope": "window"
      },
      "java.quickfix.showAt": {
        "type": "string",
        "enum": [
          "line",
          "problem"
        ],
        "default": "line",
        "description": "Show quickfixes at the problem or line level.",
        "scope": "window"
      }
    }
  },
  {
    "properties": {
      "Lua.IntelliSense.traceBeSetted": {
        "default": false,
        "markdownDescription": "Please read [wiki](https://github.com/sumneko/lua-language-server/wiki/IntelliSense-optional-features) to learn more.",
        "scope": "window",
        "type": "boolean"
      },
      "Lua.IntelliSense.traceFieldInject": {
        "default": false,
        "markdownDescription": "Please read [wiki](https://github.com/sumneko/lua-language-server/wiki/IntelliSense-optional-features) to learn more.",
        "scope": "window",
        "type": "boolean"
      },
      "Lua.IntelliSense.traceLocalSet": {
        "default": false,
        "markdownDescription": "Please read [wiki](https://github.com/sumneko/lua-language-server/wiki/IntelliSense-optional-features) to learn more.",
        "scope": "window",
        "type": "boolean"
      },
      "Lua.IntelliSense.traceReturn": {
        "default": false,
        "markdownDescription": "Please read [wiki](https://github.com/sumneko/lua-language-server/wiki/IntelliSense-optional-features) to learn more.",
        "scope": "window",
        "type": "boolean"
      },
      "Lua.color.mode": {
        "default": "Semantic",
        "enum": [
          "Grammar",
          "Semantic",
          "SemanticEnhanced"
        ],
        "markdownDescription": "Color mode.",
        "markdownEnumDescriptions": [
          "Grammar color.",
          "Semantic color. You may need to set `editor.semanticHighlighting.enabled` to `true` to take effect.",
          "Enhanced semantic color. Like `Semantic`, but with additional analysis which might be more computationally expensive."
        ],
        "scope": "window",
        "type": "string"
      },
      "Lua.completion.autoRequire": {
        "default": true,
        "markdownDescription": "When the input looks like a file name, automatically `require` this file.",
        "scope": "window",
        "type": "boolean"
      },
      "Lua.completion.callSnippet": {
        "default": "Disable",
        "enum": [
          "Disable",
          "Both",
          "Replace"
        ],
        "markdownDescription": "Shows function call snippets.",
        "markdownEnumDescriptions": [
          "Only shows `function name`.",
          "Shows `function name` and `call snippet`.",
          "Only shows `call snippet.`"
        ],
        "scope": "window",
        "type": "string"
      },
      "Lua.completion.displayContext": {
        "default": 0,
        "markdownDescription": "Previewing the relevant code snippet of the suggestion may help you understand the usage of the suggestion. The number set indicates the number of intercepted lines in the code fragment. If it is set to `0`, this feature can be disabled.",
        "scope": "window",
        "type": "integer"
      },
      "Lua.completion.enable": {
        "default": true,
        "markdownDescription": "Enable completion.",
        "scope": "window",
        "type": "boolean"
      },
      "Lua.completion.keywordSnippet": {
        "default": "Replace",
        "enum": [
          "Disable",
          "Both",
          "Replace"
        ],
        "markdownDescription": "Shows keyword syntax snippets.",
        "markdownEnumDescriptions": [
          "Only shows `keyword`.",
          "Shows `keyword` and `syntax snippet`.",
          "Only shows `syntax snippet`."
        ],
        "scope": "window",
        "type": "string"
      },
      "Lua.completion.postfix": {
        "default": "@",
        "markdownDescription": "The symbol used to trigger the postfix suggestion.",
        "scope": "window",
        "type": "string"
      },
      "Lua.completion.requireSeparator": {
        "default": ".",
        "markdownDescription": "The separator used when `require`.",
        "scope": "window",
        "type": "string"
      },
      "Lua.completion.showParams": {
        "default": true,
        "markdownDescription": "Display parameters in completion list. When the function has multiple definitions, they will be displayed separately.",
        "scope": "window",
        "type": "boolean"
      },
      "Lua.completion.showWord": {
        "default": "Fallback",
        "enum": [
          "Enable",
          "Fallback",
          "Disable"
        ],
        "markdownDescription": "Show contextual words in suggestions.",
        "markdownEnumDescriptions": [
          "Always show context words in suggestions.",
          "Contextual words are only displayed when suggestions based on semantics cannot be provided.",
          "Do not display context words."
        ],
        "scope": "window",
        "type": "string"
      },
      "Lua.completion.workspaceWord": {
        "default": true,
        "markdownDescription": "Whether the displayed context word contains the content of other files in the workspace.",
        "scope": "window",
        "type": "boolean"
      },
      "Lua.diagnostics.disable": {
        "items": {
          "type": "string"
        },
        "markdownDescription": "Disabled diagnostic (Use code in hover brackets).\n",
        "scope": "window",
        "type": "array",
        "default": [
          "lowercase-global"
        ]
      },
      "Lua.diagnostics.enable": {
        "default": true,
        "markdownDescription": "Enable diagnostics.",
        "scope": "window",
        "type": "boolean"
      },
      "Lua.diagnostics.globals": {
        "items": {
          "type": "string"
        },
        "markdownDescription": "Defined global variables.\n",
        "scope": "window",
        "type": "array"
      },
      "Lua.diagnostics.ignoredFiles": {
        "default": "Opened",
        "enum": [
          "Enable",
          "Opened",
          "Disable"
        ],
        "markdownDescription": "How to diagnose ignored files.",
        "markdownEnumDescriptions": [
          "Always diagnose these files.",
          "Only when these files are opened will it be diagnosed.",
          "These files are not diagnosed."
        ],
        "scope": "window",
        "type": "string"
      },
      "Lua.diagnostics.libraryFiles": {
        "default": "Opened",
        "enum": [
          "Enable",
          "Opened",
          "Disable"
        ],
        "markdownDescription": "How to diagnose files loaded via `Lua.workspace.library`.",
        "markdownEnumDescriptions": [
          "Always diagnose these files.",
          "Only when these files are opened will it be diagnosed.",
          "These files are not diagnosed."
        ],
        "scope": "window",
        "type": "string"
      },
      "Lua.diagnostics.neededFileStatus": {
        "additionalProperties": false,
        "markdownDescription": "If you want to check only opened files, choice Opened; else choice Any.\n",
        "properties": {
          "ambiguity-1": {
            "default": "Any",
            "description": "config.diagnostics.ambiguity-1",
            "enum": [
              "Any",
              "Opened",
              "None"
            ],
            "type": "string"
          },
          "await-in-sync": {
            "default": "None",
            "description": "config.diagnostics.await-in-sync",
            "enum": [
              "Any",
              "Opened",
              "None"
            ],
            "type": "string"
          },
          "circle-doc-class": {
            "default": "Any",
            "description": "config.diagnostics.circle-doc-class",
            "enum": [
              "Any",
              "Opened",
              "None"
            ],
            "type": "string"
          },
          "close-non-object": {
            "default": "Any",
            "description": "config.diagnostics.close-non-object",
            "enum": [
              "Any",
              "Opened",
              "None"
            ],
            "type": "string"
          },
          "code-after-break": {
            "default": "Opened",
            "description": "config.diagnostics.code-after-break",
            "enum": [
              "Any",
              "Opened",
              "None"
            ],
            "type": "string"
          },
          "count-down-loop": {
            "default": "Any",
            "description": "config.diagnostics.count-down-loop",
            "enum": [
              "Any",
              "Opened",
              "None"
            ],
            "type": "string"
          },
          "deprecated": {
            "default": "Opened",
            "description": "config.diagnostics.deprecated",
            "enum": [
              "Any",
              "Opened",
              "None"
            ],
            "type": "string"
          },
          "different-requires": {
            "default": "Any",
            "description": "config.diagnostics.different-requires",
            "enum": [
              "Any",
              "Opened",
              "None"
            ],
            "type": "string"
          },
          "discard-returns": {
            "default": "Opened",
            "description": "config.diagnostics.discard-returns",
            "enum": [
              "Any",
              "Opened",
              "None"
            ],
            "type": "string"
          },
          "doc-field-no-class": {
            "default": "Any",
            "description": "config.diagnostics.doc-field-no-class",
            "enum": [
              "Any",
              "Opened",
              "None"
            ],
            "type": "string"
          },
          "duplicate-doc-class": {
            "default": "Any",
            "description": "config.diagnostics.duplicate-doc-class",
            "enum": [
              "Any",
              "Opened",
              "None"
            ],
            "type": "string"
          },
          "duplicate-doc-field": {
            "default": "Any",
            "description": "config.diagnostics.duplicate-doc-field",
            "enum": [
              "Any",
              "Opened",
              "None"
            ],
            "type": "string"
          },
          "duplicate-doc-param": {
            "default": "Any",
            "description": "config.diagnostics.duplicate-doc-param",
            "enum": [
              "Any",
              "Opened",
              "None"
            ],
            "type": "string"
          },
          "duplicate-index": {
            "default": "Any",
            "description": "config.diagnostics.duplicate-index",
            "enum": [
              "Any",
              "Opened",
              "None"
            ],
            "type": "string"
          },
          "duplicate-set-field": {
            "default": "Any",
            "description": "config.diagnostics.duplicate-set-field",
            "enum": [
              "Any",
              "Opened",
              "None"
            ],
            "type": "string"
          },
          "empty-block": {
            "default": "Opened",
            "description": "config.diagnostics.empty-block",
            "enum": [
              "Any",
              "Opened",
              "None"
            ],
            "type": "string"
          },
          "global-in-nil-env": {
            "default": "Any",
            "description": "config.diagnostics.global-in-nil-env",
            "enum": [
              "Any",
              "Opened",
              "None"
            ],
            "type": "string"
          },
          "lowercase-global": {
            "default": "Any",
            "description": "config.diagnostics.lowercase-global",
            "enum": [
              "Any",
              "Opened",
              "None"
            ],
            "type": "string"
          },
          "newfield-call": {
            "default": "Any",
            "description": "config.diagnostics.newfield-call",
            "enum": [
              "Any",
              "Opened",
              "None"
            ],
            "type": "string"
          },
          "newline-call": {
            "default": "Any",
            "description": "config.diagnostics.newline-call",
            "enum": [
              "Any",
              "Opened",
              "None"
            ],
            "type": "string"
          },
          "no-implicit-any": {
            "default": "None",
            "description": "config.diagnostics.no-implicit-any",
            "enum": [
              "Any",
              "Opened",
              "None"
            ],
            "type": "string"
          },
          "not-yieldable": {
            "default": "None",
            "description": "config.diagnostics.not-yieldable",
            "enum": [
              "Any",
              "Opened",
              "None"
            ],
            "type": "string"
          },
          "redefined-local": {
            "default": "Opened",
            "description": "config.diagnostics.redefined-local",
            "enum": [
              "Any",
              "Opened",
              "None"
            ],
            "type": "string"
          },
          "redundant-parameter": {
            "default": "Opened",
            "description": "config.diagnostics.redundant-parameter",
            "enum": [
              "Any",
              "Opened",
              "None"
            ],
            "type": "string"
          },
          "redundant-return": {
            "default": "Opened",
            "description": "config.diagnostics.redundant-return",
            "enum": [
              "Any",
              "Opened",
              "None"
            ],
            "type": "string"
          },
          "redundant-value": {
            "default": "Opened",
            "description": "config.diagnostics.redundant-value",
            "enum": [
              "Any",
              "Opened",
              "None"
            ],
            "type": "string"
          },
          "trailing-space": {
            "default": "Opened",
            "description": "config.diagnostics.trailing-space",
            "enum": [
              "Any",
              "Opened",
              "None"
            ],
            "type": "string"
          },
          "type-check": {
            "default": "None",
            "description": "config.diagnostics.type-check",
            "enum": [
              "Any",
              "Opened",
              "None"
            ],
            "type": "string"
          },
          "unbalanced-assignments": {
            "default": "Any",
            "description": "config.diagnostics.unbalanced-assignments",
            "enum": [
              "Any",
              "Opened",
              "None"
            ],
            "type": "string"
          },
          "undefined-doc-class": {
            "default": "Any",
            "description": "config.diagnostics.undefined-doc-class",
            "enum": [
              "Any",
              "Opened",
              "None"
            ],
            "type": "string"
          },
          "undefined-doc-name": {
            "default": "Any",
            "description": "config.diagnostics.undefined-doc-name",
            "enum": [
              "Any",
              "Opened",
              "None"
            ],
            "type": "string"
          },
          "undefined-doc-param": {
            "default": "Any",
            "description": "config.diagnostics.undefined-doc-param",
            "enum": [
              "Any",
              "Opened",
              "None"
            ],
            "type": "string"
          },
          "undefined-env-child": {
            "default": "Any",
            "description": "config.diagnostics.undefined-env-child",
            "enum": [
              "Any",
              "Opened",
              "None"
            ],
            "type": "string"
          },
          "undefined-field": {
            "default": "Opened",
            "description": "config.diagnostics.undefined-field",
            "enum": [
              "Any",
              "Opened",
              "None"
            ],
            "type": "string"
          },
          "undefined-global": {
            "default": "Any",
            "description": "config.diagnostics.undefined-global",
            "enum": [
              "Any",
              "Opened",
              "None"
            ],
            "type": "string"
          },
          "unknown-diag-code": {
            "default": "Any",
            "description": "config.diagnostics.unknown-diag-code",
            "enum": [
              "Any",
              "Opened",
              "None"
            ],
            "type": "string"
          },
          "unused-function": {
            "default": "Opened",
            "description": "config.diagnostics.unused-function",
            "enum": [
              "Any",
              "Opened",
              "None"
            ],
            "type": "string"
          },
          "unused-label": {
            "default": "Opened",
            "description": "config.diagnostics.unused-label",
            "enum": [
              "Any",
              "Opened",
              "None"
            ],
            "type": "string"
          },
          "unused-local": {
            "default": "Opened",
            "description": "config.diagnostics.unused-local",
            "enum": [
              "Any",
              "Opened",
              "None"
            ],
            "type": "string"
          },
          "unused-vararg": {
            "default": "Opened",
            "description": "config.diagnostics.unused-vararg",
            "enum": [
              "Any",
              "Opened",
              "None"
            ],
            "type": "string"
          }
        },
        "scope": "window",
        "title": "neededFileStatus",
        "type": "object"
      },
      "Lua.diagnostics.severity": {
        "additionalProperties": false,
        "markdownDescription": "Modified diagnostic severity.\n",
        "properties": {
          "ambiguity-1": {
            "default": "Warning",
            "description": "config.diagnostics.ambiguity-1",
            "enum": [
              "Error",
              "Warning",
              "Information",
              "Hint"
            ],
            "type": "string"
          },
          "await-in-sync": {
            "default": "Warning",
            "description": "config.diagnostics.await-in-sync",
            "enum": [
              "Error",
              "Warning",
              "Information",
              "Hint"
            ],
            "type": "string"
          },
          "circle-doc-class": {
            "default": "Warning",
            "description": "config.diagnostics.circle-doc-class",
            "enum": [
              "Error",
              "Warning",
              "Information",
              "Hint"
            ],
            "type": "string"
          },
          "close-non-object": {
            "default": "Warning",
            "description": "config.diagnostics.close-non-object",
            "enum": [
              "Error",
              "Warning",
              "Information",
              "Hint"
            ],
            "type": "string"
          },
          "code-after-break": {
            "default": "Hint",
            "description": "config.diagnostics.code-after-break",
            "enum": [
              "Error",
              "Warning",
              "Information",
              "Hint"
            ],
            "type": "string"
          },
          "count-down-loop": {
            "default": "Warning",
            "description": "config.diagnostics.count-down-loop",
            "enum": [
              "Error",
              "Warning",
              "Information",
              "Hint"
            ],
            "type": "string"
          },
          "deprecated": {
            "default": "Warning",
            "description": "config.diagnostics.deprecated",
            "enum": [
              "Error",
              "Warning",
              "Information",
              "Hint"
            ],
            "type": "string"
          },
          "different-requires": {
            "default": "Warning",
            "description": "config.diagnostics.different-requires",
            "enum": [
              "Error",
              "Warning",
              "Information",
              "Hint"
            ],
            "type": "string"
          },
          "discard-returns": {
            "default": "Warning",
            "description": "config.diagnostics.discard-returns",
            "enum": [
              "Error",
              "Warning",
              "Information",
              "Hint"
            ],
            "type": "string"
          },
          "doc-field-no-class": {
            "default": "Warning",
            "description": "config.diagnostics.doc-field-no-class",
            "enum": [
              "Error",
              "Warning",
              "Information",
              "Hint"
            ],
            "type": "string"
          },
          "duplicate-doc-class": {
            "default": "Warning",
            "description": "config.diagnostics.duplicate-doc-class",
            "enum": [
              "Error",
              "Warning",
              "Information",
              "Hint"
            ],
            "type": "string"
          },
          "duplicate-doc-field": {
            "default": "Warning",
            "description": "config.diagnostics.duplicate-doc-field",
            "enum": [
              "Error",
              "Warning",
              "Information",
              "Hint"
            ],
            "type": "string"
          },
          "duplicate-doc-param": {
            "default": "Warning",
            "description": "config.diagnostics.duplicate-doc-param",
            "enum": [
              "Error",
              "Warning",
              "Information",
              "Hint"
            ],
            "type": "string"
          },
          "duplicate-index": {
            "default": "Warning",
            "description": "config.diagnostics.duplicate-index",
            "enum": [
              "Error",
              "Warning",
              "Information",
              "Hint"
            ],
            "type": "string"
          },
          "duplicate-set-field": {
            "default": "Warning",
            "description": "config.diagnostics.duplicate-set-field",
            "enum": [
              "Error",
              "Warning",
              "Information",
              "Hint"
            ],
            "type": "string"
          },
          "empty-block": {
            "default": "Hint",
            "description": "config.diagnostics.empty-block",
            "enum": [
              "Error",
              "Warning",
              "Information",
              "Hint"
            ],
            "type": "string"
          },
          "global-in-nil-env": {
            "default": "Warning",
            "description": "config.diagnostics.global-in-nil-env",
            "enum": [
              "Error",
              "Warning",
              "Information",
              "Hint"
            ],
            "type": "string"
          },
          "lowercase-global": {
            "default": "Information",
            "description": "config.diagnostics.lowercase-global",
            "enum": [
              "Error",
              "Warning",
              "Information",
              "Hint"
            ],
            "type": "string"
          },
          "newfield-call": {
            "default": "Warning",
            "description": "config.diagnostics.newfield-call",
            "enum": [
              "Error",
              "Warning",
              "Information",
              "Hint"
            ],
            "type": "string"
          },
          "newline-call": {
            "default": "Information",
            "description": "config.diagnostics.newline-call",
            "enum": [
              "Error",
              "Warning",
              "Information",
              "Hint"
            ],
            "type": "string"
          },
          "no-implicit-any": {
            "default": "Information",
            "description": "config.diagnostics.no-implicit-any",
            "enum": [
              "Error",
              "Warning",
              "Information",
              "Hint"
            ],
            "type": "string"
          },
          "not-yieldable": {
            "default": "Warning",
            "description": "config.diagnostics.not-yieldable",
            "enum": [
              "Error",
              "Warning",
              "Information",
              "Hint"
            ],
            "type": "string"
          },
          "redefined-local": {
            "default": "Hint",
            "description": "config.diagnostics.redefined-local",
            "enum": [
              "Error",
              "Warning",
              "Information",
              "Hint"
            ],
            "type": "string"
          },
          "redundant-parameter": {
            "default": "Warning",
            "description": "config.diagnostics.redundant-parameter",
            "enum": [
              "Error",
              "Warning",
              "Information",
              "Hint"
            ],
            "type": "string"
          },
          "redundant-return": {
            "default": "Warning",
            "description": "config.diagnostics.redundant-return",
            "enum": [
              "Error",
              "Warning",
              "Information",
              "Hint"
            ],
            "type": "string"
          },
          "redundant-value": {
            "default": "Warning",
            "description": "config.diagnostics.redundant-value",
            "enum": [
              "Error",
              "Warning",
              "Information",
              "Hint"
            ],
            "type": "string"
          },
          "trailing-space": {
            "default": "Hint",
            "description": "config.diagnostics.trailing-space",
            "enum": [
              "Error",
              "Warning",
              "Information",
              "Hint"
            ],
            "type": "string"
          },
          "type-check": {
            "default": "Warning",
            "description": "config.diagnostics.type-check",
            "enum": [
              "Error",
              "Warning",
              "Information",
              "Hint"
            ],
            "type": "string"
          },
          "unbalanced-assignments": {
            "default": "Warning",
            "description": "config.diagnostics.unbalanced-assignments",
            "enum": [
              "Error",
              "Warning",
              "Information",
              "Hint"
            ],
            "type": "string"
          },
          "undefined-doc-class": {
            "default": "Warning",
            "description": "config.diagnostics.undefined-doc-class",
            "enum": [
              "Error",
              "Warning",
              "Information",
              "Hint"
            ],
            "type": "string"
          },
          "undefined-doc-name": {
            "default": "Warning",
            "description": "config.diagnostics.undefined-doc-name",
            "enum": [
              "Error",
              "Warning",
              "Information",
              "Hint"
            ],
            "type": "string"
          },
          "undefined-doc-param": {
            "default": "Warning",
            "description": "config.diagnostics.undefined-doc-param",
            "enum": [
              "Error",
              "Warning",
              "Information",
              "Hint"
            ],
            "type": "string"
          },
          "undefined-env-child": {
            "default": "Information",
            "description": "config.diagnostics.undefined-env-child",
            "enum": [
              "Error",
              "Warning",
              "Information",
              "Hint"
            ],
            "type": "string"
          },
          "undefined-field": {
            "default": "Warning",
            "description": "config.diagnostics.undefined-field",
            "enum": [
              "Error",
              "Warning",
              "Information",
              "Hint"
            ],
            "type": "string"
          },
          "undefined-global": {
            "default": "Warning",
            "description": "config.diagnostics.undefined-global",
            "enum": [
              "Error",
              "Warning",
              "Information",
              "Hint"
            ],
            "type": "string"
          },
          "unknown-diag-code": {
            "default": "Waiting",
            "description": "config.diagnostics.unknown-diag-code",
            "enum": [
              "Error",
              "Warning",
              "Information",
              "Hint"
            ],
            "type": "string"
          },
          "unused-function": {
            "default": "Hint",
            "description": "config.diagnostics.unused-function",
            "enum": [
              "Error",
              "Warning",
              "Information",
              "Hint"
            ],
            "type": "string"
          },
          "unused-label": {
            "default": "Hint",
            "description": "config.diagnostics.unused-label",
            "enum": [
              "Error",
              "Warning",
              "Information",
              "Hint"
            ],
            "type": "string"
          },
          "unused-local": {
            "default": "Hint",
            "description": "config.diagnostics.unused-local",
            "enum": [
              "Error",
              "Warning",
              "Information",
              "Hint"
            ],
            "type": "string"
          },
          "unused-vararg": {
            "default": "Hint",
            "description": "config.diagnostics.unused-vararg",
            "enum": [
              "Error",
              "Warning",
              "Information",
              "Hint"
            ],
            "type": "string"
          }
        },
        "scope": "window",
        "title": "severity",
        "type": "object"
      },
      "Lua.diagnostics.workspaceDelay": {
        "default": 0,
        "markdownDescription": "Latency (milliseconds) for workspace diagnostics. When you start the workspace, or edit any file, the entire workspace will be re-diagnosed in the background. Set to negative to disable workspace diagnostics.",
        "scope": "window",
        "type": "integer"
      },
      "Lua.diagnostics.workspaceRate": {
        "default": 100,
        "markdownDescription": "Workspace diagnostics run rate (%). Decreasing this value reduces CPU usage, but also reduces the speed of workspace diagnostics. The diagnosis of the file you are currently editing is always done at full speed and is not affected by this setting.",
        "scope": "window",
        "type": "integer"
      },
      "Lua.hint.enable": {
        "default": false,
        "markdownDescription": "Enabel hint.",
        "scope": "window",
        "type": "boolean"
      },
      "Lua.hint.paramName": {
        "default": "All",
        "enum": [
          "All",
          "Literal",
          "Disable"
        ],
        "markdownDescription": "Show hints of parameter name at the function call.",
        "markdownEnumDescriptions": [
          "All types of parameters are shown.",
          "Only literal type parameters are shown.",
          "Disable parameter hints."
        ],
        "scope": "window",
        "type": "string"
      },
      "Lua.hint.paramType": {
        "default": true,
        "markdownDescription": "Show type hints at the parameter of the function.",
        "scope": "window",
        "type": "boolean"
      },
      "Lua.hint.setType": {
        "default": false,
        "markdownDescription": "Show hints of type at assignment operation.",
        "scope": "window",
        "type": "boolean"
      },
      "Lua.hover.enable": {
        "default": true,
        "markdownDescription": "Enable hover.",
        "scope": "window",
        "type": "boolean"
      },
      "Lua.hover.enumsLimit": {
        "default": 5,
        "markdownDescription": "When the value corresponds to multiple types, limit the number of types displaying.",
        "scope": "window",
        "type": "integer"
      },
      "Lua.hover.previewFields": {
        "default": 20,
        "markdownDescription": "When hovering to view a table, limits the maximum number of previews for fields.",
        "scope": "window",
        "type": "integer"
      },
      "Lua.hover.viewNumber": {
        "default": true,
        "markdownDescription": "Hover to view numeric content (only if literal is not decimal).",
        "scope": "window",
        "type": "boolean"
      },
      "Lua.hover.viewString": {
        "default": true,
        "markdownDescription": "Hover to view the contents of a string (only if the literal contains an escape character).",
        "scope": "window",
        "type": "boolean"
      },
      "Lua.hover.viewStringMax": {
        "default": 1000,
        "markdownDescription": "The maximum length of a hover to view the contents of a string.",
        "scope": "window",
        "type": "integer"
      },
      "Lua.misc.parameters": {
        "items": {
          "type": "string"
        },
        "markdownDescription": "[Command line parameters](https://github.com/sumneko/lua-telemetry-server/tree/master/method) when starting the language service in VSCode.",
        "scope": "window",
        "type": "array"
      },
      "Lua.runtime.builtin": {
        "additionalProperties": false,
        "markdownDescription": "Adjust the enabled state of the built-in library. You can disable (or redefine) the non-existent library according to the actual runtime environment.\n\n* `default`: Indicates that the library will be enabled or disabled according to the runtime version\n* `enable`: always enable\n* `disable`: always disable\n",
        "properties": {
          "basic": {
            "default": "default",
            "description": "config.runtime.builtin.basic",
            "enum": [
              "default",
              "enable",
              "disable"
            ],
            "type": "string"
          },
          "bit": {
            "default": "default",
            "description": "config.runtime.builtin.bit",
            "enum": [
              "default",
              "enable",
              "disable"
            ],
            "type": "string"
          },
          "bit32": {
            "default": "default",
            "description": "config.runtime.builtin.bit32",
            "enum": [
              "default",
              "enable",
              "disable"
            ],
            "type": "string"
          },
          "builtin": {
            "default": "default",
            "description": "config.runtime.builtin.builtin",
            "enum": [
              "default",
              "enable",
              "disable"
            ],
            "type": "string"
          },
          "coroutine": {
            "default": "default",
            "description": "config.runtime.builtin.coroutine",
            "enum": [
              "default",
              "enable",
              "disable"
            ],
            "type": "string"
          },
          "debug": {
            "default": "default",
            "description": "config.runtime.builtin.debug",
            "enum": [
              "default",
              "enable",
              "disable"
            ],
            "type": "string"
          },
          "ffi": {
            "default": "default",
            "description": "config.runtime.builtin.ffi",
            "enum": [
              "default",
              "enable",
              "disable"
            ],
            "type": "string"
          },
          "io": {
            "default": "default",
            "description": "config.runtime.builtin.io",
            "enum": [
              "default",
              "enable",
              "disable"
            ],
            "type": "string"
          },
          "jit": {
            "default": "default",
            "description": "config.runtime.builtin.jit",
            "enum": [
              "default",
              "enable",
              "disable"
            ],
            "type": "string"
          },
          "math": {
            "default": "default",
            "description": "config.runtime.builtin.math",
            "enum": [
              "default",
              "enable",
              "disable"
            ],
            "type": "string"
          },
          "os": {
            "default": "default",
            "description": "config.runtime.builtin.os",
            "enum": [
              "default",
              "enable",
              "disable"
            ],
            "type": "string"
          },
          "package": {
            "default": "default",
            "description": "config.runtime.builtin.package",
            "enum": [
              "default",
              "enable",
              "disable"
            ],
            "type": "string"
          },
          "string": {
            "default": "default",
            "description": "config.runtime.builtin.string",
            "enum": [
              "default",
              "enable",
              "disable"
            ],
            "type": "string"
          },
          "table": {
            "default": "default",
            "description": "config.runtime.builtin.table",
            "enum": [
              "default",
              "enable",
              "disable"
            ],
            "type": "string"
          },
          "utf8": {
            "default": "default",
            "description": "config.runtime.builtin.utf8",
            "enum": [
              "default",
              "enable",
              "disable"
            ],
            "type": "string"
          }
        },
        "scope": "window",
        "type": "object"
      },
      "Lua.runtime.fileEncoding": {
        "default": "utf8",
        "enum": [
          "utf8",
          "ansi",
          "utf16le",
          "utf16be"
        ],
        "markdownDescription": "File encoding. The `ansi` option is only available under the `Windows` platform.",
        "scope": "window",
        "type": "string"
      },
      "Lua.runtime.nonstandardSymbol": {
        "items": {
          "enum": [
            "//",
            "/**/",
            "`",
            "+=",
            "-=",
            "*=",
            "/=",
            "||",
            "&&",
            "!",
            "!=",
            "continue"
          ],
          "type": "string"
        },
        "markdownDescription": "Supports non-standard symbols. Make sure that your runtime environment supports these symbols.",
        "scope": "window",
        "type": "array"
      },
      "Lua.runtime.path": {
        "default": [
          "?.lua",
          "?/init.lua"
        ],
        "items": {
          "type": "string"
        },
        "markdownDescription": "When using `require`, how to find the file based on the input name.\nSetting this config to `?/init.lua` means that when you enter `require 'myfile'`, `${workspace}/myfile/init.lua` will be searched from the loaded files.\nif `runtime.pathStrict` is `false`, `${workspace}/**/myfile/init.lua` will also be searched.\nIf you want to load files outside the workspace, you need to set `Lua.workspace.library` first.\n",
        "scope": "window",
        "type": "array"
      },
      "Lua.runtime.pathStrict": {
        "default": false,
        "markdownDescription": "When enabled, `runtime.path` will only search the first level of directories, see the description of `runtime.path`.",
        "scope": "window",
        "type": "boolean"
      },
      "Lua.runtime.plugin": {
        "default": "",
        "markdownDescription": "Plugin path. Please read [wiki](https://github.com/sumneko/lua-language-server/wiki/Plugin) to learn more.",
        "scope": "window",
        "type": "string"
      },
      "Lua.runtime.special": {
        "additionalProperties": false,
        "markdownDescription": "The custom global variables are regarded as some special built-in variables, and the language server will provide special support\nThe following example shows that 'include' is treated as' require '.\n```json\n\"Lua.runtime.special\" : {\n    \"include\" : \"require\"\n}\n```\n",
        "patternProperties": {
          ".*": {
            "default": "require",
            "enum": [
              "_G",
              "rawset",
              "rawget",
              "setmetatable",
              "require",
              "dofile",
              "loadfile",
              "pcall",
              "xpcall"
            ],
            "type": "string"
          }
        },
        "scope": "window",
        "type": "object"
      },
      "Lua.runtime.unicodeName": {
        "default": false,
        "markdownDescription": "Allows Unicode characters in name.",
        "scope": "window",
        "type": "boolean"
      },
      "Lua.runtime.version": {
        "default": "Lua 5.4",
        "enum": [
          "Lua 5.1",
          "Lua 5.2",
          "Lua 5.3",
          "Lua 5.4",
          "LuaJIT"
        ],
        "markdownDescription": "Lua runtime version.",
        "scope": "window",
        "type": "string"
      },
      "Lua.signatureHelp.enable": {
        "default": true,
        "markdownDescription": "Enable signature help.",
        "scope": "window",
        "type": "boolean"
      },
      "Lua.telemetry.enable": {
        "default": null,
        "markdownDescription": "Enable telemetry to send your editor information and error logs over the network. Read our privacy policy [here](https://github.com/sumneko/lua-language-server/wiki/Privacy-Policy).\n",
        "scope": "window",
        "type": [
          "boolean",
          "null"
        ]
      },
      "Lua.window.progressBar": {
        "default": true,
        "markdownDescription": "Show progress bar in status bar.",
        "scope": "window",
        "type": "boolean"
      },
      "Lua.window.statusBar": {
        "default": true,
        "markdownDescription": "Show extension status in status bar.",
        "scope": "window",
        "type": "boolean"
      },
      "Lua.workspace.checkThirdParty": {
        "default": true,
        "markdownDescription": "Automatic detection and adaptation of third-party libraries, currently supported libraries are:\n\n* OpenResty\n* Cocos4.0\n* LÖVE\n* skynet\n* Jass\n",
        "scope": "window",
        "type": "boolean"
      },
      "Lua.workspace.ignoreDir": {
        "default": [
          ".vscode"
        ],
        "items": {
          "type": "string"
        },
        "markdownDescription": "Ignored files and directories (Use `.gitignore` grammar).\n",
        "scope": "window",
        "type": "array"
      },
      "Lua.workspace.ignoreSubmodules": {
        "default": true,
        "markdownDescription": "Ignore submodules.",
        "scope": "window",
        "type": "boolean"
      },
      "Lua.workspace.library": {
        "items": {
          "type": "string"
        },
        "markdownDescription": "In addition to the current workspace, which directories will load files from. The files in these directories will be treated as externally provided code libraries, and some features (such as renaming fields) will not modify these files.",
        "scope": "window",
        "type": "array"
      },
      "Lua.workspace.maxPreload": {
        "default": 1000,
        "markdownDescription": "Max preloaded files.",
        "scope": "window",
        "type": "integer"
      },
      "Lua.workspace.preloadFileSize": {
        "default": 100,
        "markdownDescription": "Skip files larger than this value (KB) when preloading.",
        "scope": "window",
        "type": "integer"
      },
      "Lua.workspace.useGitIgnore": {
        "default": true,
        "markdownDescription": "Ignore files list in `.gitignore` .",
        "scope": "window",
        "type": "boolean"
      },
      "Lua.workspace.userThirdParty": {
        "items": {
          "type": "string"
        },
        "markdownDescription": "Add private third-party library configuration file paths here, please refer to the built-in [configuration file path](https://github.com/sumneko/lua-language-server/tree/master/meta/3rd)",
        "scope": "window",
        "type": "array"
      }
    },
    "title": "Lua",
    "type": "object"
  },
  {
    "type": "object",
    "title": "C/C++",
    "properties": {
      "C_Cpp.maxConcurrentThreads": {
        "type": [
          "integer",
          "null"
        ],
        "markdownDescription": "[object Object]",
        "default": null,
        "minimum": 1,
        "maximum": 32,
        "scope": "machine"
      },
      "C_Cpp.maxCachedProcesses": {
        "type": [
          "integer",
          "null"
        ],
        "markdownDescription": "[object Object]",
        "default": null,
        "minimum": 0,
        "maximum": 256,
        "scope": "machine"
      },
      "C_Cpp.maxMemory": {
        "type": [
          "integer",
          "null"
        ],
        "markdownDescription": "[object Object]",
        "default": null,
        "minimum": 256,
        "maximum": 65536,
        "scope": "machine"
      },
      "C_Cpp.intelliSense.maxCachedProcesses": {
        "type": [
          "integer",
          "null"
        ],
        "markdownDescription": "[object Object]",
        "default": null,
        "minimum": 2,
        "maximum": 128,
        "scope": "machine"
      },
      "C_Cpp.intelliSense.maxMemory": {
        "type": [
          "integer",
          "null"
        ],
        "markdownDescription": "[object Object]",
        "default": null,
        "minimum": 256,
        "maximum": 65536,
        "scope": "machine"
      },
      "C_Cpp.references.maxConcurrentThreads": {
        "type": [
          "integer",
          "null"
        ],
        "markdownDescription": "[object Object]",
        "default": null,
        "minimum": 1,
        "maximum": 32,
        "scope": "machine"
      },
      "C_Cpp.references.maxCachedProcesses": {
        "type": [
          "integer",
          "null"
        ],
        "markdownDescription": "[object Object]",
        "default": 0,
        "minimum": 0,
        "maximum": 32,
        "scope": "machine"
      },
      "C_Cpp.references.maxMemory": {
        "type": [
          "integer",
          "null"
        ],
        "markdownDescription": "[object Object]",
        "default": null,
        "minimum": 256,
        "maximum": 65536,
        "scope": "machine"
      },
      "C_Cpp.codeAnalysis.maxConcurrentThreads": {
        "type": [
          "integer",
          "null"
        ],
        "markdownDescription": "[object Object]",
        "default": null,
        "minimum": 1,
        "maximum": 32,
        "scope": "machine"
      },
      "C_Cpp.codeAnalysis.maxMemory": {
        "type": [
          "integer",
          "null"
        ],
        "markdownDescription": "[object Object]",
        "default": null,
        "minimum": 256,
        "maximum": 65536,
        "scope": "machine"
      },
      "C_Cpp.codeAnalysis.updateDelay": {
        "type": "number",
        "default": 2000,
        "markdownDescription": "[object Object]",
        "scope": "application",
        "minimum": 0,
        "maximum": 6000
      },
      "C_Cpp.codeAnalysis.exclude": {
        "type": "object",
        "markdownDescription": "[object Object]",
        "default": {},
        "additionalProperties": {
          "anyOf": [
            {
              "type": "boolean",
              "markdownDescription": "[object Object]"
            },
            {
              "type": "object",
              "properties": {
                "when": {
                  "type": "string",
                  "pattern": "\\w*\\$\\(basename\\)\\w*",
                  "default": "$(basename).ext",
                  "markdownDescription": "[object Object]"
                }
              }
            }
          ]
        },
        "scope": "resource"
      },
      "C_Cpp.codeAnalysis.runAutomatically": {
        "type": "boolean",
        "markdownDescription": "[object Object]",
        "default": true,
        "scope": "resource"
      },
      "C_Cpp.codeAnalysis.clangTidy.enabled": {
        "type": "boolean",
        "default": false,
        "markdownDescription": "[object Object]",
        "scope": "resource"
      },
      "C_Cpp.codeAnalysis.clangTidy.path": {
        "type": "string",
        "markdownDescription": "[object Object]",
        "scope": "machine-overridable"
      },
      "C_Cpp.codeAnalysis.clangTidy.config": {
        "type": "string",
        "markdownDescription": "[object Object]",
        "scope": "resource"
      },
      "C_Cpp.codeAnalysis.clangTidy.fallbackConfig": {
        "type": "string",
        "markdownDescription": "[object Object]",
        "scope": "resource"
      },
      "C_Cpp.codeAnalysis.clangTidy.headerFilter": {
        "type": [
          "string",
          "null"
        ],
        "default": null,
        "markdownDescription": "[object Object]",
        "scope": "resource"
      },
      "C_Cpp.codeAnalysis.clangTidy.args": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "markdownDescription": "[object Object]",
        "scope": "resource"
      },
      "C_Cpp.codeAnalysis.clangTidy.checks.enabled": {
        "type": "array",
        "items": {
          "type": "string",
          "enum": [
            "*",
            "abseil-*",
            "abseil-duration-*",
            "abseil-duration-addition",
            "abseil-duration-comparison",
            "abseil-duration-conversion-cast",
            "abseil-duration-division",
            "abseil-duration-factory-*",
            "abseil-duration-factory-float",
            "abseil-duration-factory-scale",
            "abseil-duration-subtraction",
            "abseil-duration-unnecessary-conversion",
            "abseil-faster-strsplit-delimiter",
            "abseil-no-*",
            "abseil-no-internal-dependencies",
            "abseil-no-namespace",
            "abseil-redundant-strcat-calls",
            "abseil-str-cat-append",
            "abseil-string-find-*",
            "abseil-string-find-startswith",
            "abseil-string-find-str-contains",
            "abseil-time-*",
            "abseil-time-comparison",
            "abseil-time-subtraction",
            "abseil-upgrade-duration-conversions",
            "altera-*",
            "altera-id-dependent-backward-branch",
            "altera-kernel-name-restriction",
            "altera-single-work-item-barrier",
            "altera-struct-pack-align",
            "altera-unroll-loops",
            "android-*",
            "android-cloexec-*",
            "android-cloexec-accept",
            "android-cloexec-accept4",
            "android-cloexec-creat",
            "android-cloexec-dup",
            "android-cloexec-epoll-*",
            "android-cloexec-epoll-create",
            "android-cloexec-epoll-create1",
            "android-cloexec-fopen",
            "android-cloexec-inotify-*",
            "android-cloexec-inotify-init",
            "android-cloexec-inotify-init1",
            "android-cloexec-memfd-create",
            "android-cloexec-open",
            "android-cloexec-pipe",
            "android-cloexec-pipe2",
            "android-cloexec-socket",
            "android-comparison-in-temp-failure-retry",
            "boost-use-to-string",
            "bugprone-*",
            "bugprone-argument-comment",
            "bugprone-assert-side-effect",
            "bugprone-bad-signal-to-kill-thread",
            "bugprone-bool-pointer-implicit-conversion",
            "bugprone-branch-clone",
            "bugprone-copy-constructor-init",
            "bugprone-dangling-handle",
            "bugprone-dynamic-static-initializers",
            "bugprone-easily-swappable-parameters",
            "bugprone-exception-escape",
            "bugprone-fold-init-type",
            "bugprone-forward-declaration-namespace",
            "bugprone-forwarding-reference-overload",
            "bugprone-implicit-widening-of-multiplication-result",
            "bugprone-inaccurate-erase",
            "bugprone-incorrect-roundings",
            "bugprone-infinite-loop",
            "bugprone-integer-division",
            "bugprone-lambda-function-name",
            "bugprone-macro-parentheses",
            "bugprone-macro-repeated-side-effects",
            "bugprone-misplaced-*",
            "bugprone-misplaced-operator-in-strlen-in-alloc",
            "bugprone-misplaced-pointer-arithmetic-in-alloc",
            "bugprone-misplaced-widening-cast",
            "bugprone-move-forwarding-reference",
            "bugprone-multiple-statement-macro",
            "bugprone-narrowing-conversions",
            "bugprone-no-escape",
            "bugprone-not-null-terminated-result",
            "bugprone-parent-virtual-call",
            "bugprone-posix-return",
            "bugprone-redundant-branch-condition",
            "bugprone-reserved-identifier",
            "bugprone-signal-handler",
            "bugprone-signed-char-misuse",
            "bugprone-sizeof-*",
            "bugprone-sizeof-container",
            "bugprone-sizeof-expression",
            "bugprone-spuriously-wake-up-functions",
            "bugprone-string-*",
            "bugprone-string-constructor",
            "bugprone-string-integer-assignment",
            "bugprone-string-literal-with-embedded-nul",
            "bugprone-suspicious-*",
            "bugprone-suspicious-enum-usage",
            "bugprone-suspicious-include",
            "bugprone-suspicious-memset-usage",
            "bugprone-suspicious-missing-comma",
            "bugprone-suspicious-semicolon",
            "bugprone-suspicious-string-compare",
            "bugprone-swapped-arguments",
            "bugprone-terminating-continue",
            "bugprone-throw-keyword-missing",
            "bugprone-too-small-loop-variable",
            "bugprone-undefined-memory-manipulation",
            "bugprone-undelegated-constructor",
            "bugprone-unhandled-*",
            "bugprone-unhandled-exception-at-new",
            "bugprone-unhandled-self-assignment",
            "bugprone-unused-raii",
            "bugprone-unused-return-value",
            "bugprone-use-after-move",
            "bugprone-virtual-near-miss",
            "cert-*",
            "cert-con*",
            "cert-con36-c",
            "cert-con54-cpp",
            "cert-dcl*",
            "cert-dcl03-c",
            "cert-dcl16-c",
            "cert-dcl21-cpp",
            "cert-dcl37-c",
            "cert-dcl50-cpp",
            "cert-dcl51-cpp",
            "cert-dcl54-cpp",
            "cert-dcl58-cpp",
            "cert-dcl59-cpp",
            "cert-env33-c",
            "cert-err*",
            "cert-err09-cpp",
            "cert-err34-c",
            "cert-err52-cpp",
            "cert-err58-cpp",
            "cert-err60-cpp",
            "cert-err61-cpp",
            "cert-fio38-c",
            "cert-flp30-c",
            "cert-mem57-cpp",
            "cert-msc*",
            "cert-msc30-c",
            "cert-msc32-c",
            "cert-msc50-cpp",
            "cert-msc51-cpp",
            "cert-oop*",
            "cert-oop11-cpp",
            "cert-oop54-cpp",
            "cert-oop57-cpp",
            "cert-oop58-cpp",
            "cert-pos44-c",
            "cert-sig30-c",
            "cert-str34-c",
            "clang-analyzer-*",
            "clang-analyzer-core.*",
            "clang-analyzer-core.CallAndMessage",
            "clang-analyzer-core.DivideZero",
            "clang-analyzer-core.DynamicTypePropagation",
            "clang-analyzer-core.NonNullParamChecker",
            "clang-analyzer-core.NullDereference",
            "clang-analyzer-core.StackAddressEscape",
            "clang-analyzer-core.UndefinedBinaryOperatorResult",
            "clang-analyzer-core.uninitialized.*",
            "clang-analyzer-core.uninitialized.ArraySubscript",
            "clang-analyzer-core.uninitialized.Assign",
            "clang-analyzer-core.uninitialized.Branch",
            "clang-analyzer-core.uninitialized.CapturedBlockVariable",
            "clang-analyzer-core.uninitialized.UndefReturn",
            "clang-analyzer-core.VLASize",
            "clang-analyzer-cplusplus.*",
            "clang-analyzer-cplusplus.InnerPointer",
            "clang-analyzer-cplusplus.Move",
            "clang-analyzer-cplusplus.NewDelete",
            "clang-analyzer-cplusplus.NewDeleteLeaks",
            "clang-analyzer-deadcode.DeadStores",
            "clang-analyzer-nullablity.*",
            "clang-analyzer-nullability.NullabilityBase",
            "clang-analyzer-nullability.NullableDereferenced",
            "clang-analyzer-nullability.NullablePassedToNonnull",
            "clang-analyzer-nullability.NullableReturnedFromNonnull",
            "clang-analyzer-nullability.NullPassedToNonnull",
            "clang-analyzer-nullability.NullReturnedFromNonnull",
            "clang-analyzer-optin.*",
            "clang-analyzer-optin.cplusplus.*",
            "clang-analyzer-optin.cplusplus.UninitializedObject",
            "clang-analyzer-optin.cplusplus.VirtualCall",
            "clang-analyzer-optin.mpi.MPI-Checker",
            "clang-analyzer-optin.osx.*",
            "clang-analyzer-optin.osx.cocoa.localizability.*",
            "clang-analyzer-optin.osx.cocoa.localizability.EmptyLocalizationContextChecker",
            "clang-analyzer-optin.osx.cocoa.localizability.NonLocalizedStringChecker",
            "clang-analyzer-optin.osx.OSObjectCStyleCast",
            "clang-analyzer-optin.performance.*",
            "clang-analyzer-optin.performance.GCDAntipattern",
            "clang-analyzer-optin.performance.Padding",
            "clang-analyzer-optin.portability.UnixAPI",
            "clang-analyzer-osx.*",
            "clang-analyzer-osx.API",
            "clang-analyzer-osx.cocoa.*",
            "clang-analyzer-osx.cocoa.AtSync",
            "clang-analyzer-osx.cocoa.AutoreleaseWrite",
            "clang-analyzer-osx.cocoa.ClassRelease",
            "clang-analyzer-osx.cocoa.Dealloc",
            "clang-analyzer-osx.cocoa.IncompatibleMethodTypes",
            "clang-analyzer-osx.cocoa.Loops",
            "clang-analyzer-osx.cocoa.MissingSuperCall",
            "clang-analyzer-osx.cocoa.NilArg",
            "clang-analyzer-osx.cocoa.NonNilReturnValue",
            "clang-analyzer-osx.cocoa.NSAutoreleasePool",
            "clang-analyzer-osx.cocoa.NSError",
            "clang-analyzer-osx.cocoa.ObjCGenerics",
            "clang-analyzer-osx.cocoa.RetainCount",
            "clang-analyzer-osx.cocoa.RetainCountBase",
            "clang-analyzer-osx.cocoa.RunLoopAutoreleaseLeak",
            "clang-analyzer-osx.cocoa.SelfInit",
            "clang-analyzer-osx.cocoa.SuperDealloc",
            "clang-analyzer-osx.cocoa.UnusedIvars",
            "clang-analyzer-osx.cocoa.VariadicMethodTypes",
            "clang-analyzer-osx.coreFoundation.*",
            "clang-analyzer-osx.coreFoundation.CFError",
            "clang-analyzer-osx.coreFoundation.CFNumber",
            "clang-analyzer-osx.coreFoundation.CFRetainRelease",
            "clang-analyzer-osx.coreFoundation.containers.*",
            "clang-analyzer-osx.coreFoundation.containers.OutOfBounds",
            "clang-analyzer-osx.coreFoundation.containers.PointerSizedValues",
            "clang-analyzer-osx.MIG",
            "clang-analyzer-osx.NumberObjectConversion",
            "clang-analyzer-osx.ObjCProperty",
            "clang-analyzer-osx.OSObjectRetainCount",
            "clang-analyzer-osx.SecKeychainAPI",
            "clang-analyzer-security.*",
            "clang-analyzer-security.FloatLoopCounter",
            "clang-analyzer-security.insecureAPI.*",
            "clang-analyzer-security.insecureAPI.bcmp",
            "clang-analyzer-security.insecureAPI.bcopy",
            "clang-analyzer-security.insecureAPI.bzero",
            "clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling",
            "clang-analyzer-security.insecureAPI.getpw",
            "clang-analyzer-security.insecureAPI.gets",
            "clang-analyzer-security.insecureAPI.mkstemp",
            "clang-analyzer-security.insecureAPI.mktemp",
            "clang-analyzer-security.insecureAPI.rand",
            "clang-analyzer-security.insecureAPI.strcpy",
            "clang-analyzer-security.insecureAPI.UncheckedReturn",
            "clang-analyzer-security.insecureAPI.vfork",
            "clang-analyzer-unix.*",
            "clang-analyzer-unix.API",
            "clang-analyzer-unix.cstring.*",
            "clang-analyzer-unix.cstring.BadSizeArg",
            "clang-analyzer-unix.cstring.NullArg",
            "clang-analyzer-unix.Malloc",
            "clang-analyzer-unix.MallocSizeof",
            "clang-analyzer-unix.MismatchedDeallocator",
            "clang-analyzer-unix.Vfork",
            "clang-analyzer-valist.*",
            "clang-analyzer-valist.CopyToSelf",
            "clang-analyzer-valist.Uninitialized",
            "clang-analyzer-valist.Unterminated",
            "concurrency-*",
            "concurrency-mt-unsafe",
            "concurrency-thread-canceltype-asynchronous",
            "cppcoreguidelines-*",
            "cppcoreguidelines-avoid-*",
            "cppcoreguidelines-avoid-c-arrays",
            "cppcoreguidelines-avoid-goto",
            "cppcoreguidelines-avoid-magic-numbers",
            "cppcoreguidelines-avoid-non-const-global-variables",
            "cppcoreguidelines-c-copy-assignment-signature",
            "cppcoreguidelines-explicit-virtual-functions",
            "cppcoreguidelines-init-variables",
            "cppcoreguidelines-interfaces-global-init",
            "cppcoreguidelines-macro-usage",
            "cppcoreguidelines-narrowing-conversions",
            "cppcoreguidelines-no-malloc",
            "cppcoreguidelines-non-private-member-variables-in-classes",
            "cppcoreguidelines-owning-memory",
            "cppcoreguidelines-prefer-member-initializer",
            "cppcoreguidelines-pro-bounds-*",
            "cppcoreguidelines-pro-bounds-array-to-pointer-decay",
            "cppcoreguidelines-pro-bounds-constant-array-index",
            "cppcoreguidelines-pro-bounds-pointer-arithmetic",
            "cppcoreguidelines-pro-type-*",
            "cppcoreguidelines-pro-type-const-cast",
            "cppcoreguidelines-pro-type-cstyle-cast",
            "cppcoreguidelines-pro-type-member-init",
            "cppcoreguidelines-pro-type-reinterpret-cast",
            "cppcoreguidelines-pro-type-static-cast-downcast",
            "cppcoreguidelines-pro-type-union-access",
            "cppcoreguidelines-pro-type-vararg",
            "cppcoreguidelines-slicing",
            "cppcoreguidelines-special-member-functions",
            "darwin-*",
            "darwin-avoid-spinlock",
            "darwin-dispatch-once-nonstatic",
            "fuchsia-*",
            "fuchsia-default-*",
            "fuchsia-default-arguments-calls",
            "fuchsia-default-arguments-declarations",
            "fuchsia-header-anon-namespaces",
            "fuchsia-multiple-inheritance",
            "fuchsia-overloaded-operator",
            "fuchsia-statically-constructed-objects",
            "fuchsia-trailing-return",
            "fuchsia-virtual-inheritance",
            "google-*",
            "google-build-*",
            "google-build-explicit-make-pair",
            "google-build-namespaces",
            "google-build-using-namespace",
            "google-default-arguments",
            "google-explicit-constructor",
            "google-global-names-in-headers",
            "google-objc-*",
            "google-objc-avoid-*",
            "google-objc-avoid-nsobject-new",
            "google-objc-avoid-throwing-exception",
            "google-objc-function-naming",
            "google-objc-global-variable-declaration",
            "google-readability-*",
            "google-readability-avoid-underscore-in-googletest-name",
            "google-readability-braces-around-statements",
            "google-readability-casting",
            "google-readability-function-size",
            "google-readability-namespace-comments",
            "google-readability-todo",
            "google-runtime-*",
            "google-runtime-int",
            "google-runtime-operator",
            "google-upgrade-googletest-case",
            "hicpp-*",
            "hicpp-avoid-*",
            "hicpp-avoid-c-arrays",
            "hicpp-avoid-goto",
            "hicpp-braces-around-statements",
            "hicpp-deprecated-headers",
            "hicpp-exception-baseclass",
            "hicpp-explicit-conversions",
            "hicpp-function-size",
            "hicpp-invalid-access-moved",
            "hicpp-member-init",
            "hicpp-move-const-arg",
            "hicpp-multiway-paths-covered",
            "hicpp-named-parameter",
            "hicpp-new-delete-operators",
            "hicpp-no-*",
            "hicpp-no-array-decay",
            "hicpp-no-assembler",
            "hicpp-no-malloc",
            "hicpp-noexcept-move",
            "hicpp-signed-bitwise",
            "hicpp-special-member-functions",
            "hicpp-static-assert",
            "hicpp-undelegated-constructor",
            "hicpp-uppercase-literal-suffix",
            "hicpp-use-*",
            "hicpp-use-auto",
            "hicpp-use-emplace",
            "hicpp-use-equals-*",
            "hicpp-use-equals-default",
            "hicpp-use-equals-delete",
            "hicpp-use-noexcept",
            "hicpp-use-nullptr",
            "hicpp-use-override",
            "hicpp-vararg",
            "linuxkernel-must-check-errs",
            "llvm-*",
            "llvm-else-after-return",
            "llvm-header-guard",
            "llvm-include-order",
            "llvm-namespace-comment",
            "llvm-prefer-*",
            "llvm-prefer-isa-or-dyn-cast-in-conditionals",
            "llvm-prefer-register-over-unsigned",
            "llvm-qualified-auto",
            "llvm-twine-local",
            "llvmlibc-*",
            "llvmlibc-callee-namespace",
            "llvmlibc-implementation-in-namespace",
            "llvmlibc-restrict-system-libc-headers",
            "misc-*",
            "misc-definitions-in-headers",
            "misc-misplaced-const",
            "misc-new-delete-overloads",
            "misc-no-recursion",
            "misc-non-*",
            "misc-non-copyable-objects",
            "misc-non-private-member-variables-in-classes",
            "misc-redundant-expression",
            "misc-static-assert",
            "misc-throw-by-value-catch-by-reference",
            "misc-unconventional-assign-operator",
            "misc-uniqueptr-reset-release",
            "misc-unused-*",
            "misc-unused-alias-decls",
            "misc-unused-parameters",
            "misc-unused-using-decls",
            "modernize-*",
            "modernize-avoid-*",
            "modernize-avoid-bind",
            "modernize-avoid-c-arrays",
            "modernize-concat-nested-namespaces",
            "modernize-deprecated-*",
            "modernize-deprecated-headers",
            "modernize-deprecated-ios-base-aliases",
            "modernize-loop-convert",
            "modernize-make-*",
            "modernize-make-shared",
            "modernize-make-unique",
            "modernize-pass-by-value",
            "modernize-raw-string-literal",
            "modernize-redundant-void-arg",
            "modernize-replace-*",
            "modernize-replace-auto-ptr",
            "modernize-replace-disallow-copy-and-assign-macro",
            "modernize-replace-random-shuffle",
            "modernize-return-braced-init-list",
            "modernize-shrink-to-fit",
            "modernize-unary-static-assert",
            "modernize-use-*",
            "modernize-use-auto",
            "modernize-use-bool-literals",
            "modernize-use-default-member-init",
            "modernize-use-emplace",
            "modernize-use-equals-*",
            "modernize-use-equals-default",
            "modernize-use-equals-delete",
            "modernize-use-nodiscard",
            "modernize-use-noexcept",
            "modernize-use-nullptr",
            "modernize-use-override",
            "modernize-use-trailing-return-type",
            "modernize-use-transparent-functors",
            "modernize-use-uncaught-exceptions",
            "modernize-use-using",
            "mpi-*",
            "mpi-buffer-deref",
            "mpi-type-mismatch",
            "objc-*",
            "objc-avoid-nserror-init",
            "objc-dealloc-in-category",
            "objc-forbidden-subclassing",
            "objc-missing-hash",
            "objc-nsinvocation-argument-lifetime",
            "objc-property-declaration",
            "objc-super-self",
            "openmp-*",
            "openmp-exception-escape",
            "openmp-use-default-none",
            "performance-*",
            "performance-faster-string-find",
            "performance-for-range-copy",
            "performance-implicit-conversion-in-loop",
            "performance-inefficient-*",
            "performance-inefficient-algorithm",
            "performance-inefficient-string-concatenation",
            "performance-inefficient-vector-operation",
            "performance-move-*",
            "performance-move-const-arg",
            "performance-move-constructor-init",
            "performance-no-*",
            "performance-no-automatic-move",
            "performance-no-int-to-ptr",
            "performance-noexcept-move-constructor",
            "performance-trivially-destructible",
            "performance-type-promotion-in-math-fn",
            "performance-unnecessary-*",
            "performance-unnecessary-copy-initialization",
            "performance-unnecessary-value-param",
            "portability-*",
            "portability-restrict-system-includes",
            "portability-simd-intrinsics",
            "readability-*",
            "readability-avoid-const-params-in-decls",
            "readability-braces-around-statements",
            "readability-const-return-type",
            "readability-container-size-empty",
            "readability-convert-member-functions-to-static",
            "readability-delete-null-pointer",
            "readability-else-after-return",
            "readability-function-*",
            "readability-function-cognitive-complexity",
            "readability-function-size",
            "readability-identifier-naming",
            "readability-implicit-bool-conversion",
            "readability-inconsistent-declaration-parameter-name",
            "readability-isolate-declaration",
            "readability-magic-numbers",
            "readability-make-member-function-const",
            "readability-misleading-indentation",
            "readability-misplaced-array-index",
            "readability-named-parameter",
            "readability-non-const-parameter",
            "readability-qualified-auto",
            "readability-redundant-*",
            "readability-redundant-access-specifiers",
            "readability-redundant-control-flow",
            "readability-redundant-declaration",
            "readability-redundant-function-ptr-dereference",
            "readability-redundant-member-init",
            "readability-redundant-preprocessor",
            "readability-redundant-smartptr-get",
            "readability-redundant-string-*",
            "readability-redundant-string-cstr",
            "readability-redundant-string-init",
            "readability-simplify-*",
            "readability-simplify-boolean-expr",
            "readability-simplify-subscript-expr",
            "readability-static-*",
            "readability-static-accessed-through-instance",
            "readability-static-definition-in-anonymous-namespace",
            "readability-string-compare",
            "readability-uniqueptr-delete-release",
            "readability-uppercase-literal-suffix",
            "readability-use-anyofallof",
            "zircon-temporary-objects"
          ]
        },
        "markdownDescription": "[object Object]",
        "scope": "resource"
      },
      "C_Cpp.codeAnalysis.clangTidy.checks.disabled": {
        "type": "array",
        "items": {
          "type": "string",
          "enum": [
            "*",
            "abseil-*",
            "abseil-duration-*",
            "abseil-duration-addition",
            "abseil-duration-comparison",
            "abseil-duration-conversion-cast",
            "abseil-duration-division",
            "abseil-duration-factory-*",
            "abseil-duration-factory-float",
            "abseil-duration-factory-scale",
            "abseil-duration-subtraction",
            "abseil-duration-unnecessary-conversion",
            "abseil-faster-strsplit-delimiter",
            "abseil-no-*",
            "abseil-no-internal-dependencies",
            "abseil-no-namespace",
            "abseil-redundant-strcat-calls",
            "abseil-str-cat-append",
            "abseil-string-find-*",
            "abseil-string-find-startswith",
            "abseil-string-find-str-contains",
            "abseil-time-*",
            "abseil-time-comparison",
            "abseil-time-subtraction",
            "abseil-upgrade-duration-conversions",
            "altera-*",
            "altera-id-dependent-backward-branch",
            "altera-kernel-name-restriction",
            "altera-single-work-item-barrier",
            "altera-struct-pack-align",
            "altera-unroll-loops",
            "android-*",
            "android-cloexec-*",
            "android-cloexec-accept",
            "android-cloexec-accept4",
            "android-cloexec-creat",
            "android-cloexec-dup",
            "android-cloexec-epoll-*",
            "android-cloexec-epoll-create",
            "android-cloexec-epoll-create1",
            "android-cloexec-fopen",
            "android-cloexec-inotify-*",
            "android-cloexec-inotify-init",
            "android-cloexec-inotify-init1",
            "android-cloexec-memfd-create",
            "android-cloexec-open",
            "android-cloexec-pipe",
            "android-cloexec-pipe2",
            "android-cloexec-socket",
            "android-comparison-in-temp-failure-retry",
            "boost-use-to-string",
            "bugprone-*",
            "bugprone-argument-comment",
            "bugprone-assert-side-effect",
            "bugprone-bad-signal-to-kill-thread",
            "bugprone-bool-pointer-implicit-conversion",
            "bugprone-branch-clone",
            "bugprone-copy-constructor-init",
            "bugprone-dangling-handle",
            "bugprone-dynamic-static-initializers",
            "bugprone-easily-swappable-parameters",
            "bugprone-exception-escape",
            "bugprone-fold-init-type",
            "bugprone-forward-declaration-namespace",
            "bugprone-forwarding-reference-overload",
            "bugprone-implicit-widening-of-multiplication-result",
            "bugprone-inaccurate-erase",
            "bugprone-incorrect-roundings",
            "bugprone-infinite-loop",
            "bugprone-integer-division",
            "bugprone-lambda-function-name",
            "bugprone-macro-parentheses",
            "bugprone-macro-repeated-side-effects",
            "bugprone-misplaced-*",
            "bugprone-misplaced-operator-in-strlen-in-alloc",
            "bugprone-misplaced-pointer-arithmetic-in-alloc",
            "bugprone-misplaced-widening-cast",
            "bugprone-move-forwarding-reference",
            "bugprone-multiple-statement-macro",
            "bugprone-narrowing-conversions",
            "bugprone-no-escape",
            "bugprone-not-null-terminated-result",
            "bugprone-parent-virtual-call",
            "bugprone-posix-return",
            "bugprone-redundant-branch-condition",
            "bugprone-reserved-identifier",
            "bugprone-signal-handler",
            "bugprone-signed-char-misuse",
            "bugprone-sizeof-*",
            "bugprone-sizeof-container",
            "bugprone-sizeof-expression",
            "bugprone-spuriously-wake-up-functions",
            "bugprone-string-*",
            "bugprone-string-constructor",
            "bugprone-string-integer-assignment",
            "bugprone-string-literal-with-embedded-nul",
            "bugprone-suspicious-*",
            "bugprone-suspicious-enum-usage",
            "bugprone-suspicious-include",
            "bugprone-suspicious-memset-usage",
            "bugprone-suspicious-missing-comma",
            "bugprone-suspicious-semicolon",
            "bugprone-suspicious-string-compare",
            "bugprone-swapped-arguments",
            "bugprone-terminating-continue",
            "bugprone-throw-keyword-missing",
            "bugprone-too-small-loop-variable",
            "bugprone-undefined-memory-manipulation",
            "bugprone-undelegated-constructor",
            "bugprone-unhandled-*",
            "bugprone-unhandled-exception-at-new",
            "bugprone-unhandled-self-assignment",
            "bugprone-unused-raii",
            "bugprone-unused-return-value",
            "bugprone-use-after-move",
            "bugprone-virtual-near-miss",
            "cert-*",
            "cert-con*",
            "cert-con36-c",
            "cert-con54-cpp",
            "cert-dcl*",
            "cert-dcl03-c",
            "cert-dcl16-c",
            "cert-dcl21-cpp",
            "cert-dcl37-c",
            "cert-dcl50-cpp",
            "cert-dcl51-cpp",
            "cert-dcl54-cpp",
            "cert-dcl58-cpp",
            "cert-dcl59-cpp",
            "cert-env33-c",
            "cert-err*",
            "cert-err09-cpp",
            "cert-err34-c",
            "cert-err52-cpp",
            "cert-err58-cpp",
            "cert-err60-cpp",
            "cert-err61-cpp",
            "cert-fio38-c",
            "cert-flp30-c",
            "cert-mem57-cpp",
            "cert-msc*",
            "cert-msc30-c",
            "cert-msc32-c",
            "cert-msc50-cpp",
            "cert-msc51-cpp",
            "cert-oop*",
            "cert-oop11-cpp",
            "cert-oop54-cpp",
            "cert-oop57-cpp",
            "cert-oop58-cpp",
            "cert-pos44-c",
            "cert-sig30-c",
            "cert-str34-c",
            "clang-analyzer-*",
            "clang-analyzer-core.*",
            "clang-analyzer-core.CallAndMessage",
            "clang-analyzer-core.DivideZero",
            "clang-analyzer-core.DynamicTypePropagation",
            "clang-analyzer-core.NonNullParamChecker",
            "clang-analyzer-core.NullDereference",
            "clang-analyzer-core.StackAddressEscape",
            "clang-analyzer-core.UndefinedBinaryOperatorResult",
            "clang-analyzer-core.uninitialized.*",
            "clang-analyzer-core.uninitialized.ArraySubscript",
            "clang-analyzer-core.uninitialized.Assign",
            "clang-analyzer-core.uninitialized.Branch",
            "clang-analyzer-core.uninitialized.CapturedBlockVariable",
            "clang-analyzer-core.uninitialized.UndefReturn",
            "clang-analyzer-core.VLASize",
            "clang-analyzer-cplusplus.*",
            "clang-analyzer-cplusplus.InnerPointer",
            "clang-analyzer-cplusplus.Move",
            "clang-analyzer-cplusplus.NewDelete",
            "clang-analyzer-cplusplus.NewDeleteLeaks",
            "clang-analyzer-deadcode.DeadStores",
            "clang-analyzer-nullablity.*",
            "clang-analyzer-nullability.NullabilityBase",
            "clang-analyzer-nullability.NullableDereferenced",
            "clang-analyzer-nullability.NullablePassedToNonnull",
            "clang-analyzer-nullability.NullableReturnedFromNonnull",
            "clang-analyzer-nullability.NullPassedToNonnull",
            "clang-analyzer-nullability.NullReturnedFromNonnull",
            "clang-analyzer-optin.*",
            "clang-analyzer-optin.cplusplus.*",
            "clang-analyzer-optin.cplusplus.UninitializedObject",
            "clang-analyzer-optin.cplusplus.VirtualCall",
            "clang-analyzer-optin.mpi.MPI-Checker",
            "clang-analyzer-optin.osx.*",
            "clang-analyzer-optin.osx.cocoa.localizability.*",
            "clang-analyzer-optin.osx.cocoa.localizability.EmptyLocalizationContextChecker",
            "clang-analyzer-optin.osx.cocoa.localizability.NonLocalizedStringChecker",
            "clang-analyzer-optin.osx.OSObjectCStyleCast",
            "clang-analyzer-optin.performance.*",
            "clang-analyzer-optin.performance.GCDAntipattern",
            "clang-analyzer-optin.performance.Padding",
            "clang-analyzer-optin.portability.UnixAPI",
            "clang-analyzer-osx.*",
            "clang-analyzer-osx.API",
            "clang-analyzer-osx.cocoa.*",
            "clang-analyzer-osx.cocoa.AtSync",
            "clang-analyzer-osx.cocoa.AutoreleaseWrite",
            "clang-analyzer-osx.cocoa.ClassRelease",
            "clang-analyzer-osx.cocoa.Dealloc",
            "clang-analyzer-osx.cocoa.IncompatibleMethodTypes",
            "clang-analyzer-osx.cocoa.Loops",
            "clang-analyzer-osx.cocoa.MissingSuperCall",
            "clang-analyzer-osx.cocoa.NilArg",
            "clang-analyzer-osx.cocoa.NonNilReturnValue",
            "clang-analyzer-osx.cocoa.NSAutoreleasePool",
            "clang-analyzer-osx.cocoa.NSError",
            "clang-analyzer-osx.cocoa.ObjCGenerics",
            "clang-analyzer-osx.cocoa.RetainCount",
            "clang-analyzer-osx.cocoa.RetainCountBase",
            "clang-analyzer-osx.cocoa.RunLoopAutoreleaseLeak",
            "clang-analyzer-osx.cocoa.SelfInit",
            "clang-analyzer-osx.cocoa.SuperDealloc",
            "clang-analyzer-osx.cocoa.UnusedIvars",
            "clang-analyzer-osx.cocoa.VariadicMethodTypes",
            "clang-analyzer-osx.coreFoundation.*",
            "clang-analyzer-osx.coreFoundation.CFError",
            "clang-analyzer-osx.coreFoundation.CFNumber",
            "clang-analyzer-osx.coreFoundation.CFRetainRelease",
            "clang-analyzer-osx.coreFoundation.containers.*",
            "clang-analyzer-osx.coreFoundation.containers.OutOfBounds",
            "clang-analyzer-osx.coreFoundation.containers.PointerSizedValues",
            "clang-analyzer-osx.MIG",
            "clang-analyzer-osx.NumberObjectConversion",
            "clang-analyzer-osx.ObjCProperty",
            "clang-analyzer-osx.OSObjectRetainCount",
            "clang-analyzer-osx.SecKeychainAPI",
            "clang-analyzer-security.*",
            "clang-analyzer-security.FloatLoopCounter",
            "clang-analyzer-security.insecureAPI.*",
            "clang-analyzer-security.insecureAPI.bcmp",
            "clang-analyzer-security.insecureAPI.bcopy",
            "clang-analyzer-security.insecureAPI.bzero",
            "clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling",
            "clang-analyzer-security.insecureAPI.getpw",
            "clang-analyzer-security.insecureAPI.gets",
            "clang-analyzer-security.insecureAPI.mkstemp",
            "clang-analyzer-security.insecureAPI.mktemp",
            "clang-analyzer-security.insecureAPI.rand",
            "clang-analyzer-security.insecureAPI.strcpy",
            "clang-analyzer-security.insecureAPI.UncheckedReturn",
            "clang-analyzer-security.insecureAPI.vfork",
            "clang-analyzer-unix.*",
            "clang-analyzer-unix.API",
            "clang-analyzer-unix.cstring.*",
            "clang-analyzer-unix.cstring.BadSizeArg",
            "clang-analyzer-unix.cstring.NullArg",
            "clang-analyzer-unix.Malloc",
            "clang-analyzer-unix.MallocSizeof",
            "clang-analyzer-unix.MismatchedDeallocator",
            "clang-analyzer-unix.Vfork",
            "clang-analyzer-valist.*",
            "clang-analyzer-valist.CopyToSelf",
            "clang-analyzer-valist.Uninitialized",
            "clang-analyzer-valist.Unterminated",
            "concurrency-*",
            "concurrency-mt-unsafe",
            "concurrency-thread-canceltype-asynchronous",
            "cppcoreguidelines-*",
            "cppcoreguidelines-avoid-*",
            "cppcoreguidelines-avoid-c-arrays",
            "cppcoreguidelines-avoid-goto",
            "cppcoreguidelines-avoid-magic-numbers",
            "cppcoreguidelines-avoid-non-const-global-variables",
            "cppcoreguidelines-c-copy-assignment-signature",
            "cppcoreguidelines-explicit-virtual-functions",
            "cppcoreguidelines-init-variables",
            "cppcoreguidelines-interfaces-global-init",
            "cppcoreguidelines-macro-usage",
            "cppcoreguidelines-narrowing-conversions",
            "cppcoreguidelines-no-malloc",
            "cppcoreguidelines-non-private-member-variables-in-classes",
            "cppcoreguidelines-owning-memory",
            "cppcoreguidelines-prefer-member-initializer",
            "cppcoreguidelines-pro-bounds-*",
            "cppcoreguidelines-pro-bounds-array-to-pointer-decay",
            "cppcoreguidelines-pro-bounds-constant-array-index",
            "cppcoreguidelines-pro-bounds-pointer-arithmetic",
            "cppcoreguidelines-pro-type-*",
            "cppcoreguidelines-pro-type-const-cast",
            "cppcoreguidelines-pro-type-cstyle-cast",
            "cppcoreguidelines-pro-type-member-init",
            "cppcoreguidelines-pro-type-reinterpret-cast",
            "cppcoreguidelines-pro-type-static-cast-downcast",
            "cppcoreguidelines-pro-type-union-access",
            "cppcoreguidelines-pro-type-vararg",
            "cppcoreguidelines-slicing",
            "cppcoreguidelines-special-member-functions",
            "darwin-*",
            "darwin-avoid-spinlock",
            "darwin-dispatch-once-nonstatic",
            "fuchsia-*",
            "fuchsia-default-*",
            "fuchsia-default-arguments-calls",
            "fuchsia-default-arguments-declarations",
            "fuchsia-header-anon-namespaces",
            "fuchsia-multiple-inheritance",
            "fuchsia-overloaded-operator",
            "fuchsia-statically-constructed-objects",
            "fuchsia-trailing-return",
            "fuchsia-virtual-inheritance",
            "google-*",
            "google-build-*",
            "google-build-explicit-make-pair",
            "google-build-namespaces",
            "google-build-using-namespace",
            "google-default-arguments",
            "google-explicit-constructor",
            "google-global-names-in-headers",
            "google-objc-*",
            "google-objc-avoid-*",
            "google-objc-avoid-nsobject-new",
            "google-objc-avoid-throwing-exception",
            "google-objc-function-naming",
            "google-objc-global-variable-declaration",
            "google-readability-*",
            "google-readability-avoid-underscore-in-googletest-name",
            "google-readability-braces-around-statements",
            "google-readability-casting",
            "google-readability-function-size",
            "google-readability-namespace-comments",
            "google-readability-todo",
            "google-runtime-*",
            "google-runtime-int",
            "google-runtime-operator",
            "google-upgrade-googletest-case",
            "hicpp-*",
            "hicpp-avoid-*",
            "hicpp-avoid-c-arrays",
            "hicpp-avoid-goto",
            "hicpp-braces-around-statements",
            "hicpp-deprecated-headers",
            "hicpp-exception-baseclass",
            "hicpp-explicit-conversions",
            "hicpp-function-size",
            "hicpp-invalid-access-moved",
            "hicpp-member-init",
            "hicpp-move-const-arg",
            "hicpp-multiway-paths-covered",
            "hicpp-named-parameter",
            "hicpp-new-delete-operators",
            "hicpp-no-*",
            "hicpp-no-array-decay",
            "hicpp-no-assembler",
            "hicpp-no-malloc",
            "hicpp-noexcept-move",
            "hicpp-signed-bitwise",
            "hicpp-special-member-functions",
            "hicpp-static-assert",
            "hicpp-undelegated-constructor",
            "hicpp-uppercase-literal-suffix",
            "hicpp-use-*",
            "hicpp-use-auto",
            "hicpp-use-emplace",
            "hicpp-use-equals-*",
            "hicpp-use-equals-default",
            "hicpp-use-equals-delete",
            "hicpp-use-noexcept",
            "hicpp-use-nullptr",
            "hicpp-use-override",
            "hicpp-vararg",
            "linuxkernel-must-check-errs",
            "llvm-*",
            "llvm-else-after-return",
            "llvm-header-guard",
            "llvm-include-order",
            "llvm-namespace-comment",
            "llvm-prefer-*",
            "llvm-prefer-isa-or-dyn-cast-in-conditionals",
            "llvm-prefer-register-over-unsigned",
            "llvm-qualified-auto",
            "llvm-twine-local",
            "llvmlibc-*",
            "llvmlibc-callee-namespace",
            "llvmlibc-implementation-in-namespace",
            "llvmlibc-restrict-system-libc-headers",
            "misc-*",
            "misc-definitions-in-headers",
            "misc-misplaced-const",
            "misc-new-delete-overloads",
            "misc-no-recursion",
            "misc-non-*",
            "misc-non-copyable-objects",
            "misc-non-private-member-variables-in-classes",
            "misc-redundant-expression",
            "misc-static-assert",
            "misc-throw-by-value-catch-by-reference",
            "misc-unconventional-assign-operator",
            "misc-uniqueptr-reset-release",
            "misc-unused-*",
            "misc-unused-alias-decls",
            "misc-unused-parameters",
            "misc-unused-using-decls",
            "modernize-*",
            "modernize-avoid-*",
            "modernize-avoid-bind",
            "modernize-avoid-c-arrays",
            "modernize-concat-nested-namespaces",
            "modernize-deprecated-*",
            "modernize-deprecated-headers",
            "modernize-deprecated-ios-base-aliases",
            "modernize-loop-convert",
            "modernize-make-*",
            "modernize-make-shared",
            "modernize-make-unique",
            "modernize-pass-by-value",
            "modernize-raw-string-literal",
            "modernize-redundant-void-arg",
            "modernize-replace-*",
            "modernize-replace-auto-ptr",
            "modernize-replace-disallow-copy-and-assign-macro",
            "modernize-replace-random-shuffle",
            "modernize-return-braced-init-list",
            "modernize-shrink-to-fit",
            "modernize-unary-static-assert",
            "modernize-use-*",
            "modernize-use-auto",
            "modernize-use-bool-literals",
            "modernize-use-default-member-init",
            "modernize-use-emplace",
            "modernize-use-equals-*",
            "modernize-use-equals-default",
            "modernize-use-equals-delete",
            "modernize-use-nodiscard",
            "modernize-use-noexcept",
            "modernize-use-nullptr",
            "modernize-use-override",
            "modernize-use-trailing-return-type",
            "modernize-use-transparent-functors",
            "modernize-use-uncaught-exceptions",
            "modernize-use-using",
            "mpi-*",
            "mpi-buffer-deref",
            "mpi-type-mismatch",
            "objc-*",
            "objc-avoid-nserror-init",
            "objc-dealloc-in-category",
            "objc-forbidden-subclassing",
            "objc-missing-hash",
            "objc-nsinvocation-argument-lifetime",
            "objc-property-declaration",
            "objc-super-self",
            "openmp-*",
            "openmp-exception-escape",
            "openmp-use-default-none",
            "performance-*",
            "performance-faster-string-find",
            "performance-for-range-copy",
            "performance-implicit-conversion-in-loop",
            "performance-inefficient-*",
            "performance-inefficient-algorithm",
            "performance-inefficient-string-concatenation",
            "performance-inefficient-vector-operation",
            "performance-move-*",
            "performance-move-const-arg",
            "performance-move-constructor-init",
            "performance-no-*",
            "performance-no-automatic-move",
            "performance-no-int-to-ptr",
            "performance-noexcept-move-constructor",
            "performance-trivially-destructible",
            "performance-type-promotion-in-math-fn",
            "performance-unnecessary-*",
            "performance-unnecessary-copy-initialization",
            "performance-unnecessary-value-param",
            "portability-*",
            "portability-restrict-system-includes",
            "portability-simd-intrinsics",
            "readability-*",
            "readability-avoid-const-params-in-decls",
            "readability-braces-around-statements",
            "readability-const-return-type",
            "readability-container-size-empty",
            "readability-convert-member-functions-to-static",
            "readability-delete-null-pointer",
            "readability-else-after-return",
            "readability-function-*",
            "readability-function-cognitive-complexity",
            "readability-function-size",
            "readability-identifier-naming",
            "readability-implicit-bool-conversion",
            "readability-inconsistent-declaration-parameter-name",
            "readability-isolate-declaration",
            "readability-magic-numbers",
            "readability-make-member-function-const",
            "readability-misleading-indentation",
            "readability-misplaced-array-index",
            "readability-named-parameter",
            "readability-non-const-parameter",
            "readability-qualified-auto",
            "readability-redundant-*",
            "readability-redundant-access-specifiers",
            "readability-redundant-control-flow",
            "readability-redundant-declaration",
            "readability-redundant-function-ptr-dereference",
            "readability-redundant-member-init",
            "readability-redundant-preprocessor",
            "readability-redundant-smartptr-get",
            "readability-redundant-string-*",
            "readability-redundant-string-cstr",
            "readability-redundant-string-init",
            "readability-simplify-*",
            "readability-simplify-boolean-expr",
            "readability-simplify-subscript-expr",
            "readability-static-*",
            "readability-static-accessed-through-instance",
            "readability-static-definition-in-anonymous-namespace",
            "readability-string-compare",
            "readability-uniqueptr-delete-release",
            "readability-uppercase-literal-suffix",
            "readability-use-anyofallof",
            "zircon-temporary-objects"
          ]
        },
        "markdownDescription": "[object Object]",
        "scope": "resource"
      },
      "C_Cpp.clang_format_path": {
        "type": "string",
        "markdownDescription": "[object Object]",
        "scope": "machine-overridable"
      },
      "C_Cpp.clang_format_style": {
        "type": "string",
        "default": "file",
        "markdownDescription": "[object Object]",
        "scope": "resource"
      },
      "C_Cpp.formatting": {
        "type": "string",
        "enum": [
          "clangFormat",
          "vcFormat",
          "Default",
          "Disabled"
        ],
        "markdownEnumDescriptions": [
          "[object Object]",
          "[object Object]",
          "[object Object]",
          "[object Object]"
        ],
        "default": "Default",
        "description": "Configures the formatting engine.",
        "scope": "resource"
      },
      "C_Cpp.vcFormat.indent.braces": {
        "type": "boolean",
        "default": false,
        "markdownDescription": "[object Object]",
        "scope": "resource"
      },
      "C_Cpp.vcFormat.indent.multiLineRelativeTo": {
        "type": "string",
        "enum": [
          "outermostParenthesis",
          "innermostParenthesis",
          "statementBegin"
        ],
        "enumDescriptions": [
          "Indent new line relative to the outermost open parenthesis.",
          "Indent new line relative to the innermost open parenthesis.",
          "Indent new line relative to the beginning of the current statement."
        ],
        "default": "innermostParenthesis",
        "description": "Determines what new line indentation is relative to.",
        "scope": "resource"
      },
      "C_Cpp.vcFormat.indent.withinParentheses": {
        "type": "string",
        "enum": [
          "alignToParenthesis",
          "indent"
        ],
        "markdownEnumDescriptions": [
          "[object Object]",
          "[object Object]"
        ],
        "default": "indent",
        "markdownDescription": "[object Object]",
        "scope": "resource"
      },
      "C_Cpp.vcFormat.indent.preserveWithinParentheses": {
        "type": "boolean",
        "default": false,
        "description": "In existing code, preserve the existing indent alignment of new lines within parentheses.",
        "scope": "resource"
      },
      "C_Cpp.vcFormat.indent.caseLabels": {
        "type": "boolean",
        "default": false,
        "markdownDescription": "[object Object]",
        "scope": "resource"
      },
      "C_Cpp.vcFormat.indent.caseContents": {
        "type": "boolean",
        "default": true,
        "markdownDescription": "[object Object]",
        "scope": "resource"
      },
      "C_Cpp.vcFormat.indent.caseContentsWhenBlock": {
        "type": "boolean",
        "default": false,
        "markdownDescription": "[object Object]",
        "scope": "resource"
      },
      "C_Cpp.vcFormat.indent.lambdaBracesWhenParameter": {
        "type": "boolean",
        "default": true,
        "markdownDescription": "[object Object]",
        "scope": "resource"
      },
      "C_Cpp.vcFormat.indent.gotoLabels": {
        "type": "string",
        "enum": [
          "oneLeft",
          "leftmostColumn",
          "none"
        ],
        "markdownEnumDescriptions": [
          "[object Object]",
          "[object Object]",
          "[object Object]"
        ],
        "default": "oneLeft",
        "description": "The position of goto labels.",
        "scope": "resource"
      },
      "C_Cpp.vcFormat.indent.preprocessor": {
        "type": "string",
        "enum": [
          "oneLeft",
          "leftmostColumn",
          "none"
        ],
        "markdownEnumDescriptions": [
          "[object Object]",
          "[object Object]",
          "[object Object]"
        ],
        "default": "leftmostColumn",
        "description": "The position of preprocessor directives.",
        "scope": "resource"
      },
      "C_Cpp.vcFormat.indent.accessSpecifiers": {
        "type": "boolean",
        "default": false,
        "markdownDescription": "[object Object]",
        "scope": "resource"
      },
      "C_Cpp.vcFormat.indent.namespaceContents": {
        "type": "boolean",
        "default": true,
        "markdownDescription": "[object Object]",
        "scope": "resource"
      },
      "C_Cpp.vcFormat.indent.preserveComments": {
        "type": "boolean",
        "default": false,
        "description": "Indentation of comments is not changed during formatting operations.",
        "scope": "resource"
      },
      "C_Cpp.vcFormat.newLine.beforeOpenBrace.namespace": {
        "type": "string",
        "enum": [
          "newLine",
          "sameLine",
          "ignore"
        ],
        "enumDescriptions": [
          "Opening braces are moved to a new line.",
          "Opening braces are kept on the same line and a space is added before each one.",
          "Opening braces are not formatted."
        ],
        "default": "ignore",
        "description": "The position of opening braces for namespaces.",
        "scope": "resource"
      },
      "C_Cpp.vcFormat.newLine.beforeOpenBrace.type": {
        "type": "string",
        "enum": [
          "newLine",
          "sameLine",
          "ignore"
        ],
        "enumDescriptions": [
          "Opening braces are moved to a new line.",
          "Opening braces are kept on the same line and a space is added before each one.",
          "Opening braces are not formatted."
        ],
        "default": "ignore",
        "description": "The position of opening braces for type definitions.",
        "scope": "resource"
      },
      "C_Cpp.vcFormat.newLine.beforeOpenBrace.function": {
        "type": "string",
        "enum": [
          "newLine",
          "sameLine",
          "ignore"
        ],
        "enumDescriptions": [
          "Opening braces are moved to a new line.",
          "Opening braces are kept on the same line and a space is added before each one.",
          "Opening braces are not formatted."
        ],
        "default": "ignore",
        "description": "The position of opening braces for functions.",
        "scope": "resource"
      },
      "C_Cpp.vcFormat.newLine.beforeOpenBrace.block": {
        "type": "string",
        "enum": [
          "newLine",
          "sameLine",
          "ignore"
        ],
        "enumDescriptions": [
          "Opening braces are moved to a new line.",
          "Opening braces are kept on the same line and a space is added before each one.",
          "Opening braces are not formatted."
        ],
        "default": "ignore",
        "description": "The position of opening braces for control blocks.",
        "scope": "resource"
      },
      "C_Cpp.vcFormat.newLine.beforeOpenBrace.lambda": {
        "enum": [
          "newLine",
          "sameLine",
          "ignore"
        ],
        "enumDescriptions": [
          "Opening braces are moved to a new line.",
          "Opening braces are kept on the same line and a space is added before each one.",
          "Opening braces are not formatted."
        ],
        "default": "ignore",
        "description": "The position of opening braces for lambda functions.",
        "scope": "resource"
      },
      "C_Cpp.vcFormat.newLine.scopeBracesOnSeparateLines": {
        "type": "boolean",
        "default": false,
        "description": "Place opening and closing braces for scopes on separate lines.",
        "scope": "resource"
      },
      "C_Cpp.vcFormat.newLine.closeBraceSameLine.emptyType": {
        "type": "boolean",
        "default": false,
        "description": "For empty types, move closing braces to the same line as opening braces.",
        "scope": "resource"
      },
      "C_Cpp.vcFormat.newLine.closeBraceSameLine.emptyFunction": {
        "type": "boolean",
        "default": false,
        "description": "For empty function bodies, move closing braces to the same line as opening braces.",
        "scope": "resource"
      },
      "C_Cpp.vcFormat.newLine.beforeCatch": {
        "type": "boolean",
        "default": true,
        "markdownDescription": "[object Object]",
        "scope": "resource"
      },
      "C_Cpp.vcFormat.newLine.beforeElse": {
        "type": "boolean",
        "default": true,
        "markdownDescription": "[object Object]",
        "scope": "resource"
      },
      "C_Cpp.vcFormat.newLine.beforeWhileInDoWhile": {
        "type": "boolean",
        "default": false,
        "markdownDescription": "[object Object]",
        "scope": "resource"
      },
      "C_Cpp.vcFormat.space.beforeFunctionOpenParenthesis": {
        "type": "string",
        "enum": [
          "insert",
          "remove",
          "ignore"
        ],
        "enumDescriptions": [
          "Add a space before the opening parenthesis of a function.",
          "Spaces before opening parenthesis of a function are removed.",
          "Spaces are left as entered."
        ],
        "default": "remove",
        "description": "Spacing between function names and opening parentheses of argument lists.",
        "scope": "resource"
      },
      "C_Cpp.vcFormat.space.withinParameterListParentheses": {
        "type": "boolean",
        "default": false,
        "description": "A space is added after the opening parenthesis and also before the closing parenthesis in function parameter lists.",
        "scope": "resource"
      },
      "C_Cpp.vcFormat.space.betweenEmptyParameterListParentheses": {
        "type": "boolean",
        "default": false,
        "description": "When a function parameter list is empty, a space is inserted between its parentheses.",
        "scope": "resource"
      },
      "C_Cpp.vcFormat.space.afterKeywordsInControlFlowStatements": {
        "type": "boolean",
        "default": true,
        "description": "A space is added between the keyword and opening parenthesis in control flow statements.",
        "scope": "resource"
      },
      "C_Cpp.vcFormat.space.withinControlFlowStatementParentheses": {
        "type": "boolean",
        "default": false,
        "description": "A space is added after the opening parenthesis and also before the closing parenthesis in control flow statements.",
        "scope": "resource"
      },
      "C_Cpp.vcFormat.space.beforeLambdaOpenParenthesis": {
        "type": "boolean",
        "default": false,
        "description": "A space is added before the opening parenthesis of lambda argument lists.",
        "scope": "resource"
      },
      "C_Cpp.vcFormat.space.withinCastParentheses": {
        "type": "boolean",
        "default": false,
        "description": "A space is added after the opening parenthesis and also before the closing parenthesis of a C-style cast.",
        "scope": "resource"
      },
      "C_Cpp.vcFormat.space.afterCastCloseParenthesis": {
        "type": "boolean",
        "default": false,
        "description": "A space is added after the closing parenthesis of a C-style cast.",
        "scope": "resource"
      },
      "C_Cpp.vcFormat.space.withinExpressionParentheses": {
        "type": "boolean",
        "default": false,
        "description": "A space is added after the opening parenthesis and also before the closing parenthesis of a parenthesized expression.",
        "scope": "resource"
      },
      "C_Cpp.vcFormat.space.beforeBlockOpenBrace": {
        "type": "boolean",
        "default": true,
        "description": "A space is added before the opening braces of scope blocks.",
        "scope": "resource"
      },
      "C_Cpp.vcFormat.space.betweenEmptyBraces": {
        "type": "boolean",
        "default": false,
        "description": "When braces are empty and on the same line, a space is inserted between them.",
        "scope": "resource"
      },
      "C_Cpp.vcFormat.space.beforeInitializerListOpenBrace": {
        "type": "boolean",
        "default": false,
        "description": "A space is added before the opening brace of uniform initialization and initializer lists.",
        "scope": "resource"
      },
      "C_Cpp.vcFormat.space.withinInitializerListBraces": {
        "type": "boolean",
        "default": true,
        "description": "A space is added after the opening brace and also before the closing brace of uniform initialization and initializer lists.",
        "scope": "resource"
      },
      "C_Cpp.vcFormat.space.preserveInInitializerList": {
        "type": "boolean",
        "default": true,
        "description": "Spaces around commas are preserved inside uniform initialization and initializer lists.",
        "scope": "resource"
      },
      "C_Cpp.vcFormat.space.beforeOpenSquareBracket": {
        "type": "boolean",
        "default": false,
        "description": "A space is added before opening square brackets.",
        "scope": "resource"
      },
      "C_Cpp.vcFormat.space.withinSquareBrackets": {
        "type": "boolean",
        "default": false,
        "description": "A space is added after the opening square bracket and also before the closing square bracket.",
        "scope": "resource"
      },
      "C_Cpp.vcFormat.space.beforeEmptySquareBrackets": {
        "type": "boolean",
        "default": false,
        "description": "When square brackets are empty, a space is added before the opening bracket.",
        "scope": "resource"
      },
      "C_Cpp.vcFormat.space.betweenEmptySquareBrackets": {
        "type": "boolean",
        "default": false,
        "description": "When square brackets are empty, a space is inserted between them.",
        "scope": "resource"
      },
      "C_Cpp.vcFormat.space.groupSquareBrackets": {
        "type": "boolean",
        "default": true,
        "description": "For multi-dimensional arrays, all space between brackets is removed. Other settings that control space are overridden.",
        "scope": "resource"
      },
      "C_Cpp.vcFormat.space.withinLambdaBrackets": {
        "type": "boolean",
        "default": false,
        "description": "A space is added after the opening square bracket and also before the closing square bracket.",
        "scope": "resource"
      },
      "C_Cpp.vcFormat.space.betweenEmptyLambdaBrackets": {
        "type": "boolean",
        "default": false,
        "description": "When square brackets are empty, a space is inserted between them.",
        "scope": "resource"
      },
      "C_Cpp.vcFormat.space.beforeComma": {
        "type": "boolean",
        "default": false,
        "description": "A space is added before every comma.",
        "scope": "resource"
      },
      "C_Cpp.vcFormat.space.afterComma": {
        "type": "boolean",
        "default": true,
        "description": "A space is added after every comma.",
        "scope": "resource"
      },
      "C_Cpp.vcFormat.space.removeAroundMemberOperators": {
        "type": "boolean",
        "default": true,
        "description": "Spaces around member access operators, pointer-to-member operators, and scope resolution operators are removed.",
        "scope": "resource"
      },
      "C_Cpp.vcFormat.space.beforeInheritanceColon": {
        "type": "boolean",
        "default": true,
        "description": "A space is added before the colon for inherited types in class definitions.",
        "scope": "resource"
      },
      "C_Cpp.vcFormat.space.beforeConstructorColon": {
        "type": "boolean",
        "default": true,
        "description": "A space is added before the colon in constructor definitions.",
        "scope": "resource"
      },
      "C_Cpp.vcFormat.space.removeBeforeSemicolon": {
        "type": "boolean",
        "default": true,
        "description": "Spaces are removed before every semicolon.",
        "scope": "resource"
      },
      "C_Cpp.vcFormat.space.insertAfterSemicolon": {
        "type": "boolean",
        "default": false,
        "description": "A space is inserted after every semicolon.",
        "scope": "resource"
      },
      "C_Cpp.vcFormat.space.removeAroundUnaryOperator": {
        "type": "boolean",
        "default": true,
        "description": "Spaces between unary operators and operands are removed.",
        "scope": "resource"
      },
      "C_Cpp.vcFormat.space.aroundBinaryOperator": {
        "type": "string",
        "enum": [
          "insert",
          "remove",
          "ignore"
        ],
        "enumDescriptions": [
          "A space is added before the operator and also after it.",
          "Spaces before and after the operator are removed.",
          "Spaces are left as entered."
        ],
        "default": "insert",
        "description": "Spaces around binary operators.",
        "scope": "resource"
      },
      "C_Cpp.vcFormat.space.aroundAssignmentOperator": {
        "type": "string",
        "enum": [
          "insert",
          "remove",
          "ignore"
        ],
        "enumDescriptions": [
          "A space is added before the operator and also after it.",
          "Spaces before and after the operator are removed.",
          "Spaces are left as entered."
        ],
        "default": "insert",
        "description": "Spaces around assignment operators.",
        "scope": "resource"
      },
      "C_Cpp.vcFormat.space.pointerReferenceAlignment": {
        "type": "string",
        "enum": [
          "left",
          "center",
          "right",
          "ignore"
        ],
        "enumDescriptions": [
          "Pointer and reference operators are aligned to the left.",
          "Pointer and reference operators are centered.",
          "Pointer and reference operators are aligned to the right.",
          "Pointer and reference operators are not formatted."
        ],
        "default": "left",
        "description": "Spaces around pointer and reference operators.",
        "scope": "resource"
      },
      "C_Cpp.vcFormat.space.aroundTernaryOperator": {
        "type": "string",
        "enum": [
          "insert",
          "remove",
          "ignore"
        ],
        "enumDescriptions": [
          "A space is added before the operator and also after it.",
          "Spaces before and after the operator are removed.",
          "Spaces are left as entered."
        ],
        "default": "insert",
        "description": "Spaces around conditional operators.",
        "scope": "resource"
      },
      "C_Cpp.vcFormat.wrap.preserveBlocks": {
        "type": "string",
        "enum": [
          "oneLiners",
          "allOneLineScopes",
          "never"
        ],
        "markdownEnumDescriptions": [
          "[object Object]",
          "[object Object]",
          "[object Object]"
        ],
        "default": "oneLiners",
        "description": "Wrapping options for blocks.",
        "scope": "resource"
      },
      "C_Cpp.clang_format_fallbackStyle": {
        "type": "string",
        "default": "Visual Studio",
        "markdownDescription": "[object Object]",
        "scope": "resource"
      },
      "C_Cpp.clang_format_sortIncludes": {
        "type": [
          "boolean",
          "null"
        ],
        "enum": [
          true,
          false,
          null
        ],
        "default": null,
        "markdownDescription": "[object Object]",
        "scope": "resource"
      },
      "C_Cpp.intelliSenseEngine": {
        "type": "string",
        "enum": [
          "Default",
          "Tag Parser",
          "Disabled"
        ],
        "default": "Default",
        "description": "Controls the IntelliSense provider.",
        "enumDescriptions": [
          "Provides context-aware results via a separate IntelliSense process.",
          "Provides \"fuzzy\" results that are not context-aware.",
          "Turns off C/C++ language service features."
        ],
        "scope": "resource"
      },
      "C_Cpp.intelliSenseEngineFallback": {
        "type": "string",
        "enum": [
          "Enabled",
          "Disabled"
        ],
        "default": "Disabled",
        "markdownDescription": "[object Object]",
        "scope": "resource"
      },
      "C_Cpp.autocomplete": {
        "type": "string",
        "enum": [
          "Default",
          "Disabled"
        ],
        "default": "Default",
        "markdownDescription": "[object Object]",
        "enumDescriptions": [
          "Uses the active IntelliSense engine.",
          "Uses the word-based completion provided by Visual Studio Code."
        ],
        "scope": "resource"
      },
      "C_Cpp.errorSquiggles": {
        "type": "string",
        "enum": [
          "Enabled",
          "Disabled",
          "EnabledIfIncludesResolve"
        ],
        "default": "EnabledIfIncludesResolve",
        "description": "Controls whether suspected compile errors detected by the IntelliSense engine will be reported back to the editor. It also controls whether code analysis warnings are reported if includes can't be found. This setting is ignored by the Tag Parser engine.",
        "scope": "resource"
      },
      "C_Cpp.dimInactiveRegions": {
        "type": "boolean",
        "default": true,
        "description": "Controls whether inactive preprocessor blocks are colored differently than active code. This setting has no effect if IntelliSense is disabled or if using the Default High Contrast theme.",
        "scope": "resource"
      },
      "C_Cpp.inactiveRegionOpacity": {
        "type:": "number",
        "default": 0.55,
        "markdownDescription": "[object Object]",
        "scope": "resource",
        "minimum": 0.1,
        "maximum": 1
      },
      "C_Cpp.inactiveRegionForegroundColor": {
        "type": "string",
        "description": "Controls the font coloring of inactive preprocessor blocks. Input is in the form a hexadecimal color code or a valid Theme Color. If not set, this defaults to the syntax coloring scheme of the editor. This setting only applies when inactive region dimming is enabled.",
        "scope": "resource"
      },
      "C_Cpp.inactiveRegionBackgroundColor": {
        "type": "string",
        "description": "Controls the background coloring of inactive preprocessor blocks. Input is in the form a hexadecimal color code or a valid Theme Color. If not set, this defaults to transparent. This setting only applies when inactive region dimming is enabled.",
        "scope": "resource"
      },
      "C_Cpp.loggingLevel": {
        "type": "string",
        "enum": [
          "None",
          "Error",
          "Warning",
          "Information",
          "Debug"
        ],
        "default": "Error",
        "markdownDescription": "[object Object]",
        "scope": "window"
      },
      "C_Cpp.autoAddFileAssociations": {
        "type": "boolean",
        "default": true,
        "markdownDescription": "[object Object]",
        "scope": "window"
      },
      "C_Cpp.workspaceParsingPriority": {
        "type": "string",
        "enum": [
          "highest",
          "high",
          "medium",
          "low"
        ],
        "default": "highest",
        "markdownDescription": "[object Object]",
        "scope": "window"
      },
      "C_Cpp.workspaceSymbols": {
        "type": "string",
        "enum": [
          "All",
          "Just My Code"
        ],
        "default": "Just My Code",
        "description": "[object Object]",
        "scope": "window"
      },
      "C_Cpp.exclusionPolicy": {
        "type": "string",
        "enum": [
          "checkFolders",
          "checkFilesAndFolders"
        ],
        "default": "checkFolders",
        "markdownDescription": "[object Object]",
        "enumDescriptions": [
          "The exclusion filters will only be evaluated once per folder (individual files are not checked).",
          "The exclusion filters will be evaluated against every file and folder encountered."
        ],
        "scope": "resource"
      },
      "C_Cpp.preferredPathSeparator": {
        "type": "string",
        "enum": [
          "Forward Slash",
          "Backslash"
        ],
        "default": "Forward Slash",
        "markdownDescription": "[object Object]",
        "scope": "machine-overridable"
      },
      "C_Cpp.simplifyStructuredComments": {
        "type": "boolean",
        "default": true,
        "markdownDescription": "[object Object]",
        "scope": "application"
      },
      "C_Cpp.commentContinuationPatterns": {
        "type": "array",
        "default": [
          "/**"
        ],
        "items": {
          "anyOf": [
            {
              "type": "string",
              "markdownDescription": "[object Object]"
            },
            {
              "type": "object",
              "properties": {
                "begin": {
                  "type": "string",
                  "description": "The pattern that begins a multiline or single line comment block."
                },
                "continue": {
                  "type": "string",
                  "description": "The text that will be inserted on the next line when Enter is pressed inside a multiline or single line comment block."
                }
              }
            }
          ]
        },
        "description": "Defines the editor behavior for when the Enter key is pressed inside a multiline or single line comment block.",
        "scope": "window"
      },
      "C_Cpp.configurationWarnings": {
        "type": "string",
        "enum": [
          "Enabled",
          "Disabled"
        ],
        "default": "Enabled",
        "description": "Determines whether pop up notifications will be shown when a configuration provider extension is unable to provide a configuration for a source file.",
        "scope": "resource"
      },
      "C_Cpp.intelliSenseCachePath": {
        "type": "string",
        "markdownDescription": "[object Object]",
        "scope": "machine-overridable"
      },
      "C_Cpp.intelliSenseCacheSize": {
        "type": "number",
        "default": 5120,
        "markdownDescription": "[object Object]",
        "scope": "machine-overridable",
        "minimum": 0
      },
      "C_Cpp.intelliSenseMemoryLimit": {
        "type": "number",
        "default": 4096,
        "markdownDescription": "[object Object]",
        "scope": "machine-overridable",
        "minimum": 256,
        "maximum": 16384
      },
      "C_Cpp.intelliSenseUpdateDelay": {
        "type": "number",
        "default": 2000,
        "description": "Controls the delay in milliseconds before IntelliSense starts updating after a modification.",
        "scope": "application",
        "minimum": 500,
        "maximum": 3000
      },
      "C_Cpp.default.includePath": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "markdownDescription": "[object Object]",
        "scope": "machine-overridable"
      },
      "C_Cpp.default.defines": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "markdownDescription": "[object Object]",
        "scope": "machine-overridable"
      },
      "C_Cpp.default.macFrameworkPath": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "markdownDescription": "[object Object]",
        "scope": "machine-overridable"
      },
      "C_Cpp.default.windowsSdkVersion": {
        "type": "string",
        "markdownDescription": "[object Object]",
        "pattern": "^((\\d{2}\\.\\d{1}\\.\\d{5}\\.\\d{1}$|^8\\.1)|())$",
        "scope": "machine-overridable"
      },
      "C_Cpp.default.compileCommands": {
        "type": "string",
        "markdownDescription": "[object Object]",
        "scope": "machine-overridable"
      },
      "C_Cpp.default.forcedInclude": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "markdownDescription": "[object Object]",
        "scope": "machine-overridable"
      },
      "C_Cpp.default.intelliSenseMode": {
        "type": "string",
        "enum": [
          "",
          "macos-clang-x86",
          "macos-clang-x64",
          "macos-clang-arm",
          "macos-clang-arm64",
          "macos-gcc-x86",
          "macos-gcc-x64",
          "macos-gcc-arm",
          "macos-gcc-arm64",
          "linux-clang-x86",
          "linux-clang-x64",
          "linux-clang-arm",
          "linux-clang-arm64",
          "linux-gcc-x86",
          "linux-gcc-x64",
          "linux-gcc-arm",
          "linux-gcc-arm64",
          "windows-clang-x86",
          "windows-clang-x64",
          "windows-clang-arm",
          "windows-clang-arm64",
          "windows-gcc-x86",
          "windows-gcc-x64",
          "windows-gcc-arm",
          "windows-gcc-arm64",
          "windows-msvc-x86",
          "windows-msvc-x64",
          "windows-msvc-arm",
          "windows-msvc-arm64",
          "clang-x86",
          "clang-x64",
          "clang-arm",
          "clang-arm64",
          "gcc-x86",
          "gcc-x64",
          "gcc-arm",
          "gcc-arm64",
          "msvc-x86",
          "msvc-x64",
          "msvc-arm",
          "msvc-arm64"
        ],
        "markdownDescription": "[object Object]",
        "scope": "machine-overridable"
      },
      "C_Cpp.default.compilerPath": {
        "type": "string",
        "default": null,
        "markdownDescription": "[object Object]",
        "scope": "machine-overridable"
      },
      "C_Cpp.default.compilerArgs": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "markdownDescription": "[object Object]",
        "scope": "machine-overridable"
      },
      "C_Cpp.default.cStandard": {
        "type": "string",
        "enum": [
          "",
          "c89",
          "c99",
          "c11",
          "c17",
          "gnu89",
          "gnu99",
          "gnu11",
          "gnu17"
        ],
        "markdownDescription": "[object Object]",
        "scope": "resource"
      },
      "C_Cpp.default.cppStandard": {
        "type": "string",
        "enum": [
          "",
          "c++98",
          "c++03",
          "c++11",
          "c++14",
          "c++17",
          "c++20",
          "gnu++98",
          "gnu++03",
          "gnu++11",
          "gnu++14",
          "gnu++17",
          "gnu++20"
        ],
        "markdownDescription": "[object Object]",
        "scope": "resource"
      },
      "C_Cpp.default.configurationProvider": {
        "type": "string",
        "markdownDescription": "[object Object]",
        "scope": "resource"
      },
      "C_Cpp.default.mergeConfigurations": {
        "type": "boolean",
        "markdownDescription": "[object Object]",
        "scope": "resource"
      },
      "C_Cpp.default.browse.path": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "default": null,
        "markdownDescription": "[object Object]",
        "scope": "machine-overridable"
      },
      "C_Cpp.default.browse.databaseFilename": {
        "type": "string",
        "markdownDescription": "[object Object]",
        "scope": "machine-overridable"
      },
      "C_Cpp.default.browse.limitSymbolsToIncludedHeaders": {
        "type": "boolean",
        "default": true,
        "markdownDescription": "[object Object]",
        "scope": "resource"
      },
      "C_Cpp.default.systemIncludePath": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "markdownDescription": "[object Object]",
        "scope": "machine-overridable"
      },
      "C_Cpp.default.customConfigurationVariables": {
        "type": [
          "object",
          "null"
        ],
        "default": null,
        "patternProperties": {
          "(^.+$)": {
            "type": "string"
          }
        },
        "markdownDescription": "[object Object]",
        "scope": "machine-overridable"
      },
      "C_Cpp.default.enableConfigurationSquiggles": {
        "type": "boolean",
        "default": true,
        "markdownDescription": "[object Object]",
        "scope": "resource"
      },
      "C_Cpp.updateChannel": {
        "type": "string",
        "enum": [
          "Default",
          "Insiders"
        ],
        "default": "Default",
        "markdownDescription": "[object Object]",
        "scope": "application"
      },
      "C_Cpp.experimentalFeatures": {
        "type": "string",
        "enum": [
          "Enabled",
          "Disabled"
        ],
        "default": "Disabled",
        "description": "Controls whether \"experimental\" features are usable.",
        "scope": "window"
      },
      "C_Cpp.suggestSnippets": {
        "type": "boolean",
        "default": true,
        "markdownDescription": "[object Object]",
        "scope": "resource"
      },
      "C_Cpp.enhancedColorization": {
        "type": "string",
        "enum": [
          "Enabled",
          "Disabled"
        ],
        "default": "Enabled",
        "markdownDescription": "[object Object]",
        "scope": "window"
      },
      "C_Cpp.vcpkg.enabled": {
        "type": "boolean",
        "default": true,
        "markdownDescription": "[object Object]",
        "scope": "resource"
      },
      "C_Cpp.addNodeAddonIncludePaths": {
        "type": "boolean",
        "default": false,
        "markdownDescription": "[object Object]",
        "scope": "application"
      },
      "C_Cpp.renameRequiresIdentifier": {
        "type": "boolean",
        "default": true,
        "markdownDescription": "[object Object]",
        "scope": "application"
      },
      "C_Cpp.debugger.useBacktickCommandSubstitution": {
        "type": "boolean",
        "default": false,
        "markdownDescription": "[object Object]",
        "scope": "window"
      },
      "C_Cpp.codeFolding": {
        "type": "string",
        "enum": [
          "Enabled",
          "Disabled"
        ],
        "default": "Enabled",
        "description": "If enabled, code folding ranges are provided by the language server.",
        "scope": "window"
      },
      "C_Cpp.autocompleteAddParentheses": {
        "type": "boolean",
        "default": false,
        "markdownDescription": "[object Object]",
        "scope": "resource"
      },
      "C_Cpp.files.exclude": {
        "type": "object",
        "markdownDescription": "[object Object]",
        "default": {
          "**/.vscode": true
        },
        "additionalProperties": {
          "anyOf": [
            {
              "type": "boolean",
              "markdownDescription": "[object Object]"
            },
            {
              "type": "object",
              "properties": {
                "when": {
                  "type": "string",
                  "pattern": "\\w*\\$\\(basename\\)\\w*",
                  "default": "$(basename).ext",
                  "markdownDescription": "[object Object]"
                }
              }
            }
          ]
        },
        "scope": "resource"
      }
    }
  },
  {
    "title": "C# configuration",
    "properties": {
      "csharp.format.enable": {
        "type": "boolean",
        "default": true,
        "description": "Enable/disable default C# formatter (requires restart)."
      },
      "csharp.suppressDotnetInstallWarning": {
        "type": "boolean",
        "default": false,
        "description": "Suppress the warning that the .NET Core SDK is not on the path."
      },
      "csharp.unitTestDebuggingOptions": {
        "type": "object",
        "description": "Options to use with the debugger when launching for unit test debugging. Any launch.json option is valid here.",
        "default": {},
        "properties": {
          "sourceFileMap": {
            "type": "object",
            "description": "Optional source file mappings passed to the debug engine. Example: '{ \"C:\\foo\":\"/home/user/foo\" }'",
            "additionalProperties": {
              "type": "string"
            },
            "default": {
              "<insert-source-path-here>": "<insert-target-path-here>"
            }
          },
          "justMyCode": {
            "type": "boolean",
            "description": "Optional flag to only show user code.",
            "default": true
          },
          "requireExactSource": {
            "type": "boolean",
            "description": "Optional flag to require current source code to match the pdb.",
            "default": true
          },
          "enableStepFiltering": {
            "type": "boolean",
            "description": "Optional flag to enable stepping over Properties and Operators.",
            "default": true
          },
          "logging": {
            "description": "Optional flags to determine what types of messages should be logged to the output window.",
            "type": "object",
            "required": [],
            "default": {},
            "properties": {
              "exceptions": {
                "type": "boolean",
                "description": "Optional flag to determine whether exception messages should be logged to the output window.",
                "default": true
              },
              "moduleLoad": {
                "type": "boolean",
                "description": "Optional flag to determine whether module load events should be logged to the output window.",
                "default": true
              },
              "programOutput": {
                "type": "boolean",
                "description": "Optional flag to determine whether program output should be logged to the output window when not using an external console.",
                "default": true
              },
              "engineLogging": {
                "type": "boolean",
                "description": "Optional flag to determine whether diagnostic engine logs should be logged to the output window.",
                "default": false
              },
              "browserStdOut": {
                "type": "boolean",
                "description": "Optional flag to determine if stdout text from the launching the web browser should be logged to the output window.",
                "default": true
              },
              "elapsedTiming": {
                "type": "boolean",
                "description": "If true, engine logging will include `adapterElapsedTime` and `engineElapsedTime` properties to indicate the amount of time, in microseconds, that a request took.",
                "default": false
              },
              "threadExit": {
                "type": "boolean",
                "description": "Controls if a message is logged when a thread in the target process exits. Default: `false`.",
                "default": false
              },
              "processExit": {
                "type": "boolean",
                "description": "Controls if a message is logged when the target process exits, or debugging is stopped. Default: `true`.",
                "default": true
              }
            }
          },
          "suppressJITOptimizations": {
            "type": "boolean",
            "description": "If true, when an optimized module (.dll compiled in the Release configuration) loads in the target process, the debugger will ask the Just-In-Time compiler to generate code with optimizations disabled. For more information: https://aka.ms/VSCode-CS-LaunchJson#suppress-jit-optimizations",
            "default": false
          },
          "symbolOptions": {
            "description": "Options to control how symbols (.pdb files) are found and loaded.",
            "default": {
              "searchPaths": [],
              "searchMicrosoftSymbolServer": false,
              "searchNuGetOrgSymbolServer": false
            },
            "type": "object",
            "properties": {
              "searchPaths": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Array of symbol server URLs (example: http​://MyExampleSymbolServer) or directories (example: /build/symbols) to search for .pdb files. These directories will be searched in addition to the default locations -- next to the module and the path where the pdb was originally dropped to.",
                "default": []
              },
              "searchMicrosoftSymbolServer": {
                "type": "boolean",
                "description": "If 'true' the Microsoft Symbol server (https​://msdl.microsoft.com​/download/symbols) is added to the symbols search path. If unspecified, this option defaults to 'false'.",
                "default": false
              },
              "searchNuGetOrgSymbolServer": {
                "type": "boolean",
                "description": "If 'true' the NuGet.org symbol server (https​://symbols.nuget.org​/download/symbols) is added to the symbols search path. If unspecified, this option defaults to 'false'.",
                "default": false
              },
              "cachePath": {
                "type": "string",
                "description": "Directory where symbols downloaded from symbol servers should be cached. If unspecified, on Windows the debugger will default to %TEMP%\\SymbolCache, and on Linux and macOS the debugger will default to ~/.dotnet/symbolcache.",
                "default": "~/.dotnet/symbolcache"
              },
              "moduleFilter": {
                "description": "Provides options to control which modules (.dll files) the debugger will attempt to load symbols (.pdb files) for.",
                "default": {
                  "mode": "loadAllButExcluded",
                  "excludedModules": []
                },
                "type": "object",
                "required": [
                  "mode"
                ],
                "properties": {
                  "mode": {
                    "type": "string",
                    "enum": [
                      "loadAllButExcluded",
                      "loadOnlyIncluded"
                    ],
                    "enumDescriptions": [
                      "Load symbols for all modules unless the module is in the 'excludedModules' array.",
                      "Do not attempt to load symbols for ANY module unless it is in the 'includedModules' array, or it is included through the 'includeSymbolsNextToModules' setting."
                    ],
                    "description": "Controls which of the two basic operating modes the module filter operates in.",
                    "default": "loadAllButExcluded"
                  },
                  "excludedModules": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Array of modules that the debugger should NOT load symbols for. Wildcards (example: MyCompany.*.dll) are supported.\n\nThis property is ignored unless 'mode' is set to 'loadAllButExcluded'.",
                    "default": []
                  },
                  "includedModules": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Array of modules that the debugger should load symbols for. Wildcards (example: MyCompany.*.dll) are supported.\n\nThis property is ignored unless 'mode' is set to 'loadOnlyIncluded'.",
                    "default": [
                      "MyExampleModule.dll"
                    ]
                  },
                  "includeSymbolsNextToModules": {
                    "type": "boolean",
                    "description": "If true, for any module NOT in the 'includedModules' array, the debugger will still check next to the module itself and the launching executable, but it will not check paths on the symbol search list. This option defaults to 'true'.\n\nThis property is ignored unless 'mode' is set to 'loadOnlyIncluded'.",
                    "default": true
                  }
                }
              }
            }
          },
          "sourceLinkOptions": {
            "description": "Options to control how Source Link connects to web servers. For more information: https://aka.ms/VSCode-CS-LaunchJson#source-link-options",
            "default": {
              "*": {
                "enabled": true
              }
            },
            "type": "object",
            "additionalItems": {
              "type": "object",
              "properties": {
                "enabled": {
                  "title": "boolean",
                  "description": "Is Source Link enabled for this URL?  If unspecified, this option defaults to 'true'.",
                  "default": "true"
                }
              }
            }
          },
          "allowFastEvaluate": {
            "type": "boolean",
            "description": "When true (the default state), the debugger will attempt faster evaluation by simulating execution of simple properties and methods.",
            "default": true
          },
          "targetArchitecture": {
            "type": "string",
            "description": "[Only supported in local macOS debugging] The architecture of the debuggee. This will automatically be detected unless this parameter is set. Allowed values are x86_64 or arm64."
          },
          "type": {
            "type": "string",
            "enum": [
              "coreclr",
              "clr"
            ],
            "description": "Type type of code to debug. Can be either 'coreclr' for .NET Core debugging, or 'clr' for Desktop .NET Framework. 'clr' only works on Windows as the Desktop framework is Windows-only.",
            "default": "coreclr"
          },
          "debugServer": {
            "type": "number",
            "description": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
            "default": 4711
          }
        }
      },
      "csharp.suppressDotnetRestoreNotification": {
        "type": "boolean",
        "default": false,
        "description": "Suppress the notification window to perform a 'dotnet restore' when dependencies can't be resolved."
      },
      "csharp.suppressProjectJsonWarning": {
        "type": "boolean",
        "default": false,
        "description": "Suppress the warning that project.json is no longer a supported project format for .NET Core applications"
      },
      "csharp.suppressBuildAssetsNotification": {
        "type": "boolean",
        "default": false,
        "description": "Suppress the notification window to add missing assets to build or debug the application."
      },
      "csharp.suppressHiddenDiagnostics": {
        "type": "boolean",
        "default": true,
        "description": "Suppress 'hidden' diagnostics (such as 'unnecessary using directives') from appearing in the editor or the Problems pane."
      },
      "csharp.referencesCodeLens.enabled": {
        "type": "boolean",
        "default": true,
        "description": "Specifies whether the references CodeLens should be shown."
      },
      "csharp.referencesCodeLens.filteredSymbols": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "default": [],
        "description": "Array of custom symbol names for which CodeLens should be disabled."
      },
      "csharp.testsCodeLens.enabled": {
        "type": "boolean",
        "default": true,
        "description": "Specifies whether the run and debug test CodeLens should be shown."
      },
      "csharp.maxProjectFileCountForDiagnosticAnalysis": {
        "type": "number",
        "default": 1000,
        "description": "Specifies the maximum number of files for which diagnostics are reported for the whole workspace. If this limit is exceeded, diagnostics will be shown for currently opened files only. Specify 0 or less to disable the limit completely."
      },
      "csharp.semanticHighlighting.enabled": {
        "type": "boolean",
        "default": true,
        "description": "Enable/disable Semantic Highlighting for C# files (Razor files currently unsupported). Defaults to false. Close open files for changes to take effect.",
        "scope": "window"
      },
      "csharp.showOmnisharpLogOnError": {
        "type": "boolean",
        "default": true,
        "description": "Shows the OmniSharp log in the Output pane when OmniSharp reports an error."
      },
      "omnisharp.path": {
        "type": [
          "string",
          "null"
        ],
        "default": null,
        "scope": "machine",
        "description": "Specifies the path to OmniSharp. When left empty the OmniSharp version pinned to the C# Extension is used. This can be the absolute path to an OmniSharp executable, a specific version number, or \"latest\". If a version number or \"latest\" is specified, the appropriate version of OmniSharp will be downloaded on your behalf. Setting \"latest\" is an opt-in into latest beta releases of OmniSharp."
      },
      "omnisharp.useModernNet": {
        "type": "boolean",
        "default": false,
        "scope": "window",
        "title": "Use .NET 6 build of OmniSharp (experimental)",
        "description": "Use OmniSharp build for .NET 6. This version _does not_ support non-SDK-style .NET Framework projects, including Unity. SDK-style Framework, .NET Core, and .NET 5+ projects should see significant performance improvements, but there may still be bugs. Please open issues if you find any bugs."
      },
      "omnisharp.useGlobalMono": {
        "type": "string",
        "default": "auto",
        "enum": [
          "auto",
          "always",
          "never"
        ],
        "enumDescriptions": [
          "Automatically launch OmniSharp with internal \"mono\", since \"mono\" 6.12.0 does not support .NET Core 3.1.40x or .NET 5 SDKs.",
          "Always launch OmniSharp with \"mono\". If version 6.4.0 or greater is not available on the PATH, an error will be printed.",
          "Never launch OmniSharp on a globally-installed Mono."
        ],
        "description": "Launch OmniSharp with the globally-installed Mono. If set to \"always\", \"mono\" version 6.4.0 or greater must be available on the PATH. If set to \"auto\", OmniSharp will be launched with \"mono\" if version 6.4.0 or greater is available on the PATH."
      },
      "omnisharp.monoPath": {
        "type": [
          "string",
          "null"
        ],
        "default": null,
        "scope": "machine",
        "description": "Specifies the path to a mono installation to use when \"useGlobalMono\" is set to \"always\", instead of the default system one. Example: \"/Library/Frameworks/Mono.framework/Versions/Current\""
      },
      "omnisharp.dotnetPath": {
        "type": [
          "string",
          "null"
        ],
        "default": null,
        "scope": "window",
        "description": "Specified the path to a dotnet installation to use when \"useModernNet\" is set to true, instead of the default system one. Example: \"/home/username/mycustomdotnetdirectory\"."
      },
      "omnisharp.waitForDebugger": {
        "type": "boolean",
        "default": false,
        "description": "Pass the --debug flag when launching the OmniSharp server to allow a debugger to be attached."
      },
      "omnisharp.loggingLevel": {
        "type": "string",
        "default": "information",
        "enum": [
          "trace",
          "debug",
          "information",
          "warning",
          "error",
          "critical"
        ],
        "description": "Specifies the level of logging output from the OmniSharp server."
      },
      "omnisharp.autoStart": {
        "type": "boolean",
        "default": true,
        "description": "Specifies whether the OmniSharp server will be automatically started or not. If false, OmniSharp can be started with the 'Restart OmniSharp' command"
      },
      "omnisharp.projectLoadTimeout": {
        "type": "number",
        "default": 60,
        "description": "The time Visual Studio Code will wait for the OmniSharp server to start. Time is expressed in seconds."
      },
      "omnisharp.maxProjectResults": {
        "type": "number",
        "default": 250,
        "description": "The maximum number of projects to be shown in the 'Select Project' dropdown (maximum 250)."
      },
      "omnisharp.defaultLaunchSolution": {
        "type": "string",
        "default": null,
        "description": "The name of the default solution used at start up if the repo has multiple solutions. e.g.'MyAwesomeSolution.sln'. Default value is `null` which will cause the first in alphabetical order to be chosen."
      },
      "omnisharp.useEditorFormattingSettings": {
        "type": "boolean",
        "default": true,
        "description": "Specifes whether OmniSharp should use VS Code editor settings for C# code formatting (use of tabs, indentation size)."
      },
      "omnisharp.minFindSymbolsFilterLength": {
        "type": "number",
        "default": 0,
        "description": "The minimum number of characters to enter before 'Go to Symbol in Workspace' operation shows any results."
      },
      "omnisharp.maxFindSymbolsItems": {
        "type": "number",
        "default": 1000,
        "description": "The maximum number of items that 'Go to Symbol in Workspace' operation can show. The limit is applied only when a positive number is specified here."
      },
      "omnisharp.disableMSBuildDiagnosticWarning": {
        "type": "boolean",
        "default": false,
        "description": "Specifies whether notifications should be shown if OmniSharp encounters warnings or errors loading a project. Note that these warnings/errors are always emitted to the OmniSharp log"
      },
      "omnisharp.enableMsBuildLoadProjectsOnDemand": {
        "type": "boolean",
        "default": false,
        "description": "If true, MSBuild project system will only load projects for files that were opened in the editor. This setting is useful for big C# codebases and allows for faster initialization of code navigation features only for projects that are relevant to code that is being edited. With this setting enabled OmniSharp may load fewer projects and may thus display incomplete reference lists for symbols."
      },
      "omnisharp.enableRoslynAnalyzers": {
        "type": "boolean",
        "default": false,
        "description": "Enables support for roslyn analyzers, code fixes and rulesets."
      },
      "omnisharp.enableEditorConfigSupport": {
        "type": "boolean",
        "default": true,
        "description": "Enables support for reading code style, naming convention and analyzer settings from .editorconfig."
      },
      "omnisharp.enableDecompilationSupport": {
        "type": "boolean",
        "default": false,
        "scope": "machine",
        "description": "Enables support for decompiling external references instead of viewing metadata."
      },
      "omnisharp.enableImportCompletion": {
        "type": "boolean",
        "default": false,
        "description": "Enables support for showing unimported types and unimported extension methods in completion lists. When committed, the appropriate using directive will be added at the top of the current file. This option can have a negative impact on initial completion responsiveness, particularly for the first few completion sessions after opening a solution."
      },
      "omnisharp.organizeImportsOnFormat": {
        "type": "boolean",
        "default": false,
        "description": "Specifies whether 'using' directives should be grouped and sorted during document formatting."
      },
      "omnisharp.enableAsyncCompletion": {
        "type": "boolean",
        "default": false,
        "description": "(EXPERIMENTAL) Enables support for resolving completion edits asynchronously. This can speed up time to show the completion list, particularly override and partial method completion lists, at the cost of slight delays after inserting a completion item. Most completion items will have no noticeable impact with this feature, but typing immediately after inserting an override or partial method completion, before the insert is completed, can have unpredictable results."
      },
      "omnisharp.testRunSettings": {
        "type": [
          "string",
          "null"
        ],
        "default": null,
        "description": "Path to the .runsettings file which should be used when running unit tests."
      },
      "razor.plugin.path": {
        "type": [
          "string",
          "null"
        ],
        "default": null,
        "scope": "machine",
        "description": "Overrides the path to the Razor plugin dll."
      },
      "razor.devmode": {
        "type": "boolean",
        "default": false,
        "description": "Forces the omnisharp-vscode extension to run in a mode that enables local Razor.VSCode deving."
      },
      "razor.disabled": {
        "type": "boolean",
        "default": false,
        "description": "Specifies whether to disable Razor language features."
      },
      "razor.languageServer.directory": {
        "type": [
          "string",
          "null"
        ],
        "default": null,
        "scope": "machine",
        "description": "Overrides the path to the Razor Language Server directory."
      },
      "razor.languageServer.debug": {
        "type": "boolean",
        "default": false,
        "description": "Specifies whether to wait for debug attach when launching the language server."
      },
      "razor.trace": {
        "type": "string",
        "default": "Off",
        "enum": [
          "Off",
          "Messages",
          "Verbose"
        ],
        "enumDescriptions": [
          "Does not log messages from the Razor extension",
          "Logs only some messages from the Razor extension",
          "Logs all messages from the Razor extension"
        ],
        "description": "Specifies whether to output all messages [Verbose], some messages [Messages] or not at all [Off]."
      },
      "razor.format.enable": {
        "type": "boolean",
        "scope": "window",
        "default": true,
        "description": "Enable/disable default Razor formatter."
      }
    }
  },
  {
    "properties": {
      "python.autoComplete.extraPaths": {
        "default": [],
        "description": "List of paths to libraries and the like that need to be imported by auto complete engine. E.g. when using Google App SDK, the paths are not in system path, hence need to be added into this list.",
        "scope": "resource",
        "type": "array"
      },
      "python.condaPath": {
        "default": "",
        "description": "Path to the conda executable to use for activation (version 4.4+).",
        "scope": "machine",
        "type": "string"
      },
      "python.defaultInterpreterPath": {
        "default": "python",
        "description": "Path to Python, you can use a custom version of Python by modifying this setting to include the full path. This default setting is used as a fallback if no interpreter is selected for the workspace. The extension will also not set nor change the value of this setting, it will only read from it.",
        "scope": "machine-overridable",
        "type": "string"
      },
      "python.diagnostics.sourceMapsEnabled": {
        "default": false,
        "description": "Enable source map support for meaningful stack traces in error logs.",
        "scope": "application",
        "type": "boolean"
      },
      "python.disableInstallationCheck": {
        "default": false,
        "description": "Whether to check if Python is installed (also warn when using the macOS-installed Python).",
        "scope": "resource",
        "type": "boolean"
      },
      "python.envFile": {
        "default": "${workspaceFolder}/.env",
        "description": "Absolute path to a file containing environment variable definitions.",
        "scope": "resource",
        "type": "string"
      },
      "python.experiments.enabled": {
        "default": true,
        "description": "Enables A/B tests experiments in the Python extension. If enabled, you may get included in proposed enhancements and/or features.",
        "scope": "machine",
        "type": "boolean"
      },
      "python.experiments.optInto": {
        "default": [],
        "description": "List of experiment to opt into. If empty, user is assigned the default experiment groups. See https://github.com/microsoft/vscode-python/wiki/Experiments for more details.",
        "items": {
          "enum": [
            "All",
            "pythonDeprecatePythonPath",
            "pythonSurveyNotification",
            "pythonTensorboardExperiment"
          ]
        },
        "scope": "machine",
        "type": "array"
      },
      "python.experiments.optOutFrom": {
        "default": [],
        "description": "List of experiment to opt out of. If empty, user is assigned the default experiment groups. See https://github.com/microsoft/vscode-python/wiki/Experiments for more details.",
        "items": {
          "enum": [
            "All",
            "pythonDeprecatePythonPath",
            "pythonSurveyNotification",
            "pythonTensorboardExperiment"
          ]
        },
        "scope": "machine",
        "type": "array"
      },
      "python.formatting.autopep8Args": {
        "default": [],
        "description": "Arguments passed in. Each argument is a separate item in the array.",
        "items": {
          "type": "string"
        },
        "scope": "resource",
        "type": "array"
      },
      "python.formatting.autopep8Path": {
        "default": "autopep8",
        "description": "Path to autopep8, you can use a custom version of autopep8 by modifying this setting to include the full path.",
        "scope": "machine-overridable",
        "type": "string"
      },
      "python.formatting.blackArgs": {
        "default": [],
        "description": "Arguments passed in. Each argument is a separate item in the array.",
        "items": {
          "type": "string"
        },
        "scope": "resource",
        "type": "array"
      },
      "python.formatting.blackPath": {
        "default": "black",
        "description": "Path to Black, you can use a custom version of Black by modifying this setting to include the full path.",
        "scope": "machine-overridable",
        "type": "string"
      },
      "python.formatting.provider": {
        "default": "autopep8",
        "description": "Provider for formatting. Possible options include 'autopep8', 'black', and 'yapf'.",
        "enum": [
          "autopep8",
          "black",
          "none",
          "yapf"
        ],
        "scope": "resource",
        "type": "string",
        "tags": [
          "experimental"
        ]
      },
      "python.formatting.yapfArgs": {
        "default": [],
        "description": "Arguments passed in. Each argument is a separate item in the array.",
        "items": {
          "type": "string"
        },
        "scope": "resource",
        "type": "array"
      },
      "python.formatting.yapfPath": {
        "default": "yapf",
        "description": "Path to yapf, you can use a custom version of yapf by modifying this setting to include the full path.",
        "scope": "machine-overridable",
        "type": "string"
      },
      "python.globalModuleInstallation": {
        "default": false,
        "description": "Whether to install Python modules globally when not using an environment.",
        "scope": "resource",
        "type": "boolean"
      },
      "python.insidersChannel": {
        "default": "off",
        "description": "Set to \"weekly\" or \"daily\" to automatically download and install the latest Insiders builds of the python extension, which include upcoming features and bug fixes.",
        "enum": [
          "daily",
          "off",
          "weekly"
        ],
        "scope": "machine",
        "type": "string"
      },
      "python.languageServer": {
        "default": "Default",
        "description": "Defines type of the language server.",
        "enum": [
          "Default",
          "Jedi",
          "Pylance",
          "None"
        ],
        "enumDescriptions": [
          "Automatically select a language server: Pylance if installed and available, otherwise fallback to Jedi.",
          "Use Jedi behind the Language Server Protocol (LSP) as a language server.",
          "Use Pylance as a language server.",
          "Disable language server capabilities."
        ],
        "scope": "window",
        "type": "string"
      },
      "python.linting.banditArgs": {
        "default": [],
        "description": "Arguments passed in. Each argument is a separate item in the array.",
        "items": {
          "type": "string"
        },
        "scope": "resource",
        "type": "array"
      },
      "python.linting.banditEnabled": {
        "default": false,
        "description": "Whether to lint Python files using bandit.",
        "scope": "resource",
        "type": "boolean"
      },
      "python.linting.banditPath": {
        "default": "bandit",
        "description": "Path to bandit, you can use a custom version of bandit by modifying this setting to include the full path.",
        "scope": "machine-overridable",
        "type": "string"
      },
      "python.linting.cwd": {
        "default": null,
        "description": "Optional working directory for linters.",
        "scope": "resource",
        "type": "string"
      },
      "python.linting.enabled": {
        "default": true,
        "description": "Whether to lint Python files.",
        "scope": "resource",
        "type": "boolean"
      },
      "python.linting.flake8Args": {
        "default": [],
        "description": "Arguments passed in. Each argument is a separate item in the array.",
        "items": {
          "type": "string"
        },
        "scope": "resource",
        "type": "array"
      },
      "python.linting.flake8CategorySeverity.E": {
        "default": "Error",
        "description": "Severity of Flake8 message type 'E'.",
        "enum": [
          "Error",
          "Hint",
          "Information",
          "Warning"
        ],
        "scope": "resource",
        "type": "string"
      },
      "python.linting.flake8CategorySeverity.F": {
        "default": "Error",
        "description": "Severity of Flake8 message type 'F'.",
        "enum": [
          "Error",
          "Hint",
          "Information",
          "Warning"
        ],
        "scope": "resource",
        "type": "string"
      },
      "python.linting.flake8CategorySeverity.W": {
        "default": "Warning",
        "description": "Severity of Flake8 message type 'W'.",
        "enum": [
          "Error",
          "Hint",
          "Information",
          "Warning"
        ],
        "scope": "resource",
        "type": "string"
      },
      "python.linting.flake8Enabled": {
        "default": false,
        "description": "Whether to lint Python files using flake8",
        "scope": "resource",
        "type": "boolean"
      },
      "python.linting.flake8Path": {
        "default": "flake8",
        "description": "Path to flake8, you can use a custom version of flake8 by modifying this setting to include the full path.",
        "scope": "machine-overridable",
        "type": "string"
      },
      "python.linting.ignorePatterns": {
        "default": [
          "**/site-packages/**/*.py",
          ".vscode/*.py"
        ],
        "description": "Patterns used to exclude files or folders from being linted.",
        "items": {
          "type": "string"
        },
        "scope": "resource",
        "type": "array"
      },
      "python.linting.lintOnSave": {
        "default": true,
        "description": "Whether to lint Python files when saved.",
        "scope": "resource",
        "type": "boolean"
      },
      "python.linting.maxNumberOfProblems": {
        "default": 100,
        "description": "Controls the maximum number of problems produced by the server.",
        "scope": "resource",
        "type": "number"
      },
      "python.linting.mypyArgs": {
        "default": [
          "--follow-imports=silent",
          "--ignore-missing-imports",
          "--show-column-numbers",
          "--no-pretty"
        ],
        "description": "Arguments passed in. Each argument is a separate item in the array.",
        "items": {
          "type": "string"
        },
        "scope": "resource",
        "type": "array"
      },
      "python.linting.mypyCategorySeverity.error": {
        "default": "Error",
        "description": "Severity of Mypy message type 'Error'.",
        "enum": [
          "Error",
          "Hint",
          "Information",
          "Warning"
        ],
        "scope": "resource",
        "type": "string"
      },
      "python.linting.mypyCategorySeverity.note": {
        "default": "Information",
        "description": "Severity of Mypy message type 'Note'.",
        "enum": [
          "Error",
          "Hint",
          "Information",
          "Warning"
        ],
        "scope": "resource",
        "type": "string"
      },
      "python.linting.mypyEnabled": {
        "default": false,
        "description": "Whether to lint Python files using mypy.",
        "scope": "resource",
        "type": "boolean"
      },
      "python.linting.mypyPath": {
        "default": "mypy",
        "description": "Path to mypy, you can use a custom version of mypy by modifying this setting to include the full path.",
        "scope": "machine-overridable",
        "type": "string"
      },
      "python.linting.prospectorArgs": {
        "default": [],
        "description": "Arguments passed in. Each argument is a separate item in the array.",
        "items": {
          "type": "string"
        },
        "scope": "resource",
        "type": "array"
      },
      "python.linting.prospectorEnabled": {
        "default": false,
        "description": "Whether to lint Python files using prospector.",
        "scope": "resource",
        "type": "boolean"
      },
      "python.linting.prospectorPath": {
        "default": "prospector",
        "description": "Path to Prospector, you can use a custom version of prospector by modifying this setting to include the full path.",
        "scope": "machine-overridable",
        "type": "string"
      },
      "python.linting.pycodestyleArgs": {
        "default": [],
        "description": "Arguments passed in. Each argument is a separate item in the array.",
        "items": {
          "type": "string"
        },
        "scope": "resource",
        "type": "array"
      },
      "python.linting.pycodestyleCategorySeverity.E": {
        "default": "Error",
        "description": "Severity of pycodestyle message type 'E'.",
        "enum": [
          "Error",
          "Hint",
          "Information",
          "Warning"
        ],
        "scope": "resource",
        "type": "string"
      },
      "python.linting.pycodestyleCategorySeverity.W": {
        "default": "Warning",
        "description": "Severity of pycodestyle message type 'W'.",
        "enum": [
          "Error",
          "Hint",
          "Information",
          "Warning"
        ],
        "scope": "resource",
        "type": "string"
      },
      "python.linting.pycodestyleEnabled": {
        "default": false,
        "description": "Whether to lint Python files using pycodestyle",
        "scope": "resource",
        "type": "boolean"
      },
      "python.linting.pycodestylePath": {
        "default": "pycodestyle",
        "description": "Path to pycodestyle, you can use a custom version of pycodestyle by modifying this setting to include the full path.",
        "scope": "machine-overridable",
        "type": "string"
      },
      "python.linting.pydocstyleArgs": {
        "default": [],
        "description": "Arguments passed in. Each argument is a separate item in the array.",
        "items": {
          "type": "string"
        },
        "scope": "resource",
        "type": "array"
      },
      "python.linting.pydocstyleEnabled": {
        "default": false,
        "description": "Whether to lint Python files using pydocstyle",
        "scope": "resource",
        "type": "boolean"
      },
      "python.linting.pydocstylePath": {
        "default": "pydocstyle",
        "description": "Path to pydocstyle, you can use a custom version of pydocstyle by modifying this setting to include the full path.",
        "scope": "machine-overridable",
        "type": "string"
      },
      "python.linting.pylamaArgs": {
        "default": [],
        "description": "Arguments passed in. Each argument is a separate item in the array.",
        "items": {
          "type": "string"
        },
        "scope": "resource",
        "type": "array"
      },
      "python.linting.pylamaEnabled": {
        "default": false,
        "description": "Whether to lint Python files using pylama.",
        "scope": "resource",
        "type": "boolean"
      },
      "python.linting.pylamaPath": {
        "default": "pylama",
        "description": "Path to pylama, you can use a custom version of pylama by modifying this setting to include the full path.",
        "scope": "machine-overridable",
        "type": "string"
      },
      "python.linting.pylintArgs": {
        "default": [],
        "description": "Arguments passed in. Each argument is a separate item in the array.",
        "items": {
          "type": "string"
        },
        "scope": "resource",
        "type": "array"
      },
      "python.linting.pylintCategorySeverity.convention": {
        "default": "Information",
        "description": "Severity of Pylint message type 'Convention/C'.",
        "enum": [
          "Error",
          "Hint",
          "Information",
          "Warning"
        ],
        "scope": "resource",
        "type": "string"
      },
      "python.linting.pylintCategorySeverity.error": {
        "default": "Error",
        "description": "Severity of Pylint message type 'Error/E'.",
        "enum": [
          "Error",
          "Hint",
          "Information",
          "Warning"
        ],
        "scope": "resource",
        "type": "string"
      },
      "python.linting.pylintCategorySeverity.fatal": {
        "default": "Error",
        "description": "Severity of Pylint message type 'Fatal/F'.",
        "enum": [
          "Error",
          "Hint",
          "Information",
          "Warning"
        ],
        "scope": "resource",
        "type": "string"
      },
      "python.linting.pylintCategorySeverity.refactor": {
        "default": "Hint",
        "description": "Severity of Pylint message type 'Refactor/R'.",
        "enum": [
          "Error",
          "Hint",
          "Information",
          "Warning"
        ],
        "scope": "resource",
        "type": "string"
      },
      "python.linting.pylintCategorySeverity.warning": {
        "default": "Warning",
        "description": "Severity of Pylint message type 'Warning/W'.",
        "enum": [
          "Error",
          "Hint",
          "Information",
          "Warning"
        ],
        "scope": "resource",
        "type": "string"
      },
      "python.linting.pylintEnabled": {
        "default": false,
        "description": "Whether to lint Python files using pylint.",
        "scope": "resource",
        "type": "boolean"
      },
      "python.linting.pylintPath": {
        "default": "pylint",
        "description": "Path to Pylint, you can use a custom version of pylint by modifying this setting to include the full path.",
        "scope": "machine-overridable",
        "type": "string"
      },
      "python.logging.level": {
        "default": "error",
        "description": "The logging level the extension logs at, defaults to 'error'",
        "enum": [
          "debug",
          "error",
          "info",
          "off",
          "warn"
        ],
        "scope": "machine",
        "type": "string"
      },
      "python.pipenvPath": {
        "default": "pipenv",
        "description": "Path to the pipenv executable to use for activation.",
        "scope": "machine-overridable",
        "type": "string"
      },
      "python.poetryPath": {
        "default": "poetry",
        "description": "Path to the poetry executable.",
        "scope": "machine-overridable",
        "type": "string"
      },
      "python.pythonPath": {
        "default": "python",
        "description": "(DEPRECATED: Note this setting is not used when in pythonDeprecatePythonPath experiment) Path to Python, you can use a custom version of Python by modifying this setting to include the full path.",
        "scope": "machine-overridable",
        "type": "string"
      },
      "python.sortImports.args": {
        "default": [],
        "description": "Arguments passed in. Each argument is a separate item in the array.",
        "items": {
          "type": "string"
        },
        "scope": "resource",
        "type": "array"
      },
      "python.sortImports.path": {
        "default": "",
        "description": "Path to isort script, default using inner version",
        "scope": "machine-overridable",
        "type": "string"
      },
      "python.tensorBoard.logDirectory": {
        "description": "Set this setting to your preferred TensorBoard log directory to skip log directory prompt when starting TensorBoard.",
        "scope": "application",
        "type": "string"
      },
      "python.terminal.activateEnvInCurrentTerminal": {
        "default": false,
        "description": "Activate Python Environment in the current Terminal on load of the Extension.",
        "scope": "resource",
        "type": "boolean"
      },
      "python.terminal.activateEnvironment": {
        "default": true,
        "description": "Activate Python Environment in Terminal created using the Extension.",
        "scope": "resource",
        "type": "boolean"
      },
      "python.terminal.executeInFileDir": {
        "default": false,
        "description": "When executing a file in the terminal, whether to use execute in the file's directory, instead of the current open folder.",
        "scope": "resource",
        "type": "boolean"
      },
      "python.terminal.launchArgs": {
        "default": [],
        "description": "Python launch arguments to use when executing a file in the terminal.",
        "scope": "resource",
        "type": "array"
      },
      "python.testing.autoTestDiscoverOnSaveEnabled": {
        "default": true,
        "description": "Enable auto run test discovery when saving a test file.",
        "scope": "resource",
        "type": "boolean"
      },
      "python.testing.cwd": {
        "default": null,
        "description": "Optional working directory for tests.",
        "scope": "resource",
        "type": "string"
      },
      "python.testing.debugPort": {
        "default": 3000,
        "description": "Port number used for debugging of tests.",
        "scope": "resource",
        "type": "number"
      },
      "python.testing.promptToConfigure": {
        "default": true,
        "description": "Prompt to configure a test framework if potential tests directories are discovered.",
        "scope": "resource",
        "type": "boolean"
      },
      "python.testing.pytestArgs": {
        "default": [],
        "description": "Arguments passed in. Each argument is a separate item in the array.",
        "items": {
          "type": "string"
        },
        "scope": "resource",
        "type": "array"
      },
      "python.testing.pytestEnabled": {
        "default": false,
        "description": "Enable testing using pytest.",
        "scope": "resource",
        "type": "boolean"
      },
      "python.testing.pytestPath": {
        "default": "pytest",
        "description": "Path to pytest (pytest), you can use a custom version of pytest by modifying this setting to include the full path.",
        "scope": "machine-overridable",
        "type": "string"
      },
      "python.testing.unittestArgs": {
        "default": [
          "-v",
          "-s",
          ".",
          "-p",
          "*test*.py"
        ],
        "description": "Arguments passed in. Each argument is a separate item in the array.",
        "items": {
          "type": "string"
        },
        "scope": "resource",
        "type": "array"
      },
      "python.testing.unittestEnabled": {
        "default": false,
        "description": "Enable testing using unittest.",
        "scope": "resource",
        "type": "boolean"
      },
      "python.venvFolders": {
        "default": [],
        "description": "Folders in your home directory to look into for virtual environments (supports pyenv, direnv and virtualenvwrapper by default).",
        "items": {
          "type": "string"
        },
        "scope": "machine",
        "type": "array"
      },
      "python.venvPath": {
        "default": "",
        "description": "Path to folder with a list of Virtual Environments (e.g. ~/.pyenv, ~/Envs, ~/.virtualenvs).",
        "scope": "machine",
        "type": "string"
      }
    },
    "title": "Python",
    "type": "object"
  },
  {
    "type": "object",
    "title": "R",
    "properties": {
      "r.rpath.windows": {
        "type": "string",
        "default": "",
        "description": "Path to an R executable for Windows. Must be \"vanilla\" R, not radian etc.!"
      },
      "r.rpath.mac": {
        "type": "string",
        "default": "",
        "description": "Path to an R executable for macOS. Must be \"vanilla\" R, not radian etc.!"
      },
      "r.rpath.linux": {
        "type": "string",
        "default": "",
        "description": "Path to an R executable for Linux. Must be \"vanilla\" R, not radian etc.!"
      },
      "r.rterm.windows": {
        "type": "string",
        "default": "",
        "description": "R path for Windows. Can also be radian etc."
      },
      "r.rterm.mac": {
        "type": "string",
        "default": "",
        "description": "R path for macOS. Can also be radian etc."
      },
      "r.rterm.linux": {
        "type": "string",
        "default": "",
        "description": "R path for Linux. Can also be radian etc."
      },
      "r.rterm.option": {
        "type": "array",
        "default": [
          "--no-save",
          "--no-restore"
        ],
        "description": "R command line options.",
        "items": {
          "type": "string"
        }
      },
      "r.lsp.enabled": {
        "type": "boolean",
        "default": true,
        "description": "Enable the R language service to provide code analysis features (completion, signature, hover, diagnostics, definition, etc.)"
      },
      "r.lsp.args": {
        "type": "array",
        "default": [],
        "description": "The command line arguments to use when launching R Language Server"
      },
      "r.lsp.debug": {
        "type": "boolean",
        "default": false,
        "description": "Debug R Language Server"
      },
      "r.lsp.diagnostics": {
        "type": "boolean",
        "default": false,
        "description": "Enable Diagnostics"
      },
      "r.lsp.lang": {
        "type": "string",
        "default": "",
        "description": "Override default LANG environment variable"
      },
      "r.lsp.use_stdio": {
        "type": "boolean",
        "default": false,
        "description": "Use STDIO connection instead of TCP. (Unix/macOS users only)"
      },
      "r.rmarkdown.codeLensCommands": {
        "type": "array",
        "items": {
          "type": "string",
          "enum": [
            "r.selectCurrentChunk",
            "r.runCurrentChunk",
            "r.runAboveChunks",
            "r.runCurrentAndBelowChunks",
            "r.runBelowChunks",
            "r.runAllChunks",
            "r.runPreviousChunk",
            "r.runNextChunk",
            "r.goToPreviousChunk",
            "r.goToNextChunk"
          ]
        },
        "default": [
          "r.runCurrentChunk",
          "r.runAboveChunks"
        ],
        "description": "Customize RMarkdown CodeLens, which are inline commands/buttons e.g. 'Run Chunk' shown on the first line of each code chunk. \nCustomize both the commands AND its orders (that is, CodeLens respect user-specified orders):"
      },
      "r.rmarkdown.enableCodeLens": {
        "type": "boolean",
        "default": true,
        "description": "Enable RMarkdown CodeLens, which are inline commands/buttons e.g. 'Run Chunk | Run Above' shown on the first line of each code chunk.\n\n- Click the buttons to run commands.\n- Hover on the buttons to show tooltips.\n- CodeLens commands are customizable via settings UI (Rmarkdown: Code Lens commands) or settings.json `r.rmarkdown.codeLensCommands`"
      },
      "r.rmarkdown.chunkBackgroundColor": {
        "type": "string",
        "default": "rgba(128, 128, 128, 0.1)",
        "description": "RMarkdown chunk background color in RGBA or RGB value. Defaults to rgba(128, 128, 128, 0.1). Leave it empty to disable it (use default editor background color). Reload VS Code after changing settings.\n\nLearn how to set colors: https://www.w3schools.com/css/css_colors_rgb.asp.\n\nExamples for syntax rgba(<red>, <green>, <blue>, <alpha>):\nrgba(128, 128, 128, 0.1)\nrgba(128, 128, 128, 0.3)\nrgba(255, 165, 0, 0.1)\n\n"
      },
      "r.rmarkdown.preview.autoRefresh": {
        "type": "boolean",
        "default": true,
        "markdownDescription": "Enable automatic refresh of R Markdown preview on file update."
      },
      "r.rmarkdown.knit.useBackgroundProcess": {
        "type": "boolean",
        "default": true,
        "markdownDescription": "Should knitting occur in a background process (*smart knitting*), or should it be done in the current R terminal (*manual knitting*)? \n\n*Smart knitting* includes additional features, such as custom knit function detection, R Markdown site detection, progress bars, and the setting knit directory."
      },
      "r.rmarkdown.knit.focusOutputChannel": {
        "type": "boolean",
        "default": true,
        "markdownDescription": "Should the R Markdown output channel be focused when knitting?\n\nRequires `#r.rmarkdown.knit.useBackgroundProcess#` to be set to `true`."
      },
      "r.rmarkdown.knit.openOutputFile": {
        "type": "boolean",
        "default": false,
        "markdownDescription": "Should the output file be opened automatically when using knit?\n\nRequires `#r.rmarkdown.knit.useBackgroundProcess#` to be set to `true`."
      },
      "r.rmarkdown.knit.command": {
        "type": "string",
        "default": "rmarkdown::render",
        "markdownDescription": "Command used to knit a Rmd file if not specified by the frontmatter."
      },
      "r.rmarkdown.knit.defaults.knitWorkingDirectory": {
        "type": "string",
        "default": "document directory",
        "enum": [
          "document directory",
          "workspace root"
        ],
        "enumDescriptions": [
          "Use the document's directory as the knit directory",
          "Use the workspace root as the knit directory"
        ],
        "markdownDescription": "What working directory should R Markdown chunks be evaluated in? Default knit behaviour is to use the document's directory as root.\n\nRequires `#r.rmarkdown.knit.useBackgroundProcess#` to be set to `true`.",
        "additionalItems": false,
        "additionalProperties": false
      },
      "r.helpPanel.enableSyntaxHighlighting": {
        "type": "boolean",
        "default": true,
        "description": "Enable syntax highlighting in the help panel."
      },
      "r.helpPanel.cacheIndexFiles": {
        "type": "string",
        "enum": [
          "None",
          "Workspace",
          "Global"
        ],
        "description": "Whether/where to store parsed help indices between sessions.",
        "enumDescriptions": [
          "Do not store anything",
          "Store on a per workspace basis",
          "Store globally"
        ],
        "default": "None"
      },
      "r.helpPanel.rpath": {
        "type": "string",
        "default": "",
        "markdownDescription": "DEPRECATED! Path to an R executable. Must be \"vanilla\" R, not radian etc.! Will be read from registry or path if not set.",
        "markdownDeprecationMessage": "Will be deprecated. Use `#r.rpath.windows#`, `#r.rpath.mac#`, or `#r.rpath.linux#` instead.",
        "deprecationMessage": "Will be deprecated. Use r.rpath.windows, r.rpath.mac, or r.rpath.linux instead."
      },
      "r.helpPanel.enableHoverLinks": {
        "type": "boolean",
        "default": true,
        "markdownDescription": "Show links to matching help pages in hover"
      },
      "r.source.encoding": {
        "type": "string",
        "default": "UTF-8",
        "description": "An optional encoding to pass to R when executing the file, i.e. 'source(FILE, encoding=ENCODING)'."
      },
      "r.source.focus": {
        "type": "string",
        "default": "editor",
        "enum": [
          "editor",
          "terminal",
          "none"
        ],
        "description": "What to show/focus after running code. Set to 'editor' or 'terminal' to show the terminal. Set to 'none' to not show the terminal."
      },
      "r.alwaysUseActiveTerminal": {
        "type": "boolean",
        "default": false,
        "description": "Use active terminal for all commands, rather than creating a new R terminal."
      },
      "r.bracketedPaste": {
        "type": "boolean",
        "default": false,
        "description": "Use bracketed paste mode when sending code to console. Enable for Radian console."
      },
      "r.sessionWatcher": {
        "type": "boolean",
        "default": true,
        "description": "Enable R session watcher. Required for workspace viewer and most features to work with an R session. Restart required to take effect."
      },
      "r.session.watchGlobalEnvironment": {
        "type": "boolean",
        "default": true,
        "markdownDescription": "Watch the global environment to provide hover, autocompletions, and workspace viewer information. Changes the option `vsc.globalenv` in R. Requires `#r.sessionWatcher#` to be set to `true`."
      },
      "r.session.objectLengthLimit": {
        "type": "integer",
        "default": 2000,
        "markdownDescription": "The upper limit of object length to show object details in workspace viewer and provide session symbol completion. Decrease this value if you experience significant delay after executing R commands caused by large global objects with many elements. Changes the option `vsc.object_length_limit` in R. Requires `#r.sessionWatcher#` to be set to `true`."
      },
      "r.session.objectTimeout": {
        "type": "integer",
        "default": 50,
        "markdownDescription": "The maximum number of milliseconds to get information of a single object in the global environment. Decrease this value if you experience significant delay after executing R commands caused by large global objects with many elements. Changes the option `vsc.object_timeout` in R. Requires `#r.sessionWatcher#` to be set to `true`."
      },
      "r.session.levelOfObjectDetail": {
        "type": "string",
        "markdownDescription": "How much of the object to show on hover, autocompletion, and in the workspace viewer? Changes the option `vsc.str.max.level` in R. Requires `#r.sessionWatcher#` to be set to `true`.",
        "default": "Minimal",
        "enum": [
          "Minimal",
          "Normal",
          "Detailed"
        ],
        "enumDescriptions": [
          "Display literal values and object types only.",
          "Display the top level of list content, data frame column values, and example values.",
          "Display the top two levels of list content, data frame column values, and example values. This option may cause notable delay after each user input in the terminal."
        ]
      },
      "r.session.emulateRStudioAPI": {
        "type": "boolean",
        "default": true,
        "markdownDescription": "Emulate the RStudio API for addin support and other {rstudioapi} calls. Changes the option `vsc.rstudioapi` in R. Requires `#r.sessionWatcher#` to be set to `true`."
      },
      "r.session.viewers.viewColumn": {
        "type": "object",
        "markdownDescription": "Which view column should R-related webviews be displayed? Requires `#r.sessionWatcher#` to be set to `true`.",
        "default": {
          "plot": "Two",
          "browser": "Active",
          "viewer": "Two",
          "pageViewer": "Active",
          "view": "Two",
          "helpPanel": "Two"
        },
        "properties": {
          "plot": {
            "type": "string",
            "description": "Which view column to show the plot file on graphics update? \n\nChanges the option 'vsc.plot' in R.",
            "enum": [
              "Two",
              "Active",
              "Beside",
              "Disable"
            ],
            "enumDescriptions": [
              "Display plots in editor group 2.",
              "Display plots in the active editor.",
              "Display plots beside the active editor.",
              "Do not use the VSCode-R plot viewer."
            ],
            "default": "Two"
          },
          "browser": {
            "type": "string",
            "description": "Which view column to show the WebView triggered by browser (e.g. shiny apps)? \n\nChanges the option 'vsc.browser' in R.",
            "enum": [
              "Two",
              "Active",
              "Beside",
              "Disable"
            ],
            "enumDescriptions": [
              "Display browser in editor group 2.",
              "Display browser in the active editor.",
              "Display browser beside the active editor.",
              "Do not use the VSCode-R browser."
            ],
            "default": "Active"
          },
          "viewer": {
            "type": "string",
            "description": "Which view column to show the WebView triggered by viewer (e.g. htmlwidgets)? \n\nChanges the option 'vsc.viewer' in R.",
            "enum": [
              "Two",
              "Active",
              "Beside",
              "Disable"
            ],
            "enumDescriptions": [
              "Display viewer in editor group 2.",
              "Display viewer in the active editor.",
              "Display viewer beside the active editor.",
              "Do not use the VSCode-R viewer."
            ],
            "default": "Two"
          },
          "pageViewer": {
            "type": "string",
            "description": "Which view column to show the WebView triggered by the page viewer (e.g. profvis)? \n\nChanges the option 'vsc.page_viewer' in R.",
            "enum": [
              "Two",
              "Active",
              "Beside",
              "Disable"
            ],
            "enumDescriptions": [
              "Display page viewer in editor group 2.",
              "Display page viewer in the active editor.",
              "Display page viewer beside the active editor.",
              "Do not use the VSCode-R page viewer."
            ],
            "default": "Active"
          },
          "view": {
            "type": "string",
            "description": "Which view column to show the WebView triggered by View()? \n\nChanges the option 'vsc.plot' in R.",
            "enum": [
              "Two",
              "Active",
              "Beside",
              "Disable"
            ],
            "enumDescriptions": [
              "Display view output in editor group 2.",
              "Display view output in the active editor.",
              "Display view output beside the active editor.",
              "Do not use the VSCode-R view command."
            ],
            "default": "Two"
          },
          "helpPanel": {
            "type": "string",
            "description": "Which view column to show the WebView triggered by the help panel? \n\nChanges the option 'vsc.help_panel' in R.",
            "enum": [
              "Two",
              "Active",
              "Beside",
              "Disable"
            ],
            "enumDescriptions": [
              "Display help panel in editor group 2.",
              "Display help panel in the active editor.",
              "Display help panel beside the active editor.",
              "Do not use the VSCode-R help panel."
            ],
            "default": "Two"
          }
        },
        "additionalProperties": false
      },
      "r.rtermSendDelay": {
        "type": "integer",
        "default": 8,
        "description": "Delay in milliseconds before sending each line to rterm (only applies if r.bracketedPaste is false)"
      },
      "r.workspaceViewer.showObjectSize": {
        "type": "boolean",
        "default": false,
        "markdownDescription": "Show object size when hovering over a workspace viewer item. Changes the option `vsc.show_object_size` in R."
      },
      "r.workspaceViewer.removeHiddenItems": {
        "type": "boolean",
        "default": false,
        "description": "Remove hidden items when clearing workspace."
      },
      "r.workspaceViewer.clearPrompt": {
        "type": "boolean",
        "default": true,
        "description": "Prompt the user for confirmation when clearing the workspace."
      },
      "r.liveShare.timeout": {
        "type": "integer",
        "default": 10000,
        "description": "Time in milliseconds before aborting attempt to connect to Live Share API"
      },
      "r.liveShare.defaults.commandForward": {
        "type": "boolean",
        "default": false,
        "description": "Default boolean value for guest command forwarding."
      },
      "r.liveShare.defaults.shareWorkspace": {
        "type": "boolean",
        "default": true,
        "description": "Default boolean value for sharing the R workspace with guests."
      },
      "r.liveShare.defaults.shareBrowser": {
        "type": "boolean",
        "default": false,
        "description": "Default boolean value for automatically sharing R browser ports with guests."
      },
      "r.plot.useHttpgd": {
        "type": "boolean",
        "default": false,
        "markdownDescription": "Use the httpgd-based plot viewer instead of the base VSCode-R plot viewer. Changes the option `vsc.use_httpgd` in R."
      },
      "r.plot.defaults.colorTheme": {
        "type": "string",
        "default": "original",
        "enum": [
          "vscode",
          "original"
        ],
        "markdownEnumDescriptions": [
          "Match background and primary stroke color to the current color theme (Or apply custom CSS overwrites, if specified in `#r.plot.customStyleOverwrites#`)",
          "Use original colors"
        ],
        "markdownDescription": "Which color theme to use when launching the plot viewer."
      },
      "r.plot.defaults.plotPreviewLayout": {
        "type": "string",
        "default": "multirow",
        "enum": [
          "multirow",
          "scroll",
          "hidden"
        ],
        "enumDescriptions": [
          "Show in multiple rows",
          "Show scrollbar",
          "Don't show preview plots"
        ],
        "markdownDescription": "How to display plot previews if more than one row required."
      },
      "r.plot.defaults.fullWindowMode": {
        "type": "boolean",
        "default": false,
        "markdownDescription": "Whether to use full window mode when launching the plot viewer."
      },
      "r.plot.timing.resizeInterval": {
        "type": "number",
        "default": 100,
        "markdownDescription": "Interval in ms to wait between plot resizes."
      },
      "r.plot.timing.refreshInterval": {
        "type": "number",
        "default": 10,
        "markdownDescription": "Interval in ms to wait between plot refreshs."
      },
      "r.plot.customStyleOverwrites": {
        "type": "string",
        "default": "",
        "markdownDescription": "Path to a custom CSS file to be used when `#r.plot.defaults.colorTheme#` is `vscode`. Replaces the default CSS overwrites!"
      }
    }
  },
  {
    "type": "object",
    "description": "Groovy configuration",
    "properties": {
      "groovy.java.home": {
        "type": [
          "string",
          "null"
        ],
        "default": null,
        "description": "Specifies the folder path to the JDK. Use this setting if the extension cannot find Java automatically."
      },
      "groovy.classpath": {
        "type": "array",
        "default": null,
        "description": "Specifies additional entries to add to the classpath. May contain both folders and individual .jar files.",
        "items": {
          "type": "string"
        }
      }
    }
  }
]