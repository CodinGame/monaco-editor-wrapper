[
  {
    "title": "Vetur",
    "properties": {
      "vetur.ignoreProjectWarning": {
        "type": "boolean",
        "default": false,
        "description": "Vetur will warn about not setup correctly for the project. You can disable it.",
        "scope": 1
      },
      "vetur.useWorkspaceDependencies": {
        "type": "boolean",
        "default": false,
        "description": "Use dependencies from workspace. Support for TypeScript, Prettier, @starptech/prettyhtml, prettier-eslint, prettier-tslint, stylus-supremacy, @prettier/plugin-pug.",
        "scope": 1
      },
      "vetur.completion.autoImport": {
        "type": "boolean",
        "default": true,
        "description": "Include completion for module export and auto import them",
        "scope": 3
      },
      "vetur.completion.scaffoldSnippetSources": {
        "type": "object",
        "default": {
          "workspace": "üíº",
          "user": "üóíÔ∏è",
          "vetur": "‚úå"
        },
        "properties": {
          "workspace": {
            "type": "string",
            "default": "üíº",
            "description": "Show Scaffold Snippets from `<WORKSPACE>/.vscode/vetur/snippets`."
          },
          "user": {
            "type": "string",
            "default": "üóíÔ∏è",
            "description": "Show Scaffold Snippets from `<USER-DATA-DIR>/User/snippets/vetur`."
          },
          "vetur": {
            "type": "string",
            "default": "‚úå",
            "description": "Show Scaffold Snippets bundled in Vetur."
          }
        },
        "description": "Where Vetur source Scaffold Snippets from and how to indicate them. Set a source to \"\" to disable it.\n\n- workspace: `<WORKSPACE>/.vscode/vetur/snippets`.\n- user: `<USER-DATA-DIR>/User/snippets/vetur`.\n- vetur: Bundled in Vetur.\n\nThe default is:\n```\n\"vetur.completion.scaffoldSnippetSources\": {\n  \"workspace\": \"üíº\",\n  \"user\": \"üóíÔ∏è\",\n  \"vetur\": \"‚úå\"\n}\n```\n\nAlternatively, you can do:\n\n```\n\"vetur.completion.scaffoldSnippetSources\": {\n  \"workspace\": \"(W)\",\n  \"user\": \"(U)\",\n  \"vetur\": \"(V)\"\n}\n```\n\nRead more: https://vuejs.github.io/vetur/snippet.html.",
        "scope": 3
      },
      "vetur.completion.tagCasing": {
        "type": "string",
        "default": "kebab",
        "enum": [
          "initial",
          "kebab"
        ],
        "enumDescriptions": [
          "use the key in `components: {...}` as is for tag completion and do not force any casing",
          "kebab-case completion for <my-tag>"
        ],
        "description": "Casing conversion for tag completion",
        "scope": 3
      },
      "vetur.grammar.customBlocks": {
        "type": "object",
        "default": {
          "docs": "md",
          "i18n": "json"
        },
        "description": "Mapping from custom block tag name to language name. Used for generating grammar to support syntax highlighting for custom blocks.",
        "scope": 3
      },
      "vetur.validation.template": {
        "type": "boolean",
        "default": true,
        "description": "Validate vue-html in <template> using eslint-plugin-vue",
        "scope": 3
      },
      "vetur.validation.templateProps": {
        "type": "boolean",
        "default": false,
        "description": "Validate props usage in <template> region. Show error/warning for not passing declared props to child components and show error for passing wrongly typed interpolation expressions",
        "scope": 3
      },
      "vetur.validation.interpolation": {
        "type": "boolean",
        "default": true,
        "description": "Validate interpolations in <template> region using TypeScript language service",
        "scope": 3
      },
      "vetur.validation.style": {
        "type": "boolean",
        "default": true,
        "description": "Validate css/scss/less/postcss in <style>",
        "scope": 3
      },
      "vetur.validation.script": {
        "type": "boolean",
        "default": true,
        "description": "Validate js/ts in <script>",
        "scope": 3
      },
      "vetur.format.enable": {
        "type": "boolean",
        "default": true,
        "description": "Enable/disable the Vetur document formatter.",
        "scope": 3
      },
      "vetur.format.options.tabSize": {
        "type": "number",
        "default": 2,
        "description": "Number of spaces per indentation level. Inherited by all formatters.",
        "scope": 3
      },
      "vetur.format.options.useTabs": {
        "type": "boolean",
        "default": false,
        "description": "Use tabs for indentation. Inherited by all formatters.",
        "scope": 3
      },
      "vetur.format.defaultFormatter.html": {
        "type": "string",
        "default": "prettier",
        "enum": [
          "none",
          "prettyhtml",
          "js-beautify-html",
          "prettier"
        ],
        "enumDescriptions": [
          "disable formatting",
          "üöß [DEPRECATED] prettyhtml",
          "html formatter of js-beautify",
          "prettier"
        ],
        "description": "Default formatter for <template> region",
        "scope": 3
      },
      "vetur.format.defaultFormatter.pug": {
        "type": "string",
        "default": "prettier",
        "enum": [
          "none",
          "prettier"
        ],
        "enumDescriptions": [
          "disable formatting",
          "prettier"
        ],
        "description": "Default formatter for <template lang='pug'> region",
        "scope": 3
      },
      "vetur.format.defaultFormatter.css": {
        "type": "string",
        "default": "prettier",
        "enum": [
          "none",
          "prettier"
        ],
        "enumDescriptions": [
          "disable formatting",
          "css formatter using css parser from prettier"
        ],
        "description": "Default formatter for <style> region",
        "scope": 3
      },
      "vetur.format.defaultFormatter.postcss": {
        "type": "string",
        "default": "prettier",
        "enum": [
          "none",
          "prettier"
        ],
        "enumDescriptions": [
          "disable formatting",
          "postcss formatter using css parser from prettier"
        ],
        "description": "Default formatter for <style lang='postcss'> region",
        "scope": 3
      },
      "vetur.format.defaultFormatter.scss": {
        "type": "string",
        "default": "prettier",
        "enum": [
          "none",
          "prettier"
        ],
        "enumDescriptions": [
          "disable formatting",
          "scss formatter using scss parser from prettier"
        ],
        "description": "Default formatter for <style lang='scss'> region",
        "scope": 3
      },
      "vetur.format.defaultFormatter.sass": {
        "type": "string",
        "default": "sass-formatter",
        "enum": [
          "none",
          "sass-formatter"
        ],
        "enumDescriptions": [
          "disable formatting",
          "sass formatter"
        ],
        "description": "Default formatter for <style lang='sass'> region",
        "scope": 3
      },
      "vetur.format.defaultFormatter.less": {
        "type": "string",
        "default": "prettier",
        "enum": [
          "none",
          "prettier"
        ],
        "enumDescriptions": [
          "disable formatting",
          "less formatter using postcss parser from prettier"
        ],
        "description": "Default formatter for <style lang='less'> region",
        "scope": 3
      },
      "vetur.format.defaultFormatter.stylus": {
        "type": "string",
        "default": "stylus-supremacy",
        "enum": [
          "none",
          "stylus-supremacy"
        ],
        "enumDescriptions": [
          "disable formatting",
          "stylus formatter from stylus-supremacy"
        ],
        "description": "Default formatter for <style lang='stylus'> region",
        "scope": 3
      },
      "vetur.format.defaultFormatter.js": {
        "type": "string",
        "default": "prettier",
        "enum": [
          "none",
          "prettier",
          "prettier-eslint",
          "vscode-typescript"
        ],
        "enumDescriptions": [
          "disable formatting",
          "js formatter from prettier",
          "prettier-eslint",
          "js formatter from TypeScript"
        ],
        "description": "Default formatter for <script> region",
        "scope": 3
      },
      "vetur.format.defaultFormatter.ts": {
        "type": "string",
        "default": "prettier",
        "enum": [
          "none",
          "prettier",
          "prettier-tslint",
          "vscode-typescript"
        ],
        "enumDescriptions": [
          "disable formatting",
          "ts formatter using typescript parser from prettier",
          "ts formatter from TypeScript"
        ],
        "description": "Default formatter for <script> region",
        "scope": 3
      },
      "vetur.format.defaultFormatterOptions": {
        "type": "object",
        "properties": {
          "prettier": {
            "type": "object",
            "description": "Global prettier config used by prettier formatter. Used by `prettier` and `prettier-eslint`.\n\nVetur will prefer a prettier config file at home directory if one exists.",
            "properties": {}
          },
          "prettyhtml": {
            "type": "object",
            "description": "Options for prettyhtml",
            "properties": {
              "printWidth": {
                "type": "number",
                "default": 100,
                "description": "Maximum amount of characters allowed per line"
              },
              "singleQuote": {
                "type": "boolean",
                "default": false,
                "description": "Whether to use single quotes by default"
              },
              "wrapAttributes": {
                "type": "boolean",
                "default": false,
                "description": "Whether to wrap attributes"
              },
              "sortAttributes": {
                "type": "boolean",
                "default": false,
                "description": "Whether to sort attributes"
              }
            }
          },
          "js-beautify-html": {
            "type": "object",
            "description": "Options for js-beautify"
          }
        },
        "default": {
          "js-beautify-html": {
            "wrap_attributes": "force-expand-multiline"
          },
          "prettyhtml": {
            "printWidth": 100,
            "singleQuote": false,
            "wrapAttributes": false,
            "sortAttributes": false
          }
        },
        "description": "Options for all default formatters",
        "scope": 3
      },
      "vetur.format.styleInitialIndent": {
        "type": "boolean",
        "default": false,
        "description": "Whether to have initial indent for <style> region",
        "scope": 3
      },
      "vetur.format.scriptInitialIndent": {
        "type": "boolean",
        "default": false,
        "description": "Whether to have initial indent for <script> region",
        "scope": 3
      },
      "vetur.languageFeatures.codeActions": {
        "type": "boolean",
        "default": true,
        "description": "Whether to enable codeActions",
        "scope": 3
      },
      "vetur.languageFeatures.updateImportOnFileMove": {
        "type": "boolean",
        "default": true,
        "description": "Whether to automatic updating import path when rename or move a file",
        "scope": 3
      },
      "vetur.languageFeatures.semanticTokens": {
        "type": "boolean",
        "default": true,
        "description": "Whether to enable semantic highlighting. Currently only works for typescript",
        "scope": 3
      },
      "vetur.trace.server": {
        "type": "string",
        "enum": [
          "off",
          "messages",
          "verbose"
        ],
        "default": "off",
        "description": "Traces the communication between VS Code and Vue Language Server.",
        "scope": 3
      },
      "vetur.dev.vlsPath": {
        "type": "string",
        "description": "Path to vls for Vetur developers. There are two ways of using it. \n\n1. Clone vuejs/vetur from GitHub, build it and point it to the ABSOLUTE path of `/server`.\n2. `yarn global add vls` and point Vetur to the installed location (`yarn global dir` + node_modules/vls)",
        "scope": 2
      },
      "vetur.dev.vlsPort": {
        "type": "number",
        "description": "The port that VLS listens to. Can be used for attaching to the VLS Node process for debugging / profiling.",
        "default": -1,
        "scope": 3
      },
      "vetur.dev.logLevel": {
        "type": "string",
        "description": "Log level for VLS",
        "default": "INFO",
        "enum": [
          "INFO",
          "DEBUG"
        ],
        "enumDescriptions": [
          "Only log info messages. This is the default.",
          "Log info and debug messages."
        ],
        "scope": 3
      },
      "vetur.experimental.templateInterpolationService": {
        "type": "boolean",
        "default": false,
        "description": "Enable template interpolation service that offers hover / definition / references in Vue interpolations.",
        "scope": 3
      },
      "vetur.underline.refValue": {
        "type": "boolean",
        "default": true,
        "description": "Enable underline `.value` when using composition API.",
        "scope": 3
      }
    }
  }
]