[
  {
    "title": "D",
    "type": "object",
    "properties": {
      "d.servedPath": {
        "type": "string",
        "scope": 6,
        "default": "serve-d",
        "description": "Path of the serve-d executable. Path can be omitted if in $PATH or installed using code-d"
      },
      "d.stdlibPath": {
        "scope": 6,
        "oneOf": [
          {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "type": "string"
          }
        ],
        "defaultSnippets": [
          {
            "label": "Choose based on platform",
            "body": "auto"
          },
          {
            "label": "Linux Default",
            "body": [
              "/usr/include/dmd/druntime/import",
              "/usr/include/dmd/phobos"
            ]
          },
          {
            "label": "ArchLinux Default",
            "body": [
              "/usr/include/dlang/dmd"
            ]
          },
          {
            "label": "Windows Default",
            "body": [
              "C:\\D\\dmd2\\src\\druntime\\import",
              "C:\\D\\dmd2\\src\\phobos"
            ]
          },
          {
            "label": "OSX Default",
            "body": [
              "/Library/D/dmd/src/druntime/import",
              "/Library/D/dmd/src/phobos"
            ]
          }
        ],
        "description": "Array of paths to phobos and D runtime for automatic inclusion for auto completion"
      },
      "d.dcdClientPath": {
        "title": "DCD Client Path",
        "type": "string",
        "scope": 6,
        "default": "dcd-client",
        "description": "Path of the dcd-client executable. Path can be omitted if in $PATH or installed using code-d"
      },
      "d.dcdServerPath": {
        "title": "DCD Server Path",
        "type": "string",
        "scope": 6,
        "default": "dcd-server",
        "description": "Path of the dcd-server executable. Path can be omitted if in $PATH or installed using code-d"
      },
      "d.dubPath": {
        "type": "string",
        "scope": 6,
        "default": "dub",
        "description": "Path of the dub executable. Path can be omitted if in $PATH or installed using code-d"
      },
      "d.dmdPath": {
        "type": "string",
        "scope": 6,
        "default": "dmd",
        "description": "Path of the dmd executable. Path can be omitted if in $PATH"
      },
      "d.enableLinting": {
        "type": "boolean",
        "scope": 4,
        "default": true,
        "description": "If code-d should watch for file saves and report static analysis. Might interfere with other lint plugins or settings."
      },
      "d.enableSDLLinting": {
        "type": "boolean",
        "scope": 4,
        "default": true,
        "description": "If code-d should report errors in your dub.sdl file."
      },
      "d.enableDubLinting": {
        "type": "boolean",
        "scope": 4,
        "default": true,
        "description": "If code-d should build on save to check for compile errors."
      },
      "d.enableStaticLinting": {
        "type": "boolean",
        "scope": 4,
        "default": true,
        "description": "If code-d should use DScanner to statically lint files."
      },
      "d.enableAutoComplete": {
        "type": "boolean",
        "scope": 4,
        "default": true,
        "description": "Start dcd-server at startup and complete using dcd-client."
      },
      "d.enableFormatting": {
        "type": "boolean",
        "scope": 4,
        "default": true,
        "description": "If the default formatting keybind should call dfmt on D files."
      },
      "d.enableDMDImportTiming": {
        "type": "boolean",
        "scope": 4,
        "default": false,
        "description": "Add code lenses on import statements executing a dmd instance trying to compile that import statement to get the impact on compilation time by this import."
      },
      "d.enableCoverageDecoration": {
        "type": "boolean",
        "scope": 4,
        "default": true,
        "description": "Automatically highlight tested/untested coverage lines with light red/green backgrounds per line for *.lst files."
      },
      "d.enableGCProfilerDecorations": {
        "type": "boolean",
        "scope": 4,
        "default": true,
        "description": "Automatically embed code lenses for all GC allocations based on profilegc.log."
      },
      "d.neverUseDub": {
        "type": "boolean",
        "scope": 4,
        "default": false,
        "description": "If this is true then a custom workspace where you manually provide the import paths will always be used instead of DUB. See d.projectImportPaths for setting import paths then. This is discouraged as it will remove most features like packages, building & compiler linting. If this is a standalone project with no external dependencies with a custom build system then this should be true."
      },
      "d.projectImportPaths": {
        "type": "array",
        "scope": 4,
        "items": {
          "type": "string"
        },
        "default": [],
        "description": "Setting for import paths in your workspace if not using DUB. This will replace other paths. Its recommended to set this in your workspace settings instead of your user settings to keep it separate for each project."
      },
      "d.dubConfiguration": {
        "type": "string",
        "scope": 4,
        "description": "Sets the default configuration to use when starting up"
      },
      "d.dubArchType": {
        "type": "string",
        "scope": 4,
        "description": "Sets the default arch type to use when starting up"
      },
      "d.dubBuildType": {
        "type": "string",
        "scope": 4,
        "description": "Sets the default build type to use when starting up"
      },
      "d.dubCompiler": {
        "type": "string",
        "scope": 4,
        "description": "Sets the default compiler to use when starting up"
      },
      "d.overrideDfmtEditorconfig": {
        "type": "boolean",
        "scope": 4,
        "default": true,
        "description": "Uses dfmt config options & vscode editor config instead of .editorconfig because of inconsistencies with the vscode editor settings."
      },
      "d.aggressiveUpdate": {
        "type": "boolean",
        "scope": 1,
        "default": true,
        "description": "Update/install outdated & missing tools without confirmation"
      },
      "d.argumentSnippets": {
        "type": "boolean",
        "scope": 4,
        "default": false,
        "description": "When autocompleting functions automatically insert the signature as snippet which can be navigated using tab."
      },
      "d.betaStream": {
        "type": "boolean",
        "scope": 1,
        "deprecationMessage": "This option has been replaced with \"d.servedReleaseChannel\":\"nightly\"",
        "default": false,
        "description": "Always get latest serve-d commit when starting vscode and an update is available."
      },
      "d.servedReleaseChannel": {
        "type": "string",
        "scope": 1,
        "default": "stable",
        "enum": [
          "stable",
          "beta",
          "nightly",
          "frozen"
        ],
        "enumDescriptions": [
          "Always fetch the latest pre-compiled stable release binaries from the serve-d GitHub repository",
          "Always fetch the latest pre-compiled potentially unstable pre-release binaries from the serve-d GitHub repository",
          "Always fetch the latest pre-compiled nightly binaries from the serve-d GitHub repository. These are being generated every night (UTC) if something changed and tests passed.",
          "Don't do any update checks for serve-d (not recommended if you don't update serve-d outside code-d)"
        ],
        "description": "Release channel (stable, beta, nightly) to automatically download serve-d binaries from. serve-d is the D language server used with code-d and provides all language functionality except syntax highlighting, which is provided by code-d."
      },
      "d.smartServedUpdates": {
        "type": "boolean",
        "scope": 1,
        "default": true,
        "description": "Randomly omits serve-d update checks to save bandwidth, lower startup delay and minimize breakage on new releases with quick fixes. Also avoids to update when working on fridays."
      },
      "d.scanAllFolders": {
        "type": "boolean",
        "scope": 4,
        "default": true,
        "description": "Initialize an instance for every dub.sdl and dub.json file in all folders."
      },
      "d.disabledRootGlobs": {
        "type": "array",
        "scope": 4,
        "items": {
          "type": "string"
        },
        "default": [],
        "description": "Array of globs for disabling/preventing project instances by the d.scanAllFolders setting."
      },
      "d.extraRoots": {
        "type": "array",
        "scope": 4,
        "items": {
          "type": "string"
        },
        "default": [],
        "description": "Array of workspace-relative (or absolute) folders to force start a project instance in."
      },
      "d.alwaysShowDubStatusButtons": {
        "type": "boolean",
        "scope": 4,
        "default": false,
        "description": "Switch to always show DUB Configuration/Arch Type/Build Type/Compiler buttons in DUB projects and not just when a D file is open."
      },
      "d.alwaysShowCoverageStatus": {
        "type": "boolean",
        "scope": 4,
        "default": false,
        "description": "Switch to always show coverage status when available through lst files and not just when a D file is open."
      },
      "d.manyProjectsAction": {
        "type": "string",
        "scope": 4,
        "default": "ask",
        "enum": [
          "ask",
          "skip",
          "load"
        ],
        "enumDescriptions": [
          "Open a dialog box each time there are too many projects. (recommended for user-settings)",
          "Never load any more projects than the d.manyProjectsThreshold setting specified. (this or \"load\" recommended only per-project)",
          "Load all projects even if there are more than the d.manyProjectsThreshold setting specified. (this or \"skip\" recommended only per-project; never recommended for user-settings or large projects with many DUB test projects)"
        ],
        "description": "What to do when there are too many project roots to load from. The deepest folder paths are skipped for skip."
      },
      "d.manyProjectsThreshold": {
        "type": "number",
        "scope": 4,
        "default": 4,
        "minimum": 0,
        "description": "For how many projects to start triggering the manyProjectsAction to load or not load further projects."
      },
      "d.ignoreDebugHints": {
        "type": "boolean",
        "scope": 3,
        "default": false,
        "description": "If true, no hints will be shown when a project may be wrongly configured when trying to start debugging."
      },
      "d.lintOnFileOpen": {
        "type": "string",
        "scope": 4,
        "default": "project",
        "enum": [
          "always",
          "project",
          "never"
        ],
        "enumDescriptions": [
          "D-Scanner runs on every file that is opened immediately, also for any internal cross-project or external dependencies.",
          "D-Scanner runs on every file only in the current project that is opened immediately. It then only starts on other files when changing something.",
          "D-Scanner never runs when opening a file and only starts running when changing something."
        ],
        "description": "Enables dscanner linting when opening a new file."
      },
      "d.dietContextCompletion": {
        "type": "boolean",
        "scope": 4,
        "default": false,
        "description": "Enables parsing of //-context= in diet files to import local variables shared with the opened diet template."
      },
      "d.generateModuleNames": {
        "type": "boolean",
        "scope": 4,
        "default": true,
        "description": "Automatically insert/replace the module name definition in the current file when creating or renaming a file."
      },
      "d.showUpdateChangelogs": {
        "type": "boolean",
        "scope": 1,
        "default": true,
        "description": "Open CHANGELOG.md on every code-d update (which also includes serve-d updates) to see new features."
      },
      "d.dependencyClickBehavior": {
        "type": "string",
        "scope": 3,
        "enum": [
          "listDocumentsPreview",
          "listDocumentsSource",
          "listDocumentsBoth",
          "openRecipe",
          "openDpldocs",
          "doNothing",
          "openFileDialog"
        ],
        "enumDescriptions": [
          "Preview a readable document text file of the package",
          "See source of a readable document text file of the package",
          "Preview or view source of a readable document text file of the package",
          "Open dub.json/dub.sdl file of the package",
          "Open package on dpldocs.info in a web browser",
          "Do nothing",
          "Open a file dialog in the dependency folder"
        ],
        "default": "listDocumentsPreview",
        "description": "Configures what happens when you click a dependency in the DUB Dependency view. For the listDocuments actions if only a single file matches, it is immediately opened. See 'd.dependencyTextDocumentFilter' setting to configure which files will be shown."
      },
      "d.dependencyTextDocumentFilter": {
        "type": "array",
        "scope": 3,
        "items": {
          "type": "string"
        },
        "default": [
          "^README",
          "^CHANGES",
          "^CHANGELOG",
          "^LICENSE"
        ],
        "description": "Filenames that are considered readable documents for when viewing documents of a DUB dependency. You can use regular expressions, but it only matches on the filename (including extension) not on the path, case-insensitive."
      },
      "dfmt.alignSwitchStatements": {
        "type": "boolean",
        "scope": 4,
        "default": true,
        "description": "Align labels, cases, and defaults with their enclosing switch."
      },
      "dfmt.braceStyle": {
        "type": "string",
        "scope": 4,
        "enum": [
          "allman",
          "otbs",
          "stroustrup",
          "knr"
        ],
        "enumDescriptions": [
          "Curly braces always on separate lines",
          "Curly braces on the same line as for example if or while statements. Else on same line as closing curly brace.",
          "Curly braces on the same line as for example if or while statements, but a new line after the closing curly brace, even if there is an else",
          "Curly braces on the same line for everything except functions"
        ],
        "default": "allman",
        "description": "See Wikipedia https://en.wikipedia.org/wiki/Brace_style"
      },
      "dfmt.outdentAttributes": {
        "type": "boolean",
        "scope": 4,
        "default": true,
        "description": "Not yet implemented (on dfmt side)"
      },
      "dfmt.spaceAfterCast": {
        "type": "boolean",
        "scope": 4,
        "default": true,
        "description": "Insert space after the closing paren of a cast expression."
      },
      "dfmt.splitOperatorAtLineEnd": {
        "type": "boolean",
        "scope": 4,
        "default": false,
        "description": "Place operators on the end of the previous line when splitting lines."
      },
      "dfmt.selectiveImportSpace": {
        "type": "boolean",
        "scope": 4,
        "default": true,
        "description": "Insert space after the module name and before the : for selective imports."
      },
      "dfmt.compactLabeledStatements": {
        "type": "boolean",
        "scope": 4,
        "default": true,
        "description": "Place labels on the same line as the labeled switch, for, foreach, or while statement."
      },
      "dfmt.templateConstraintStyle": {
        "type": "string",
        "scope": 4,
        "enum": [
          "conditional_newline_indent",
          "conditional_newline",
          "always_newline",
          "always_newline_indent"
        ],
        "enumDescriptions": [
          "newline only if constraint will wrap, indent constraint",
          "newline only if constraint will wrap",
          "always add newline",
          "always add newline and indent the constraint"
        ],
        "default": "conditional_newline_indent",
        "description": "Control the formatting of template constraints. See https://github.com/dlang-community/dfmt/issues/215"
      },
      "dfmt.spaceBeforeFunctionParameters": {
        "type": "boolean",
        "scope": 4,
        "default": false,
        "description": "Insert space before the opening paren of a function parameter list."
      },
      "dfmt.singleTemplateConstraintIndent": {
        "type": "boolean",
        "scope": 4,
        "default": false,
        "description": "Set if the constraints are indented by a single tab instead of two. Has only an effect if the style set to `always_newline_indent` or `conditional_newline_indent`."
      },
      "dfmt.spaceBeforeAAColon": {
        "type": "boolean",
        "scope": 4,
        "default": false,
        "description": "Adds a space after an associative array key before the `:` like in older dfmt versions."
      },
      "dfmt.keepLineBreaks": {
        "type": "boolean",
        "scope": 4,
        "default": true,
        "description": "Keep existing line breaks if these don't violate other formatting rules."
      },
      "dfmt.singleIndent": {
        "type": "boolean",
        "scope": 4,
        "default": true,
        "description": "Set if the code in parens is indented by a single tab instead of two."
      },
      "dscanner.ignoredKeys": {
        "type": "array",
        "scope": 4,
        "items": {
          "type": "string",
          "enum": [
            "dscanner.bugs.backwards_slices",
            "dscanner.bugs.if_else_same",
            "dscanner.bugs.logic_operator_operands",
            "dscanner.bugs.self_assignment",
            "dscanner.confusing.argument_parameter_mismatch",
            "dscanner.confusing.brexp",
            "dscanner.confusing.builtin_property_names",
            "dscanner.confusing.constructor_args",
            "dscanner.confusing.function_attributes",
            "dscanner.confusing.lambda_returns_lambda",
            "dscanner.confusing.logical_precedence",
            "dscanner.confusing.struct_constructor_default_args",
            "dscanner.deprecated.delete_keyword",
            "dscanner.deprecated.floating_point_operators",
            "dscanner.if_statement",
            "dscanner.performance.enum_array_literal",
            "dscanner.style.allman",
            "dscanner.style.alias_syntax",
            "dscanner.style.doc_missing_params",
            "dscanner.style.doc_missing_returns",
            "dscanner.style.doc_non_existing_params",
            "dscanner.style.explicitly_annotated_unittest",
            "dscanner.style.has_public_example",
            "dscanner.style.imports_sortedness",
            "dscanner.style.long_line",
            "dscanner.style.number_literals",
            "dscanner.style.phobos_naming_convention",
            "dscanner.style.undocumented_declaration",
            "dscanner.suspicious.auto_ref_assignment",
            "dscanner.suspicious.catch_em_all",
            "dscanner.suspicious.comma_expression",
            "dscanner.suspicious.incomplete_operator_overloading",
            "dscanner.suspicious.incorrect_infinite_range",
            "dscanner.suspicious.label_var_same_name",
            "dscanner.suspicious.length_subtraction",
            "dscanner.suspicious.local_imports",
            "dscanner.suspicious.missing_return",
            "dscanner.suspicious.object_const",
            "dscanner.suspicious.redundant_attributes",
            "dscanner.suspicious.redundant_parens",
            "dscanner.suspicious.static_if_else",
            "dscanner.suspicious.unmodified",
            "dscanner.suspicious.unused_label",
            "dscanner.suspicious.unused_parameter",
            "dscanner.suspicious.unused_variable",
            "dscanner.suspicious.useless_assert",
            "dscanner.unnecessary.duplicate_attribute",
            "dscanner.useless.final",
            "dscanner.useless-initializer",
            "dscanner.vcall_ctor",
            "dscanner.syntax"
          ]
        },
        "description": "DScanner warnings to ignore in this project."
      }
    }
  }
]