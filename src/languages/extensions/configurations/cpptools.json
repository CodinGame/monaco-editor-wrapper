[
  {
    "type": "object",
    "title": "C/C++",
    "properties": {
      "C_Cpp.maxConcurrentThreads": {
        "type": [
          "integer",
          "null"
        ],
        "markdownDescription": "The maximum number of concurrent threads to use for language service processing. The value is a hint and may not always be used. The default of `null` (empty) uses the number of logical processors available.",
        "default": null,
        "minimum": 1,
        "maximum": 32,
        "scope": 2
      },
      "C_Cpp.maxCachedProcesses": {
        "type": [
          "integer",
          "null"
        ],
        "markdownDescription": "The maximum number of cached processes to use for language service processing. The default of `null` (empty) uses twice the number of logical processors available.",
        "default": null,
        "minimum": 0,
        "maximum": 256,
        "scope": 2
      },
      "C_Cpp.maxMemory": {
        "type": [
          "integer",
          "null"
        ],
        "markdownDescription": "The maximum memory (in MB) available for language service processing. Fewer processes will be cached and run concurrently after this memory usage is exceeded. The default of `null` (empty) uses the system's free memory.",
        "default": null,
        "minimum": 256,
        "maximum": 65536,
        "scope": 2
      },
      "C_Cpp.intelliSense.maxCachedProcesses": {
        "type": [
          "integer",
          "null"
        ],
        "markdownDescription": "The maximum number of IntelliSense processes to keep running. The default of `null` (empty) uses value inherited from `#C_Cpp.maxCachedProcesses#`.",
        "default": null,
        "minimum": 2,
        "maximum": 128,
        "scope": 2
      },
      "C_Cpp.intelliSense.maxMemory": {
        "type": [
          "integer",
          "null"
        ],
        "markdownDescription": "Older IntelliSense processes will shut down before new processes are created after this memory usage (in MB) is exceeded. The default of `null` (empty) uses the value inherited from `#C_Cpp.maxMemory#`.",
        "default": null,
        "minimum": 256,
        "maximum": 65536,
        "scope": 2
      },
      "C_Cpp.references.maxConcurrentThreads": {
        "type": [
          "integer",
          "null"
        ],
        "markdownDescription": "The maximum number of concurrent threads to use for 'Find All References' and 'Rename'. The default of `null` (empty) uses the value inherited from `#C_Cpp.maxConcurrentThreads#`.",
        "default": null,
        "minimum": 1,
        "maximum": 32,
        "scope": 2
      },
      "C_Cpp.references.maxCachedProcesses": {
        "type": [
          "integer",
          "null"
        ],
        "markdownDescription": "The maximum number of processes to keep in memory for 'Find All References' and 'Rename'. The default of `0` disables this feature. The value of `null` (empty) uses the value inherited from `#C_Cpp.maxCachedProcesses#`.",
        "default": 0,
        "minimum": 0,
        "maximum": 32,
        "scope": 2
      },
      "C_Cpp.references.maxMemory": {
        "type": [
          "integer",
          "null"
        ],
        "markdownDescription": "Fewer 'Find All References' and 'Rename' processes will be cached and run concurrently after this memory usage (in MB) is exceeded. The default of `null` (empty) uses the value inherited from `#C_Cpp.maxMemory#`.",
        "default": null,
        "minimum": 256,
        "maximum": 65536,
        "scope": 2
      },
      "C_Cpp.codeAnalysis.maxConcurrentThreads": {
        "type": [
          "integer",
          "null"
        ],
        "markdownDescription": "The maximum number of concurrent threads to use for code analysis. The default of `null` (empty) uses half the value inherited from `#C_Cpp.maxConcurrentThreads#`.",
        "default": null,
        "minimum": 1,
        "maximum": 32,
        "scope": 2
      },
      "C_Cpp.codeAnalysis.maxMemory": {
        "type": [
          "integer",
          "null"
        ],
        "markdownDescription": "Fewer code analysis processes will run concurrently after this memory usage (in MB) is exceeded. The default of `null` (empty) uses the value inherited from `#C_Cpp.maxMemory#`.",
        "default": null,
        "minimum": 256,
        "maximum": 65536,
        "scope": 2
      },
      "C_Cpp.codeAnalysis.updateDelay": {
        "type": "number",
        "default": 2000,
        "markdownDescription": "Controls the delay in milliseconds before code analysis starts processing after a save is triggered from an edit when `#files.autoSave#` is `afterDelay` and `#C_Cpp.codeAnalysis.runAutomatically#` is `true`.",
        "scope": 1,
        "minimum": 0,
        "maximum": 6000
      },
      "C_Cpp.codeAnalysis.exclude": {
        "type": "object",
        "markdownDescription": "Configure glob patterns for excluding folders and files for code analysis. Files not under the workspace folder are always excluded. Inherits values from `#files.exclude#` and `#C_Cpp.files.exclude#`. Read more about glob patterns [here](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options).",
        "default": {},
        "additionalProperties": {
          "anyOf": [
            {
              "type": "boolean",
              "markdownDescription": "The glob pattern to match file paths against. Set to `true` or `false` to enable or disable the pattern."
            },
            {
              "type": "object",
              "properties": {
                "when": {
                  "type": "string",
                  "pattern": "\\w*\\$\\(basename\\)\\w*",
                  "default": "$(basename).ext",
                  "markdownDescription": "Additional check on the siblings of a matching file. Use `$(basename)` as variable for the matching file name."
                }
              }
            }
          ]
        },
        "scope": 4
      },
      "C_Cpp.codeAnalysis.clangTidy.codeAction.showClear": {
        "type": "string",
        "description": "Controls which 'Clear' code analysis problem code action options are available. Changing the setting to show more options may require re-running code analysis.",
        "enum": [
          "None",
          "AllOnly",
          "AllAndAllType",
          "AllAndAllTypeAndThis"
        ],
        "enumDescriptions": [
          "Show no 'Clear' code actions.",
          "Show only the 'Clear all' code action (or 'Clear all <type>' if there is only one type or 'Clear this' if there is only one problem).",
          "Show the 'Clear all' code action (if there are multiple problem types) and the 'Clear all <type>' code action (or 'Clear this' if there is only one problem for the <type>)",
          "Show the 'Clear all' (if there are multiple problem types), 'Clear all <type>' (if there are multiple problems for the <type>), and 'Clear this' code actions"
        ],
        "default": "AllAndAllTypeAndThis",
        "scope": 1
      },
      "C_Cpp.codeAnalysis.clangTidy.codeAction.showDisable": {
        "type": "boolean",
        "markdownDescription": "If `true`, the 'Disable' code action will be shown when available (the next time code analysis is run). When the 'Disable' code action is used, it adds the warning code to the `C_Cpp.codeAnalysis.clangTidy.checks.disabled` setting.",
        "default": true,
        "scope": 1
      },
      "C_Cpp.codeAnalysis.clangTidy.codeAction.showDocumentation": {
        "type": "boolean",
        "markdownDescription": "If `true`, the 'Show Documentation for' code action will be shown when available (the next time code analysis is run).",
        "default": true,
        "scope": 1
      },
      "C_Cpp.codeAnalysis.runAutomatically": {
        "type": "boolean",
        "markdownDescription": "If `true`, code analysis will run automatically on a file after it is opened or saved.",
        "default": true,
        "scope": 4
      },
      "C_Cpp.codeAnalysis.clangTidy.enabled": {
        "type": "boolean",
        "default": false,
        "markdownDescription": "If `true`, code analysis using `clang-tidy` will be enabled and run automatically if `#C_Cpp.codeAnalysis.runAutomatically#` is `true` (the default).",
        "scope": 4
      },
      "C_Cpp.codeAnalysis.clangTidy.path": {
        "type": "string",
        "markdownDescription": "The full path of the `clang-tidy` executable. If not specified, and `clang-tidy` is available in the environment path, that is used. If not found in the environment path, the `clang-tidy` bundled with the extension will be used.",
        "scope": 6
      },
      "C_Cpp.codeAnalysis.clangTidy.config": {
        "type": "string",
        "markdownDescription": "Specifies a `clang-tidy` configuration in YAML/JSON format: `{Checks: '-*,clang-analyzer-*', CheckOptions: [{key: x, value: y}]}`. When the value is empty, `clang-tidy` will attempt to find a file named `.clang-tidy` for each source file in its parent directories.",
        "scope": 4
      },
      "C_Cpp.codeAnalysis.clangTidy.fallbackConfig": {
        "type": "string",
        "markdownDescription": "Specifies a `clang-tidy` configuration in YAML/JSON format to be used as a fallback when `#C_Cpp.codeAnalysis.clangTidy.config#` is not set and no `.clang-tidy` file is found: `{Checks: '-*,clang-analyzer-*', CheckOptions: [{key: x, value: y}]}`.",
        "scope": 4
      },
      "C_Cpp.codeAnalysis.clangTidy.headerFilter": {
        "type": [
          "string",
          "null"
        ],
        "default": null,
        "markdownDescription": "A POSIX extended regular expression (ERE) matching the names of the headers to output diagnostics from. Diagnostics from the main file of each translation unit are always displayed. The `${workspaceFolder}` variable is supported (and is used as the default fallback value if no `.clang-tidy` file exists). If this option is not `null` (empty), it overrides the `HeaderFilterRegex` option in a `.clang-tidy` file, if any.",
        "scope": 4
      },
      "C_Cpp.codeAnalysis.clangTidy.args": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "markdownDescription": "Additional command line arguments to pass to `clang-tidy`. These take precedence over the equivalent `C_Cpp.codeAnalysis.clangTidy.*` settings.",
        "scope": 4
      },
      "C_Cpp.codeAnalysis.clangTidy.useBuildPath": {
        "type": "boolean",
        "default": false,
        "markdownDescription": "If `true` and `compileCommands` is set, the `-p=<build-path>` argument is passed to `clang-tidy` instead of build arguments being passed after `--`. This may not work if environment variables aren't set so that system includes can be found.",
        "scope": 4
      },
      "C_Cpp.codeAnalysis.clangTidy.checks.enabled": {
        "type": "array",
        "items": {
          "type": "string",
          "enum": [
            "*",
            "abseil-*",
            "abseil-cleanup-ctad",
            "abseil-duration-*",
            "abseil-duration-addition",
            "abseil-duration-comparison",
            "abseil-duration-conversion-cast",
            "abseil-duration-division",
            "abseil-duration-factory-*",
            "abseil-duration-factory-float",
            "abseil-duration-factory-scale",
            "abseil-duration-subtraction",
            "abseil-duration-unnecessary-conversion",
            "abseil-faster-strsplit-delimiter",
            "abseil-no-*",
            "abseil-no-internal-dependencies",
            "abseil-no-namespace",
            "abseil-redundant-strcat-calls",
            "abseil-str-cat-append",
            "abseil-string-find-*",
            "abseil-string-find-startswith",
            "abseil-string-find-str-contains",
            "abseil-time-*",
            "abseil-time-comparison",
            "abseil-time-subtraction",
            "abseil-upgrade-duration-conversions",
            "altera-*",
            "altera-id-dependent-backward-branch",
            "altera-kernel-name-restriction",
            "altera-single-work-item-barrier",
            "altera-struct-pack-align",
            "altera-unroll-loops",
            "android-*",
            "android-cloexec-*",
            "android-cloexec-accept",
            "android-cloexec-accept4",
            "android-cloexec-creat",
            "android-cloexec-dup",
            "android-cloexec-epoll-*",
            "android-cloexec-epoll-create",
            "android-cloexec-epoll-create1",
            "android-cloexec-fopen",
            "android-cloexec-inotify-*",
            "android-cloexec-inotify-init",
            "android-cloexec-inotify-init1",
            "android-cloexec-memfd-create",
            "android-cloexec-open",
            "android-cloexec-pipe",
            "android-cloexec-pipe2",
            "android-cloexec-socket",
            "android-comparison-in-temp-failure-retry",
            "boost-use-to-string",
            "bugprone-*",
            "bugprone-argument-comment",
            "bugprone-assert-side-effect",
            "bugprone-bad-signal-to-kill-thread",
            "bugprone-bool-pointer-implicit-conversion",
            "bugprone-branch-clone",
            "bugprone-copy-constructor-init",
            "bugprone-dangling-handle",
            "bugprone-dynamic-static-initializers",
            "bugprone-easily-swappable-parameters",
            "bugprone-exception-escape",
            "bugprone-fold-init-type",
            "bugprone-forward-declaration-namespace",
            "bugprone-forwarding-reference-overload",
            "bugprone-implicit-widening-of-multiplication-result",
            "bugprone-inaccurate-erase",
            "bugprone-incorrect-roundings",
            "bugprone-infinite-loop",
            "bugprone-integer-division",
            "bugprone-lambda-function-name",
            "bugprone-macro-parentheses",
            "bugprone-macro-repeated-side-effects",
            "bugprone-misplaced-*",
            "bugprone-misplaced-operator-in-strlen-in-alloc",
            "bugprone-misplaced-pointer-arithmetic-in-alloc",
            "bugprone-misplaced-widening-cast",
            "bugprone-move-forwarding-reference",
            "bugprone-multiple-statement-macro",
            "bugprone-narrowing-conversions",
            "bugprone-no-escape",
            "bugprone-not-null-terminated-result",
            "bugprone-parent-virtual-call",
            "bugprone-posix-return",
            "bugprone-redundant-branch-condition",
            "bugprone-reserved-identifier",
            "bugprone-signal-handler",
            "bugprone-signed-char-misuse",
            "bugprone-sizeof-*",
            "bugprone-sizeof-container",
            "bugprone-sizeof-expression",
            "bugprone-spuriously-wake-up-functions",
            "bugprone-string-*",
            "bugprone-string-constructor",
            "bugprone-string-integer-assignment",
            "bugprone-string-literal-with-embedded-nul",
            "bugprone-stringview-nullptr",
            "bugprone-suspicious-*",
            "bugprone-suspicious-enum-usage",
            "bugprone-suspicious-include",
            "bugprone-suspicious-memory-comparison",
            "bugprone-suspicious-memset-usage",
            "bugprone-suspicious-missing-comma",
            "bugprone-suspicious-semicolon",
            "bugprone-suspicious-string-compare",
            "bugprone-swapped-arguments",
            "bugprone-terminating-continue",
            "bugprone-throw-keyword-missing",
            "bugprone-too-small-loop-variable",
            "bugprone-undefined-memory-manipulation",
            "bugprone-undelegated-constructor",
            "bugprone-unhandled-*",
            "bugprone-unhandled-exception-at-new",
            "bugprone-unhandled-self-assignment",
            "bugprone-unused-raii",
            "bugprone-unused-return-value",
            "bugprone-use-after-move",
            "bugprone-virtual-near-miss",
            "cert-*",
            "cert-con*",
            "cert-con36-c",
            "cert-con54-cpp",
            "cert-dcl*",
            "cert-dcl03-c",
            "cert-dcl16-c",
            "cert-dcl21-cpp",
            "cert-dcl37-c",
            "cert-dcl50-cpp",
            "cert-dcl51-cpp",
            "cert-dcl54-cpp",
            "cert-dcl58-cpp",
            "cert-dcl59-cpp",
            "cert-env33-c",
            "cert-err*",
            "cert-err09-cpp",
            "cert-err33-c",
            "cert-err34-c",
            "cert-err52-cpp",
            "cert-err58-cpp",
            "cert-err60-cpp",
            "cert-err61-cpp",
            "cert-exp42-c",
            "cert-fio38-c",
            "cert-flp*",
            "cert-flp30-c",
            "cert-flp37-c",
            "cert-mem57-cpp",
            "cert-msc*",
            "cert-msc30-c",
            "cert-msc32-c",
            "cert-msc50-cpp",
            "cert-msc51-cpp",
            "cert-oop*",
            "cert-oop11-cpp",
            "cert-oop54-cpp",
            "cert-oop57-cpp",
            "cert-oop58-cpp",
            "cert-pos*",
            "cert-pos44-c",
            "cert-pos47-c",
            "cert-sig30-c",
            "cert-str34-c",
            "clang-analyzer-*",
            "clang-analyzer-core.*",
            "clang-analyzer-core.CallAndMessage",
            "clang-analyzer-core.DivideZero",
            "clang-analyzer-core.DynamicTypePropagation",
            "clang-analyzer-core.NonNullParamChecker",
            "clang-analyzer-core.NullDereference",
            "clang-analyzer-core.StackAddressEscape",
            "clang-analyzer-core.UndefinedBinaryOperatorResult",
            "clang-analyzer-core.uninitialized.*",
            "clang-analyzer-core.uninitialized.ArraySubscript",
            "clang-analyzer-core.uninitialized.Assign",
            "clang-analyzer-core.uninitialized.Branch",
            "clang-analyzer-core.uninitialized.CapturedBlockVariable",
            "clang-analyzer-core.uninitialized.UndefReturn",
            "clang-analyzer-core.VLASize",
            "clang-analyzer-cplusplus.*",
            "clang-analyzer-cplusplus.InnerPointer",
            "clang-analyzer-cplusplus.Move",
            "clang-analyzer-cplusplus.NewDelete",
            "clang-analyzer-cplusplus.NewDeleteLeaks",
            "clang-analyzer-deadcode.DeadStores",
            "clang-analyzer-nullablity.*",
            "clang-analyzer-nullability.NullabilityBase",
            "clang-analyzer-nullability.NullableDereferenced",
            "clang-analyzer-nullability.NullablePassedToNonnull",
            "clang-analyzer-nullability.NullableReturnedFromNonnull",
            "clang-analyzer-nullability.NullPassedToNonnull",
            "clang-analyzer-nullability.NullReturnedFromNonnull",
            "clang-analyzer-optin.*",
            "clang-analyzer-optin.cplusplus.*",
            "clang-analyzer-optin.cplusplus.UninitializedObject",
            "clang-analyzer-optin.cplusplus.VirtualCall",
            "clang-analyzer-optin.mpi.MPI-Checker",
            "clang-analyzer-optin.osx.*",
            "clang-analyzer-optin.osx.cocoa.localizability.*",
            "clang-analyzer-optin.osx.cocoa.localizability.EmptyLocalizationContextChecker",
            "clang-analyzer-optin.osx.cocoa.localizability.NonLocalizedStringChecker",
            "clang-analyzer-optin.osx.OSObjectCStyleCast",
            "clang-analyzer-optin.performance.*",
            "clang-analyzer-optin.performance.GCDAntipattern",
            "clang-analyzer-optin.performance.Padding",
            "clang-analyzer-optin.portability.UnixAPI",
            "clang-analyzer-osx.*",
            "clang-analyzer-osx.API",
            "clang-analyzer-osx.cocoa.*",
            "clang-analyzer-osx.cocoa.AtSync",
            "clang-analyzer-osx.cocoa.AutoreleaseWrite",
            "clang-analyzer-osx.cocoa.ClassRelease",
            "clang-analyzer-osx.cocoa.Dealloc",
            "clang-analyzer-osx.cocoa.IncompatibleMethodTypes",
            "clang-analyzer-osx.cocoa.Loops",
            "clang-analyzer-osx.cocoa.MissingSuperCall",
            "clang-analyzer-osx.cocoa.NilArg",
            "clang-analyzer-osx.cocoa.NonNilReturnValue",
            "clang-analyzer-osx.cocoa.NSAutoreleasePool",
            "clang-analyzer-osx.cocoa.NSError",
            "clang-analyzer-osx.cocoa.ObjCGenerics",
            "clang-analyzer-osx.cocoa.RetainCount",
            "clang-analyzer-osx.cocoa.RetainCountBase",
            "clang-analyzer-osx.cocoa.RunLoopAutoreleaseLeak",
            "clang-analyzer-osx.cocoa.SelfInit",
            "clang-analyzer-osx.cocoa.SuperDealloc",
            "clang-analyzer-osx.cocoa.UnusedIvars",
            "clang-analyzer-osx.cocoa.VariadicMethodTypes",
            "clang-analyzer-osx.coreFoundation.*",
            "clang-analyzer-osx.coreFoundation.CFError",
            "clang-analyzer-osx.coreFoundation.CFNumber",
            "clang-analyzer-osx.coreFoundation.CFRetainRelease",
            "clang-analyzer-osx.coreFoundation.containers.*",
            "clang-analyzer-osx.coreFoundation.containers.OutOfBounds",
            "clang-analyzer-osx.coreFoundation.containers.PointerSizedValues",
            "clang-analyzer-osx.MIG",
            "clang-analyzer-osx.NumberObjectConversion",
            "clang-analyzer-osx.ObjCProperty",
            "clang-analyzer-osx.OSObjectRetainCount",
            "clang-analyzer-osx.SecKeychainAPI",
            "clang-analyzer-security.*",
            "clang-analyzer-security.FloatLoopCounter",
            "clang-analyzer-security.insecureAPI.*",
            "clang-analyzer-security.insecureAPI.bcmp",
            "clang-analyzer-security.insecureAPI.bcopy",
            "clang-analyzer-security.insecureAPI.bzero",
            "clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling",
            "clang-analyzer-security.insecureAPI.getpw",
            "clang-analyzer-security.insecureAPI.gets",
            "clang-analyzer-security.insecureAPI.mkstemp",
            "clang-analyzer-security.insecureAPI.mktemp",
            "clang-analyzer-security.insecureAPI.rand",
            "clang-analyzer-security.insecureAPI.strcpy",
            "clang-analyzer-security.insecureAPI.UncheckedReturn",
            "clang-analyzer-security.insecureAPI.vfork",
            "clang-analyzer-unix.*",
            "clang-analyzer-unix.API",
            "clang-analyzer-unix.cstring.*",
            "clang-analyzer-unix.cstring.BadSizeArg",
            "clang-analyzer-unix.cstring.NullArg",
            "clang-analyzer-unix.Malloc",
            "clang-analyzer-unix.MallocSizeof",
            "clang-analyzer-unix.MismatchedDeallocator",
            "clang-analyzer-unix.Vfork",
            "clang-analyzer-valist.*",
            "clang-analyzer-valist.CopyToSelf",
            "clang-analyzer-valist.Uninitialized",
            "clang-analyzer-valist.Unterminated",
            "concurrency-*",
            "concurrency-mt-unsafe",
            "concurrency-thread-canceltype-asynchronous",
            "cppcoreguidelines-*",
            "cppcoreguidelines-avoid-*",
            "cppcoreguidelines-avoid-c-arrays",
            "cppcoreguidelines-avoid-goto",
            "cppcoreguidelines-avoid-magic-numbers",
            "cppcoreguidelines-avoid-non-const-global-variables",
            "cppcoreguidelines-c-copy-assignment-signature",
            "cppcoreguidelines-explicit-virtual-functions",
            "cppcoreguidelines-init-variables",
            "cppcoreguidelines-interfaces-global-init",
            "cppcoreguidelines-macro-usage",
            "cppcoreguidelines-narrowing-conversions",
            "cppcoreguidelines-no-malloc",
            "cppcoreguidelines-non-private-member-variables-in-classes",
            "cppcoreguidelines-owning-memory",
            "cppcoreguidelines-prefer-member-initializer",
            "cppcoreguidelines-pro-bounds-*",
            "cppcoreguidelines-pro-bounds-array-to-pointer-decay",
            "cppcoreguidelines-pro-bounds-constant-array-index",
            "cppcoreguidelines-pro-bounds-pointer-arithmetic",
            "cppcoreguidelines-pro-type-*",
            "cppcoreguidelines-pro-type-const-cast",
            "cppcoreguidelines-pro-type-cstyle-cast",
            "cppcoreguidelines-pro-type-member-init",
            "cppcoreguidelines-pro-type-reinterpret-cast",
            "cppcoreguidelines-pro-type-static-cast-downcast",
            "cppcoreguidelines-pro-type-union-access",
            "cppcoreguidelines-pro-type-vararg",
            "cppcoreguidelines-slicing",
            "cppcoreguidelines-special-member-functions",
            "cppcoreguidelines-virtual-class-destructor",
            "darwin-*",
            "darwin-avoid-spinlock",
            "darwin-dispatch-once-nonstatic",
            "fuchsia-*",
            "fuchsia-default-*",
            "fuchsia-default-arguments-calls",
            "fuchsia-default-arguments-declarations",
            "fuchsia-header-anon-namespaces",
            "fuchsia-multiple-inheritance",
            "fuchsia-overloaded-operator",
            "fuchsia-statically-constructed-objects",
            "fuchsia-trailing-return",
            "fuchsia-virtual-inheritance",
            "google-*",
            "google-build-*",
            "google-build-explicit-make-pair",
            "google-build-namespaces",
            "google-build-using-namespace",
            "google-default-arguments",
            "google-explicit-constructor",
            "google-global-names-in-headers",
            "google-objc-*",
            "google-objc-avoid-*",
            "google-objc-avoid-nsobject-new",
            "google-objc-avoid-throwing-exception",
            "google-objc-function-naming",
            "google-objc-global-variable-declaration",
            "google-readability-*",
            "google-readability-avoid-underscore-in-googletest-name",
            "google-readability-braces-around-statements",
            "google-readability-casting",
            "google-readability-function-size",
            "google-readability-namespace-comments",
            "google-readability-todo",
            "google-runtime-*",
            "google-runtime-int",
            "google-runtime-operator",
            "google-upgrade-googletest-case",
            "hicpp-*",
            "hicpp-avoid-*",
            "hicpp-avoid-c-arrays",
            "hicpp-avoid-goto",
            "hicpp-braces-around-statements",
            "hicpp-deprecated-headers",
            "hicpp-exception-baseclass",
            "hicpp-explicit-conversions",
            "hicpp-function-size",
            "hicpp-invalid-access-moved",
            "hicpp-member-init",
            "hicpp-move-const-arg",
            "hicpp-multiway-paths-covered",
            "hicpp-named-parameter",
            "hicpp-new-delete-operators",
            "hicpp-no-*",
            "hicpp-no-array-decay",
            "hicpp-no-assembler",
            "hicpp-no-malloc",
            "hicpp-noexcept-move",
            "hicpp-signed-bitwise",
            "hicpp-special-member-functions",
            "hicpp-static-assert",
            "hicpp-undelegated-constructor",
            "hicpp-uppercase-literal-suffix",
            "hicpp-use-*",
            "hicpp-use-auto",
            "hicpp-use-emplace",
            "hicpp-use-equals-*",
            "hicpp-use-equals-default",
            "hicpp-use-equals-delete",
            "hicpp-use-noexcept",
            "hicpp-use-nullptr",
            "hicpp-use-override",
            "hicpp-vararg",
            "linuxkernel-must-check-errs",
            "llvm-*",
            "llvm-else-after-return",
            "llvm-header-guard",
            "llvm-include-order",
            "llvm-namespace-comment",
            "llvm-prefer-*",
            "llvm-prefer-isa-or-dyn-cast-in-conditionals",
            "llvm-prefer-register-over-unsigned",
            "llvm-qualified-auto",
            "llvm-twine-local",
            "llvmlibc-*",
            "llvmlibc-callee-namespace",
            "llvmlibc-implementation-in-namespace",
            "llvmlibc-restrict-system-libc-headers",
            "misc-*",
            "misc-definitions-in-headers",
            "misc-misleading-*",
            "misc-misleading-bidirectional",
            "misc-misleading-identifier",
            "misc-misplaced-const",
            "misc-new-delete-overloads",
            "misc-no-recursion",
            "misc-non-*",
            "misc-non-copyable-objects",
            "misc-non-private-member-variables-in-classes",
            "misc-redundant-expression",
            "misc-static-assert",
            "misc-throw-by-value-catch-by-reference",
            "misc-unconventional-assign-operator",
            "misc-uniqueptr-reset-release",
            "misc-unused-*",
            "misc-unused-alias-decls",
            "misc-unused-parameters",
            "misc-unused-using-decls",
            "modernize-*",
            "modernize-avoid-*",
            "modernize-avoid-bind",
            "modernize-avoid-c-arrays",
            "modernize-concat-nested-namespaces",
            "modernize-deprecated-*",
            "modernize-deprecated-headers",
            "modernize-deprecated-ios-base-aliases",
            "modernize-loop-convert",
            "modernize-make-*",
            "modernize-make-shared",
            "modernize-make-unique",
            "modernize-pass-by-value",
            "modernize-raw-string-literal",
            "modernize-redundant-void-arg",
            "modernize-replace-*",
            "modernize-replace-auto-ptr",
            "modernize-replace-disallow-copy-and-assign-macro",
            "modernize-replace-random-shuffle",
            "modernize-return-braced-init-list",
            "modernize-shrink-to-fit",
            "modernize-unary-static-assert",
            "modernize-use-*",
            "modernize-use-auto",
            "modernize-use-bool-literals",
            "modernize-use-default-member-init",
            "modernize-use-emplace",
            "modernize-use-equals-*",
            "modernize-use-equals-default",
            "modernize-use-equals-delete",
            "modernize-use-nodiscard",
            "modernize-use-noexcept",
            "modernize-use-nullptr",
            "modernize-use-override",
            "modernize-use-trailing-return-type",
            "modernize-use-transparent-functors",
            "modernize-use-uncaught-exceptions",
            "modernize-use-using",
            "mpi-*",
            "mpi-buffer-deref",
            "mpi-type-mismatch",
            "objc-*",
            "objc-assert-equals",
            "objc-avoid-nserror-init",
            "objc-dealloc-in-category",
            "objc-forbidden-subclassing",
            "objc-missing-hash",
            "objc-nsinvocation-argument-lifetime",
            "objc-property-declaration",
            "objc-super-self",
            "openmp-*",
            "openmp-exception-escape",
            "openmp-use-default-none",
            "performance-*",
            "performance-faster-string-find",
            "performance-for-range-copy",
            "performance-implicit-conversion-in-loop",
            "performance-inefficient-*",
            "performance-inefficient-algorithm",
            "performance-inefficient-string-concatenation",
            "performance-inefficient-vector-operation",
            "performance-move-*",
            "performance-move-const-arg",
            "performance-move-constructor-init",
            "performance-no-*",
            "performance-no-automatic-move",
            "performance-no-int-to-ptr",
            "performance-noexcept-move-constructor",
            "performance-trivially-destructible",
            "performance-type-promotion-in-math-fn",
            "performance-unnecessary-*",
            "performance-unnecessary-copy-initialization",
            "performance-unnecessary-value-param",
            "portability-*",
            "portability-restrict-system-includes",
            "portability-simd-intrinsics",
            "readability-*",
            "readability-avoid-const-params-in-decls",
            "readability-braces-around-statements",
            "readability-const-return-type",
            "readability-container-*",
            "readability-container-contains",
            "readability-container-data-pointer",
            "readability-container-size-empty",
            "readability-convert-member-functions-to-static",
            "readability-delete-null-pointer",
            "readability-duplicate-include",
            "readability-else-after-return",
            "readability-function-*",
            "readability-function-cognitive-complexity",
            "readability-function-size",
            "readability-identifier-*",
            "readability-identifier-length",
            "readability-identifier-naming",
            "readability-implicit-bool-conversion",
            "readability-inconsistent-declaration-parameter-name",
            "readability-isolate-declaration",
            "readability-magic-numbers",
            "readability-make-member-function-const",
            "readability-misleading-indentation",
            "readability-misplaced-array-index",
            "readability-named-parameter",
            "readability-non-const-parameter",
            "readability-qualified-auto",
            "readability-redundant-*",
            "readability-redundant-access-specifiers",
            "readability-redundant-control-flow",
            "readability-redundant-declaration",
            "readability-redundant-function-ptr-dereference",
            "readability-redundant-member-init",
            "readability-redundant-preprocessor",
            "readability-redundant-smartptr-get",
            "readability-redundant-string-*",
            "readability-redundant-string-cstr",
            "readability-redundant-string-init",
            "readability-simplify-*",
            "readability-simplify-boolean-expr",
            "readability-simplify-subscript-expr",
            "readability-static-*",
            "readability-static-accessed-through-instance",
            "readability-static-definition-in-anonymous-namespace",
            "readability-string-compare",
            "readability-suspicious-call-argument",
            "readability-uniqueptr-delete-release",
            "readability-uppercase-literal-suffix",
            "readability-use-anyofallof",
            "zircon-temporary-objects"
          ]
        },
        "markdownDescription": "List of enabled `clang-tidy` checks. The values are appended to the `Checks` in a `.clang-tidy` file or `#C_Cpp.codeAnalysis.clangTidy.config#`, if any. The default check `clang-analyzer-*` is always used unless it is explicitly disabled.",
        "scope": 4
      },
      "C_Cpp.codeAnalysis.clangTidy.checks.disabled": {
        "type": "array",
        "items": {
          "type": "string",
          "enum": [
            "*",
            "abseil-*",
            "abseil-cleanup-ctad",
            "abseil-duration-*",
            "abseil-duration-addition",
            "abseil-duration-comparison",
            "abseil-duration-conversion-cast",
            "abseil-duration-division",
            "abseil-duration-factory-*",
            "abseil-duration-factory-float",
            "abseil-duration-factory-scale",
            "abseil-duration-subtraction",
            "abseil-duration-unnecessary-conversion",
            "abseil-faster-strsplit-delimiter",
            "abseil-no-*",
            "abseil-no-internal-dependencies",
            "abseil-no-namespace",
            "abseil-redundant-strcat-calls",
            "abseil-str-cat-append",
            "abseil-string-find-*",
            "abseil-string-find-startswith",
            "abseil-string-find-str-contains",
            "abseil-time-*",
            "abseil-time-comparison",
            "abseil-time-subtraction",
            "abseil-upgrade-duration-conversions",
            "altera-*",
            "altera-id-dependent-backward-branch",
            "altera-kernel-name-restriction",
            "altera-single-work-item-barrier",
            "altera-struct-pack-align",
            "altera-unroll-loops",
            "android-*",
            "android-cloexec-*",
            "android-cloexec-accept",
            "android-cloexec-accept4",
            "android-cloexec-creat",
            "android-cloexec-dup",
            "android-cloexec-epoll-*",
            "android-cloexec-epoll-create",
            "android-cloexec-epoll-create1",
            "android-cloexec-fopen",
            "android-cloexec-inotify-*",
            "android-cloexec-inotify-init",
            "android-cloexec-inotify-init1",
            "android-cloexec-memfd-create",
            "android-cloexec-open",
            "android-cloexec-pipe",
            "android-cloexec-pipe2",
            "android-cloexec-socket",
            "android-comparison-in-temp-failure-retry",
            "boost-use-to-string",
            "bugprone-*",
            "bugprone-argument-comment",
            "bugprone-assert-side-effect",
            "bugprone-bad-signal-to-kill-thread",
            "bugprone-bool-pointer-implicit-conversion",
            "bugprone-branch-clone",
            "bugprone-copy-constructor-init",
            "bugprone-dangling-handle",
            "bugprone-dynamic-static-initializers",
            "bugprone-easily-swappable-parameters",
            "bugprone-exception-escape",
            "bugprone-fold-init-type",
            "bugprone-forward-declaration-namespace",
            "bugprone-forwarding-reference-overload",
            "bugprone-implicit-widening-of-multiplication-result",
            "bugprone-inaccurate-erase",
            "bugprone-incorrect-roundings",
            "bugprone-infinite-loop",
            "bugprone-integer-division",
            "bugprone-lambda-function-name",
            "bugprone-macro-parentheses",
            "bugprone-macro-repeated-side-effects",
            "bugprone-misplaced-*",
            "bugprone-misplaced-operator-in-strlen-in-alloc",
            "bugprone-misplaced-pointer-arithmetic-in-alloc",
            "bugprone-misplaced-widening-cast",
            "bugprone-move-forwarding-reference",
            "bugprone-multiple-statement-macro",
            "bugprone-narrowing-conversions",
            "bugprone-no-escape",
            "bugprone-not-null-terminated-result",
            "bugprone-parent-virtual-call",
            "bugprone-posix-return",
            "bugprone-redundant-branch-condition",
            "bugprone-reserved-identifier",
            "bugprone-signal-handler",
            "bugprone-signed-char-misuse",
            "bugprone-sizeof-*",
            "bugprone-sizeof-container",
            "bugprone-sizeof-expression",
            "bugprone-spuriously-wake-up-functions",
            "bugprone-string-*",
            "bugprone-string-constructor",
            "bugprone-string-integer-assignment",
            "bugprone-string-literal-with-embedded-nul",
            "bugprone-stringview-nullptr",
            "bugprone-suspicious-*",
            "bugprone-suspicious-enum-usage",
            "bugprone-suspicious-include",
            "bugprone-suspicious-memory-comparison",
            "bugprone-suspicious-memset-usage",
            "bugprone-suspicious-missing-comma",
            "bugprone-suspicious-semicolon",
            "bugprone-suspicious-string-compare",
            "bugprone-swapped-arguments",
            "bugprone-terminating-continue",
            "bugprone-throw-keyword-missing",
            "bugprone-too-small-loop-variable",
            "bugprone-undefined-memory-manipulation",
            "bugprone-undelegated-constructor",
            "bugprone-unhandled-*",
            "bugprone-unhandled-exception-at-new",
            "bugprone-unhandled-self-assignment",
            "bugprone-unused-raii",
            "bugprone-unused-return-value",
            "bugprone-use-after-move",
            "bugprone-virtual-near-miss",
            "cert-*",
            "cert-con*",
            "cert-con36-c",
            "cert-con54-cpp",
            "cert-dcl*",
            "cert-dcl03-c",
            "cert-dcl16-c",
            "cert-dcl21-cpp",
            "cert-dcl37-c",
            "cert-dcl50-cpp",
            "cert-dcl51-cpp",
            "cert-dcl54-cpp",
            "cert-dcl58-cpp",
            "cert-dcl59-cpp",
            "cert-env33-c",
            "cert-err*",
            "cert-err09-cpp",
            "cert-err33-c",
            "cert-err34-c",
            "cert-err52-cpp",
            "cert-err58-cpp",
            "cert-err60-cpp",
            "cert-err61-cpp",
            "cert-exp42-c",
            "cert-fio38-c",
            "cert-flp*",
            "cert-flp30-c",
            "cert-flp37-c",
            "cert-mem57-cpp",
            "cert-msc*",
            "cert-msc30-c",
            "cert-msc32-c",
            "cert-msc50-cpp",
            "cert-msc51-cpp",
            "cert-oop*",
            "cert-oop11-cpp",
            "cert-oop54-cpp",
            "cert-oop57-cpp",
            "cert-oop58-cpp",
            "cert-pos*",
            "cert-pos44-c",
            "cert-pos47-c",
            "cert-sig30-c",
            "cert-str34-c",
            "clang-analyzer-*",
            "clang-analyzer-core.*",
            "clang-analyzer-core.CallAndMessage",
            "clang-analyzer-core.DivideZero",
            "clang-analyzer-core.DynamicTypePropagation",
            "clang-analyzer-core.NonNullParamChecker",
            "clang-analyzer-core.NullDereference",
            "clang-analyzer-core.StackAddressEscape",
            "clang-analyzer-core.UndefinedBinaryOperatorResult",
            "clang-analyzer-core.uninitialized.*",
            "clang-analyzer-core.uninitialized.ArraySubscript",
            "clang-analyzer-core.uninitialized.Assign",
            "clang-analyzer-core.uninitialized.Branch",
            "clang-analyzer-core.uninitialized.CapturedBlockVariable",
            "clang-analyzer-core.uninitialized.UndefReturn",
            "clang-analyzer-core.VLASize",
            "clang-analyzer-cplusplus.*",
            "clang-analyzer-cplusplus.InnerPointer",
            "clang-analyzer-cplusplus.Move",
            "clang-analyzer-cplusplus.NewDelete",
            "clang-analyzer-cplusplus.NewDeleteLeaks",
            "clang-analyzer-deadcode.DeadStores",
            "clang-analyzer-nullablity.*",
            "clang-analyzer-nullability.NullabilityBase",
            "clang-analyzer-nullability.NullableDereferenced",
            "clang-analyzer-nullability.NullablePassedToNonnull",
            "clang-analyzer-nullability.NullableReturnedFromNonnull",
            "clang-analyzer-nullability.NullPassedToNonnull",
            "clang-analyzer-nullability.NullReturnedFromNonnull",
            "clang-analyzer-optin.*",
            "clang-analyzer-optin.cplusplus.*",
            "clang-analyzer-optin.cplusplus.UninitializedObject",
            "clang-analyzer-optin.cplusplus.VirtualCall",
            "clang-analyzer-optin.mpi.MPI-Checker",
            "clang-analyzer-optin.osx.*",
            "clang-analyzer-optin.osx.cocoa.localizability.*",
            "clang-analyzer-optin.osx.cocoa.localizability.EmptyLocalizationContextChecker",
            "clang-analyzer-optin.osx.cocoa.localizability.NonLocalizedStringChecker",
            "clang-analyzer-optin.osx.OSObjectCStyleCast",
            "clang-analyzer-optin.performance.*",
            "clang-analyzer-optin.performance.GCDAntipattern",
            "clang-analyzer-optin.performance.Padding",
            "clang-analyzer-optin.portability.UnixAPI",
            "clang-analyzer-osx.*",
            "clang-analyzer-osx.API",
            "clang-analyzer-osx.cocoa.*",
            "clang-analyzer-osx.cocoa.AtSync",
            "clang-analyzer-osx.cocoa.AutoreleaseWrite",
            "clang-analyzer-osx.cocoa.ClassRelease",
            "clang-analyzer-osx.cocoa.Dealloc",
            "clang-analyzer-osx.cocoa.IncompatibleMethodTypes",
            "clang-analyzer-osx.cocoa.Loops",
            "clang-analyzer-osx.cocoa.MissingSuperCall",
            "clang-analyzer-osx.cocoa.NilArg",
            "clang-analyzer-osx.cocoa.NonNilReturnValue",
            "clang-analyzer-osx.cocoa.NSAutoreleasePool",
            "clang-analyzer-osx.cocoa.NSError",
            "clang-analyzer-osx.cocoa.ObjCGenerics",
            "clang-analyzer-osx.cocoa.RetainCount",
            "clang-analyzer-osx.cocoa.RetainCountBase",
            "clang-analyzer-osx.cocoa.RunLoopAutoreleaseLeak",
            "clang-analyzer-osx.cocoa.SelfInit",
            "clang-analyzer-osx.cocoa.SuperDealloc",
            "clang-analyzer-osx.cocoa.UnusedIvars",
            "clang-analyzer-osx.cocoa.VariadicMethodTypes",
            "clang-analyzer-osx.coreFoundation.*",
            "clang-analyzer-osx.coreFoundation.CFError",
            "clang-analyzer-osx.coreFoundation.CFNumber",
            "clang-analyzer-osx.coreFoundation.CFRetainRelease",
            "clang-analyzer-osx.coreFoundation.containers.*",
            "clang-analyzer-osx.coreFoundation.containers.OutOfBounds",
            "clang-analyzer-osx.coreFoundation.containers.PointerSizedValues",
            "clang-analyzer-osx.MIG",
            "clang-analyzer-osx.NumberObjectConversion",
            "clang-analyzer-osx.ObjCProperty",
            "clang-analyzer-osx.OSObjectRetainCount",
            "clang-analyzer-osx.SecKeychainAPI",
            "clang-analyzer-security.*",
            "clang-analyzer-security.FloatLoopCounter",
            "clang-analyzer-security.insecureAPI.*",
            "clang-analyzer-security.insecureAPI.bcmp",
            "clang-analyzer-security.insecureAPI.bcopy",
            "clang-analyzer-security.insecureAPI.bzero",
            "clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling",
            "clang-analyzer-security.insecureAPI.getpw",
            "clang-analyzer-security.insecureAPI.gets",
            "clang-analyzer-security.insecureAPI.mkstemp",
            "clang-analyzer-security.insecureAPI.mktemp",
            "clang-analyzer-security.insecureAPI.rand",
            "clang-analyzer-security.insecureAPI.strcpy",
            "clang-analyzer-security.insecureAPI.UncheckedReturn",
            "clang-analyzer-security.insecureAPI.vfork",
            "clang-analyzer-unix.*",
            "clang-analyzer-unix.API",
            "clang-analyzer-unix.cstring.*",
            "clang-analyzer-unix.cstring.BadSizeArg",
            "clang-analyzer-unix.cstring.NullArg",
            "clang-analyzer-unix.Malloc",
            "clang-analyzer-unix.MallocSizeof",
            "clang-analyzer-unix.MismatchedDeallocator",
            "clang-analyzer-unix.Vfork",
            "clang-analyzer-valist.*",
            "clang-analyzer-valist.CopyToSelf",
            "clang-analyzer-valist.Uninitialized",
            "clang-analyzer-valist.Unterminated",
            "concurrency-*",
            "concurrency-mt-unsafe",
            "concurrency-thread-canceltype-asynchronous",
            "cppcoreguidelines-*",
            "cppcoreguidelines-avoid-*",
            "cppcoreguidelines-avoid-c-arrays",
            "cppcoreguidelines-avoid-goto",
            "cppcoreguidelines-avoid-magic-numbers",
            "cppcoreguidelines-avoid-non-const-global-variables",
            "cppcoreguidelines-c-copy-assignment-signature",
            "cppcoreguidelines-explicit-virtual-functions",
            "cppcoreguidelines-init-variables",
            "cppcoreguidelines-interfaces-global-init",
            "cppcoreguidelines-macro-usage",
            "cppcoreguidelines-narrowing-conversions",
            "cppcoreguidelines-no-malloc",
            "cppcoreguidelines-non-private-member-variables-in-classes",
            "cppcoreguidelines-owning-memory",
            "cppcoreguidelines-prefer-member-initializer",
            "cppcoreguidelines-pro-bounds-*",
            "cppcoreguidelines-pro-bounds-array-to-pointer-decay",
            "cppcoreguidelines-pro-bounds-constant-array-index",
            "cppcoreguidelines-pro-bounds-pointer-arithmetic",
            "cppcoreguidelines-pro-type-*",
            "cppcoreguidelines-pro-type-const-cast",
            "cppcoreguidelines-pro-type-cstyle-cast",
            "cppcoreguidelines-pro-type-member-init",
            "cppcoreguidelines-pro-type-reinterpret-cast",
            "cppcoreguidelines-pro-type-static-cast-downcast",
            "cppcoreguidelines-pro-type-union-access",
            "cppcoreguidelines-pro-type-vararg",
            "cppcoreguidelines-slicing",
            "cppcoreguidelines-special-member-functions",
            "cppcoreguidelines-virtual-class-destructor",
            "darwin-*",
            "darwin-avoid-spinlock",
            "darwin-dispatch-once-nonstatic",
            "fuchsia-*",
            "fuchsia-default-*",
            "fuchsia-default-arguments-calls",
            "fuchsia-default-arguments-declarations",
            "fuchsia-header-anon-namespaces",
            "fuchsia-multiple-inheritance",
            "fuchsia-overloaded-operator",
            "fuchsia-statically-constructed-objects",
            "fuchsia-trailing-return",
            "fuchsia-virtual-inheritance",
            "google-*",
            "google-build-*",
            "google-build-explicit-make-pair",
            "google-build-namespaces",
            "google-build-using-namespace",
            "google-default-arguments",
            "google-explicit-constructor",
            "google-global-names-in-headers",
            "google-objc-*",
            "google-objc-avoid-*",
            "google-objc-avoid-nsobject-new",
            "google-objc-avoid-throwing-exception",
            "google-objc-function-naming",
            "google-objc-global-variable-declaration",
            "google-readability-*",
            "google-readability-avoid-underscore-in-googletest-name",
            "google-readability-braces-around-statements",
            "google-readability-casting",
            "google-readability-function-size",
            "google-readability-namespace-comments",
            "google-readability-todo",
            "google-runtime-*",
            "google-runtime-int",
            "google-runtime-operator",
            "google-upgrade-googletest-case",
            "hicpp-*",
            "hicpp-avoid-*",
            "hicpp-avoid-c-arrays",
            "hicpp-avoid-goto",
            "hicpp-braces-around-statements",
            "hicpp-deprecated-headers",
            "hicpp-exception-baseclass",
            "hicpp-explicit-conversions",
            "hicpp-function-size",
            "hicpp-invalid-access-moved",
            "hicpp-member-init",
            "hicpp-move-const-arg",
            "hicpp-multiway-paths-covered",
            "hicpp-named-parameter",
            "hicpp-new-delete-operators",
            "hicpp-no-*",
            "hicpp-no-array-decay",
            "hicpp-no-assembler",
            "hicpp-no-malloc",
            "hicpp-noexcept-move",
            "hicpp-signed-bitwise",
            "hicpp-special-member-functions",
            "hicpp-static-assert",
            "hicpp-undelegated-constructor",
            "hicpp-uppercase-literal-suffix",
            "hicpp-use-*",
            "hicpp-use-auto",
            "hicpp-use-emplace",
            "hicpp-use-equals-*",
            "hicpp-use-equals-default",
            "hicpp-use-equals-delete",
            "hicpp-use-noexcept",
            "hicpp-use-nullptr",
            "hicpp-use-override",
            "hicpp-vararg",
            "linuxkernel-must-check-errs",
            "llvm-*",
            "llvm-else-after-return",
            "llvm-header-guard",
            "llvm-include-order",
            "llvm-namespace-comment",
            "llvm-prefer-*",
            "llvm-prefer-isa-or-dyn-cast-in-conditionals",
            "llvm-prefer-register-over-unsigned",
            "llvm-qualified-auto",
            "llvm-twine-local",
            "llvmlibc-*",
            "llvmlibc-callee-namespace",
            "llvmlibc-implementation-in-namespace",
            "llvmlibc-restrict-system-libc-headers",
            "misc-*",
            "misc-definitions-in-headers",
            "misc-misleading-*",
            "misc-misleading-bidirectional",
            "misc-misleading-identifier",
            "misc-misplaced-const",
            "misc-new-delete-overloads",
            "misc-no-recursion",
            "misc-non-*",
            "misc-non-copyable-objects",
            "misc-non-private-member-variables-in-classes",
            "misc-redundant-expression",
            "misc-static-assert",
            "misc-throw-by-value-catch-by-reference",
            "misc-unconventional-assign-operator",
            "misc-uniqueptr-reset-release",
            "misc-unused-*",
            "misc-unused-alias-decls",
            "misc-unused-parameters",
            "misc-unused-using-decls",
            "modernize-*",
            "modernize-avoid-*",
            "modernize-avoid-bind",
            "modernize-avoid-c-arrays",
            "modernize-concat-nested-namespaces",
            "modernize-deprecated-*",
            "modernize-deprecated-headers",
            "modernize-deprecated-ios-base-aliases",
            "modernize-loop-convert",
            "modernize-make-*",
            "modernize-make-shared",
            "modernize-make-unique",
            "modernize-pass-by-value",
            "modernize-raw-string-literal",
            "modernize-redundant-void-arg",
            "modernize-replace-*",
            "modernize-replace-auto-ptr",
            "modernize-replace-disallow-copy-and-assign-macro",
            "modernize-replace-random-shuffle",
            "modernize-return-braced-init-list",
            "modernize-shrink-to-fit",
            "modernize-unary-static-assert",
            "modernize-use-*",
            "modernize-use-auto",
            "modernize-use-bool-literals",
            "modernize-use-default-member-init",
            "modernize-use-emplace",
            "modernize-use-equals-*",
            "modernize-use-equals-default",
            "modernize-use-equals-delete",
            "modernize-use-nodiscard",
            "modernize-use-noexcept",
            "modernize-use-nullptr",
            "modernize-use-override",
            "modernize-use-trailing-return-type",
            "modernize-use-transparent-functors",
            "modernize-use-uncaught-exceptions",
            "modernize-use-using",
            "mpi-*",
            "mpi-buffer-deref",
            "mpi-type-mismatch",
            "objc-*",
            "objc-assert-equals",
            "objc-avoid-nserror-init",
            "objc-dealloc-in-category",
            "objc-forbidden-subclassing",
            "objc-missing-hash",
            "objc-nsinvocation-argument-lifetime",
            "objc-property-declaration",
            "objc-super-self",
            "openmp-*",
            "openmp-exception-escape",
            "openmp-use-default-none",
            "performance-*",
            "performance-faster-string-find",
            "performance-for-range-copy",
            "performance-implicit-conversion-in-loop",
            "performance-inefficient-*",
            "performance-inefficient-algorithm",
            "performance-inefficient-string-concatenation",
            "performance-inefficient-vector-operation",
            "performance-move-*",
            "performance-move-const-arg",
            "performance-move-constructor-init",
            "performance-no-*",
            "performance-no-automatic-move",
            "performance-no-int-to-ptr",
            "performance-noexcept-move-constructor",
            "performance-trivially-destructible",
            "performance-type-promotion-in-math-fn",
            "performance-unnecessary-*",
            "performance-unnecessary-copy-initialization",
            "performance-unnecessary-value-param",
            "portability-*",
            "portability-restrict-system-includes",
            "portability-simd-intrinsics",
            "readability-*",
            "readability-avoid-const-params-in-decls",
            "readability-braces-around-statements",
            "readability-const-return-type",
            "readability-container-*",
            "readability-container-contains",
            "readability-container-data-pointer",
            "readability-container-size-empty",
            "readability-convert-member-functions-to-static",
            "readability-delete-null-pointer",
            "readability-duplicate-include",
            "readability-else-after-return",
            "readability-function-*",
            "readability-function-cognitive-complexity",
            "readability-function-size",
            "readability-identifier-*",
            "readability-identifier-length",
            "readability-identifier-naming",
            "readability-implicit-bool-conversion",
            "readability-inconsistent-declaration-parameter-name",
            "readability-isolate-declaration",
            "readability-magic-numbers",
            "readability-make-member-function-const",
            "readability-misleading-indentation",
            "readability-misplaced-array-index",
            "readability-named-parameter",
            "readability-non-const-parameter",
            "readability-qualified-auto",
            "readability-redundant-*",
            "readability-redundant-access-specifiers",
            "readability-redundant-control-flow",
            "readability-redundant-declaration",
            "readability-redundant-function-ptr-dereference",
            "readability-redundant-member-init",
            "readability-redundant-preprocessor",
            "readability-redundant-smartptr-get",
            "readability-redundant-string-*",
            "readability-redundant-string-cstr",
            "readability-redundant-string-init",
            "readability-simplify-*",
            "readability-simplify-boolean-expr",
            "readability-simplify-subscript-expr",
            "readability-static-*",
            "readability-static-accessed-through-instance",
            "readability-static-definition-in-anonymous-namespace",
            "readability-string-compare",
            "readability-suspicious-call-argument",
            "readability-uniqueptr-delete-release",
            "readability-uppercase-literal-suffix",
            "readability-use-anyofallof",
            "zircon-temporary-objects"
          ]
        },
        "markdownDescription": "List of disabled `clang-tidy` checks. The values are appended to the `Checks` in a `.clang-tidy` file or `#C_Cpp.codeAnalysis.clangTidy.config#`, if any.",
        "scope": 4
      },
      "C_Cpp.clang_format_path": {
        "type": "string",
        "markdownDescription": "The full path of the `clang-format` executable. If not specified, and `clang-format` is available in the environment path, that is used. If not found in the environment path, the `clang-format` bundled with the extension will be used.",
        "scope": 6
      },
      "C_Cpp.clang_format_style": {
        "type": "string",
        "default": "file",
        "markdownDescription": "Coding style, currently supports: `Visual Studio`, `LLVM`, `Google`, `Chromium`, `Mozilla`, `WebKit`, `Microsoft`, `GNU`. Use `file` to load the style from a `.clang-format` file in the current or parent directory. Use `{key: value, ...}` to set specific parameters. For example, the `Visual Studio` style is similar to: `{ BasedOnStyle: LLVM, UseTab: Never, IndentWidth: 4, TabWidth: 4, BreakBeforeBraces: Allman, AllowShortIfStatementsOnASingleLine: false, IndentCaseLabels: false, ColumnLimit: 0, AccessModifierOffset: -4, NamespaceIndentation: All, FixNamespaceComments: false }`.",
        "scope": 4
      },
      "C_Cpp.formatting": {
        "type": "string",
        "enum": [
          "clangFormat",
          "vcFormat",
          "Default",
          "Disabled"
        ],
        "markdownEnumDescriptions": [
          "`clang-format` will be used to format code.",
          "The Visual C++ formatting engine will be used to format code.",
          "By default, `clang-format` will be used to format the code. However, the Visual C++ formatting engine will be used if an `.editorconfig` file with relevant settings is found nearer to the code being formatted and `#C_Cpp.clang_format_style#` is the default value: `file`.",
          "Code formatting will be disabled."
        ],
        "default": "Default",
        "description": "Configures the formatting engine.",
        "scope": 4
      },
      "C_Cpp.vcFormat.indent.braces": {
        "type": "boolean",
        "default": false,
        "markdownDescription": "Braces are indented by the amount specified in the `#editor.tabSize#` setting.",
        "scope": 4
      },
      "C_Cpp.vcFormat.indent.multiLineRelativeTo": {
        "type": "string",
        "enum": [
          "outermostParenthesis",
          "innermostParenthesis",
          "statementBegin"
        ],
        "enumDescriptions": [
          "Indent new line relative to the outermost open parenthesis.",
          "Indent new line relative to the innermost open parenthesis.",
          "Indent new line relative to the beginning of the current statement."
        ],
        "default": "innermostParenthesis",
        "description": "Determines what new line indentation is relative to.",
        "scope": 4
      },
      "C_Cpp.vcFormat.indent.withinParentheses": {
        "type": "string",
        "enum": [
          "alignToParenthesis",
          "indent"
        ],
        "markdownEnumDescriptions": [
          "New line is aligned under the opening parenthesis.",
          "New line is indented based on `#C_Cpp.vcFormat.indent.multiLineRelativeTo#`."
        ],
        "default": "indent",
        "markdownDescription": "When a new line is typed, it is aligned under the opening parenthesis or based on `#C_Cpp.vcFormat.indent.multiLineRelativeTo#`.",
        "scope": 4
      },
      "C_Cpp.vcFormat.indent.preserveWithinParentheses": {
        "type": "boolean",
        "default": false,
        "description": "In existing code, preserve the existing indent alignment of new lines within parentheses.",
        "scope": 4
      },
      "C_Cpp.vcFormat.indent.caseLabels": {
        "type": "boolean",
        "default": false,
        "markdownDescription": "Labels are indented relative to switch statements by the amount specified in the `#editor.tabSize#` setting.",
        "scope": 4
      },
      "C_Cpp.vcFormat.indent.caseContents": {
        "type": "boolean",
        "default": true,
        "markdownDescription": "Code inside a `case` block is indented relative to its label by the amount specified in the `#editor.tabSize#` setting.",
        "scope": 4
      },
      "C_Cpp.vcFormat.indent.caseContentsWhenBlock": {
        "type": "boolean",
        "default": false,
        "markdownDescription": "Indent braces following a case statement by the amount specified in the `#editor.tabSize#` setting.",
        "scope": 4
      },
      "C_Cpp.vcFormat.indent.lambdaBracesWhenParameter": {
        "type": "boolean",
        "default": true,
        "markdownDescription": "Indent braces of lambdas used as function parameters relative to the start of the statement by the amount specified in the `#editor.tabSize#` setting.",
        "scope": 4
      },
      "C_Cpp.vcFormat.indent.gotoLabels": {
        "type": "string",
        "enum": [
          "oneLeft",
          "leftmostColumn",
          "none"
        ],
        "markdownEnumDescriptions": [
          "Position goto labels to the left of the current code indentation, by the amount specified in the `#editor.tabSize#` setting.",
          "Position goto labels at the leftmost edge of the code.",
          "Goto labels will not be formatted."
        ],
        "default": "oneLeft",
        "description": "The position of goto labels.",
        "scope": 4
      },
      "C_Cpp.vcFormat.indent.preprocessor": {
        "type": "string",
        "enum": [
          "oneLeft",
          "leftmostColumn",
          "none"
        ],
        "markdownEnumDescriptions": [
          "Preprocessor directives are positioned to the left of the current code indentation, by the amount specified in the `#editor.tabSize#` setting.",
          "Preprocessor directives are positioned at the leftmost edge of the code.",
          "Preprocessor directives will not be formatted."
        ],
        "default": "leftmostColumn",
        "description": "The position of preprocessor directives.",
        "scope": 4
      },
      "C_Cpp.vcFormat.indent.accessSpecifiers": {
        "type": "boolean",
        "default": false,
        "markdownDescription": "Access specifiers are indented relative to class or struct definitions by the amount specified in the `#editor.tabSize#` setting.",
        "scope": 4
      },
      "C_Cpp.vcFormat.indent.namespaceContents": {
        "type": "boolean",
        "default": true,
        "markdownDescription": "Code is indented relative to its enclosing namespace by the amount specified in the `#editor.tabSize#` setting.",
        "scope": 4
      },
      "C_Cpp.vcFormat.indent.preserveComments": {
        "type": "boolean",
        "default": false,
        "description": "Indentation of comments is not changed during formatting operations.",
        "scope": 4
      },
      "C_Cpp.vcFormat.newLine.beforeOpenBrace.namespace": {
        "type": "string",
        "enum": [
          "newLine",
          "sameLine",
          "ignore"
        ],
        "enumDescriptions": [
          "Opening braces are moved to a new line.",
          "Opening braces are kept on the same line and a space is added before each one.",
          "Opening braces are not formatted."
        ],
        "default": "ignore",
        "description": "The position of opening braces for namespaces.",
        "scope": 4
      },
      "C_Cpp.vcFormat.newLine.beforeOpenBrace.type": {
        "type": "string",
        "enum": [
          "newLine",
          "sameLine",
          "ignore"
        ],
        "enumDescriptions": [
          "Opening braces are moved to a new line.",
          "Opening braces are kept on the same line and a space is added before each one.",
          "Opening braces are not formatted."
        ],
        "default": "ignore",
        "description": "The position of opening braces for type definitions.",
        "scope": 4
      },
      "C_Cpp.vcFormat.newLine.beforeOpenBrace.function": {
        "type": "string",
        "enum": [
          "newLine",
          "sameLine",
          "ignore"
        ],
        "enumDescriptions": [
          "Opening braces are moved to a new line.",
          "Opening braces are kept on the same line and a space is added before each one.",
          "Opening braces are not formatted."
        ],
        "default": "ignore",
        "description": "The position of opening braces for functions.",
        "scope": 4
      },
      "C_Cpp.vcFormat.newLine.beforeOpenBrace.block": {
        "type": "string",
        "enum": [
          "newLine",
          "sameLine",
          "ignore"
        ],
        "enumDescriptions": [
          "Opening braces are moved to a new line.",
          "Opening braces are kept on the same line and a space is added before each one.",
          "Opening braces are not formatted."
        ],
        "default": "ignore",
        "description": "The position of opening braces for control blocks.",
        "scope": 4
      },
      "C_Cpp.vcFormat.newLine.beforeOpenBrace.lambda": {
        "enum": [
          "newLine",
          "sameLine",
          "ignore"
        ],
        "enumDescriptions": [
          "Opening braces are moved to a new line.",
          "Opening braces are kept on the same line and a space is added before each one.",
          "Opening braces are not formatted."
        ],
        "default": "ignore",
        "description": "The position of opening braces for lambda functions.",
        "scope": 4
      },
      "C_Cpp.vcFormat.newLine.scopeBracesOnSeparateLines": {
        "type": "boolean",
        "default": false,
        "description": "Place opening and closing braces for scopes on separate lines.",
        "scope": 4
      },
      "C_Cpp.vcFormat.newLine.closeBraceSameLine.emptyType": {
        "type": "boolean",
        "default": false,
        "description": "For empty types, move closing braces to the same line as opening braces.",
        "scope": 4
      },
      "C_Cpp.vcFormat.newLine.closeBraceSameLine.emptyFunction": {
        "type": "boolean",
        "default": false,
        "description": "For empty function bodies, move closing braces to the same line as opening braces.",
        "scope": 4
      },
      "C_Cpp.vcFormat.newLine.beforeCatch": {
        "type": "boolean",
        "default": true,
        "markdownDescription": "Place `catch` and similar keywords on a new line.",
        "scope": 4
      },
      "C_Cpp.vcFormat.newLine.beforeElse": {
        "type": "boolean",
        "default": true,
        "markdownDescription": "Place `else` on a new line.",
        "scope": 4
      },
      "C_Cpp.vcFormat.newLine.beforeWhileInDoWhile": {
        "type": "boolean",
        "default": false,
        "markdownDescription": "Place `while` in a `do`-`while` loop on a new line.",
        "scope": 4
      },
      "C_Cpp.vcFormat.space.beforeFunctionOpenParenthesis": {
        "type": "string",
        "enum": [
          "insert",
          "remove",
          "ignore"
        ],
        "enumDescriptions": [
          "Add a space before the opening parenthesis of a function.",
          "Spaces before opening parenthesis of a function are removed.",
          "Spaces are left as entered."
        ],
        "default": "remove",
        "description": "Spacing between function names and opening parentheses of argument lists.",
        "scope": 4
      },
      "C_Cpp.vcFormat.space.withinParameterListParentheses": {
        "type": "boolean",
        "default": false,
        "description": "A space is added after the opening parenthesis and also before the closing parenthesis in function parameter lists.",
        "scope": 4
      },
      "C_Cpp.vcFormat.space.betweenEmptyParameterListParentheses": {
        "type": "boolean",
        "default": false,
        "description": "When a function parameter list is empty, a space is inserted between its parentheses.",
        "scope": 4
      },
      "C_Cpp.vcFormat.space.afterKeywordsInControlFlowStatements": {
        "type": "boolean",
        "default": true,
        "description": "A space is added between the keyword and opening parenthesis in control flow statements.",
        "scope": 4
      },
      "C_Cpp.vcFormat.space.withinControlFlowStatementParentheses": {
        "type": "boolean",
        "default": false,
        "description": "A space is added after the opening parenthesis and also before the closing parenthesis in control flow statements.",
        "scope": 4
      },
      "C_Cpp.vcFormat.space.beforeLambdaOpenParenthesis": {
        "type": "boolean",
        "default": false,
        "description": "A space is added before the opening parenthesis of lambda argument lists.",
        "scope": 4
      },
      "C_Cpp.vcFormat.space.withinCastParentheses": {
        "type": "boolean",
        "default": false,
        "description": "A space is added after the opening parenthesis and also before the closing parenthesis of a C-style cast.",
        "scope": 4
      },
      "C_Cpp.vcFormat.space.afterCastCloseParenthesis": {
        "type": "boolean",
        "default": false,
        "description": "A space is added after the closing parenthesis of a C-style cast.",
        "scope": 4
      },
      "C_Cpp.vcFormat.space.withinExpressionParentheses": {
        "type": "boolean",
        "default": false,
        "description": "A space is added after the opening parenthesis and also before the closing parenthesis of a parenthesized expression.",
        "scope": 4
      },
      "C_Cpp.vcFormat.space.beforeBlockOpenBrace": {
        "type": "boolean",
        "default": true,
        "description": "A space is added before the opening braces of scope blocks.",
        "scope": 4
      },
      "C_Cpp.vcFormat.space.betweenEmptyBraces": {
        "type": "boolean",
        "default": false,
        "description": "When braces are empty and on the same line, a space is inserted between them.",
        "scope": 4
      },
      "C_Cpp.vcFormat.space.beforeInitializerListOpenBrace": {
        "type": "boolean",
        "default": false,
        "description": "A space is added before the opening brace of uniform initialization and initializer lists.",
        "scope": 4
      },
      "C_Cpp.vcFormat.space.withinInitializerListBraces": {
        "type": "boolean",
        "default": true,
        "description": "A space is added after the opening brace and also before the closing brace of uniform initialization and initializer lists.",
        "scope": 4
      },
      "C_Cpp.vcFormat.space.preserveInInitializerList": {
        "type": "boolean",
        "default": true,
        "description": "Spaces around commas are preserved inside uniform initialization and initializer lists.",
        "scope": 4
      },
      "C_Cpp.vcFormat.space.beforeOpenSquareBracket": {
        "type": "boolean",
        "default": false,
        "description": "A space is added before opening square brackets.",
        "scope": 4
      },
      "C_Cpp.vcFormat.space.withinSquareBrackets": {
        "type": "boolean",
        "default": false,
        "description": "A space is added after the opening square bracket and also before the closing square bracket.",
        "scope": 4
      },
      "C_Cpp.vcFormat.space.beforeEmptySquareBrackets": {
        "type": "boolean",
        "default": false,
        "description": "When square brackets are empty, a space is added before the opening bracket.",
        "scope": 4
      },
      "C_Cpp.vcFormat.space.betweenEmptySquareBrackets": {
        "type": "boolean",
        "default": false,
        "description": "When square brackets are empty, a space is inserted between them.",
        "scope": 4
      },
      "C_Cpp.vcFormat.space.groupSquareBrackets": {
        "type": "boolean",
        "default": true,
        "description": "For multi-dimensional arrays, all space between brackets is removed. Other settings that control space are overridden.",
        "scope": 4
      },
      "C_Cpp.vcFormat.space.withinLambdaBrackets": {
        "type": "boolean",
        "default": false,
        "description": "A space is added after the opening square bracket and also before the closing square bracket.",
        "scope": 4
      },
      "C_Cpp.vcFormat.space.betweenEmptyLambdaBrackets": {
        "type": "boolean",
        "default": false,
        "description": "When square brackets are empty, a space is inserted between them.",
        "scope": 4
      },
      "C_Cpp.vcFormat.space.beforeComma": {
        "type": "boolean",
        "default": false,
        "description": "A space is added before every comma.",
        "scope": 4
      },
      "C_Cpp.vcFormat.space.afterComma": {
        "type": "boolean",
        "default": true,
        "description": "A space is added after every comma.",
        "scope": 4
      },
      "C_Cpp.vcFormat.space.removeAroundMemberOperators": {
        "type": "boolean",
        "default": true,
        "description": "Spaces around member access operators, pointer-to-member operators, and scope resolution operators are removed.",
        "scope": 4
      },
      "C_Cpp.vcFormat.space.beforeInheritanceColon": {
        "type": "boolean",
        "default": true,
        "description": "A space is added before the colon for inherited types in class definitions.",
        "scope": 4
      },
      "C_Cpp.vcFormat.space.beforeConstructorColon": {
        "type": "boolean",
        "default": true,
        "description": "A space is added before the colon in constructor definitions.",
        "scope": 4
      },
      "C_Cpp.vcFormat.space.removeBeforeSemicolon": {
        "type": "boolean",
        "default": true,
        "description": "Spaces are removed before every semicolon.",
        "scope": 4
      },
      "C_Cpp.vcFormat.space.insertAfterSemicolon": {
        "type": "boolean",
        "default": false,
        "description": "A space is inserted after every semicolon.",
        "scope": 4
      },
      "C_Cpp.vcFormat.space.removeAroundUnaryOperator": {
        "type": "boolean",
        "default": true,
        "description": "Spaces between unary operators and operands are removed.",
        "scope": 4
      },
      "C_Cpp.vcFormat.space.aroundBinaryOperator": {
        "type": "string",
        "enum": [
          "insert",
          "remove",
          "ignore"
        ],
        "enumDescriptions": [
          "A space is added before the operator and also after it.",
          "Spaces before and after the operator are removed.",
          "Spaces are left as entered."
        ],
        "default": "insert",
        "description": "Spaces around binary operators.",
        "scope": 4
      },
      "C_Cpp.vcFormat.space.aroundAssignmentOperator": {
        "type": "string",
        "enum": [
          "insert",
          "remove",
          "ignore"
        ],
        "enumDescriptions": [
          "A space is added before the operator and also after it.",
          "Spaces before and after the operator are removed.",
          "Spaces are left as entered."
        ],
        "default": "insert",
        "description": "Spaces around assignment operators.",
        "scope": 4
      },
      "C_Cpp.vcFormat.space.pointerReferenceAlignment": {
        "type": "string",
        "enum": [
          "left",
          "center",
          "right",
          "ignore"
        ],
        "enumDescriptions": [
          "Pointer and reference operators are aligned to the left.",
          "Pointer and reference operators are centered.",
          "Pointer and reference operators are aligned to the right.",
          "Pointer and reference operators are not formatted."
        ],
        "default": "left",
        "description": "Spaces around pointer and reference operators.",
        "scope": 4
      },
      "C_Cpp.vcFormat.space.aroundTernaryOperator": {
        "type": "string",
        "enum": [
          "insert",
          "remove",
          "ignore"
        ],
        "enumDescriptions": [
          "A space is added before the operator and also after it.",
          "Spaces before and after the operator are removed.",
          "Spaces are left as entered."
        ],
        "default": "insert",
        "description": "Spaces around conditional operators.",
        "scope": 4
      },
      "C_Cpp.vcFormat.wrap.preserveBlocks": {
        "type": "string",
        "enum": [
          "oneLiners",
          "allOneLineScopes",
          "never"
        ],
        "markdownEnumDescriptions": [
          "A complete code block that is entered on one line is kept on one line, regardless of the values of any of the `C_Cpp.vcFormat.newLine.*` settings.",
          "Any code where the opening and closing brace is entered on one line is kept on one line, regardless of the values of any of the `C_Cpp.vcFormat.newLine.*` settings.",
          "Code blocks are always formatted based on the values of the `C_Cpp.vcFormat.newLine.*` settings."
        ],
        "default": "oneLiners",
        "description": "Wrapping options for blocks.",
        "scope": 4
      },
      "C_Cpp.clang_format_fallbackStyle": {
        "type": "string",
        "default": "Visual Studio",
        "markdownDescription": "Name of the predefined style used as a fallback in case `clang-format` is invoked with style `file` but the `.clang-format` file is not found. Possible values are `Visual Studio`, `LLVM`, `Google`, `Chromium`, `Mozilla`, `WebKit`, `Microsoft`, `GNU`, `none`, or use `{key: value, ...}` to set specific parameters. For example, the `Visual Studio` style is similar to: `{ BasedOnStyle: LLVM, UseTab: Never, IndentWidth: 4, TabWidth: 4, BreakBeforeBraces: Allman, AllowShortIfStatementsOnASingleLine: false, IndentCaseLabels: false, ColumnLimit: 0, AccessModifierOffset: -4, NamespaceIndentation: All, FixNamespaceComments: false }`.",
        "scope": 4
      },
      "C_Cpp.clang_format_sortIncludes": {
        "type": [
          "boolean",
          "null"
        ],
        "enum": [
          true,
          false,
          null
        ],
        "default": null,
        "markdownDescription": "If set, overrides the include sorting behavior determined by the `SortIncludes` parameter.",
        "scope": 4
      },
      "C_Cpp.intelliSenseEngine": {
        "type": "string",
        "enum": [
          "Default",
          "Tag Parser",
          "Disabled"
        ],
        "default": "Default",
        "description": "Controls the IntelliSense provider.",
        "enumDescriptions": [
          "Provides context-aware results via a separate IntelliSense process.",
          "Provides \"fuzzy\" results that are not context-aware.",
          "Turns off C/C++ language service features."
        ],
        "scope": 4
      },
      "C_Cpp.intelliSenseEngineFallback": {
        "type": "string",
        "enum": [
          "Enabled",
          "Disabled"
        ],
        "default": "Disabled",
        "markdownDescription": "Controls whether the IntelliSense engine will automatically switch to the Tag Parser for translation units containing `#include` errors.",
        "scope": 4
      },
      "C_Cpp.autocomplete": {
        "type": "string",
        "enum": [
          "Default",
          "Disabled"
        ],
        "default": "Default",
        "markdownDescription": "Controls the auto-completion provider. If `Disabled` and you want word-based completion, you will also need to set `\"[cpp]\": {\"editor.wordBasedSuggestions\": true}` (and similarly for `c` and `cuda-cpp` languages).",
        "enumDescriptions": [
          "Uses the active IntelliSense engine.",
          "Uses the word-based completion provided by Visual Studio Code."
        ],
        "scope": 4
      },
      "C_Cpp.errorSquiggles": {
        "type": "string",
        "enum": [
          "Enabled",
          "Disabled",
          "EnabledIfIncludesResolve"
        ],
        "default": "EnabledIfIncludesResolve",
        "description": "Controls whether suspected compile errors detected by the IntelliSense engine will be reported back to the editor. It also controls whether code analysis warnings are reported if includes can't be found. This setting is ignored by the Tag Parser engine.",
        "scope": 4
      },
      "C_Cpp.dimInactiveRegions": {
        "type": "boolean",
        "default": true,
        "description": "Controls whether inactive preprocessor blocks are colored differently than active code. This setting has no effect if IntelliSense is disabled or if using the Default High Contrast theme.",
        "scope": 4
      },
      "C_Cpp.inactiveRegionOpacity": {
        "type:": "number",
        "default": 0.55,
        "markdownDescription": "Controls the opacity of inactive preprocessor blocks. Scales between `0.1` and `1.0`. This setting only applies when inactive region dimming is enabled.",
        "scope": 4,
        "minimum": 0.1,
        "maximum": 1
      },
      "C_Cpp.inactiveRegionForegroundColor": {
        "type": "string",
        "description": "Controls the font coloring of inactive preprocessor blocks. Input is in the form a hexadecimal color code or a valid Theme Color. If not set, this defaults to the syntax coloring scheme of the editor. This setting only applies when inactive region dimming is enabled.",
        "scope": 4
      },
      "C_Cpp.inactiveRegionBackgroundColor": {
        "type": "string",
        "description": "Controls the background coloring of inactive preprocessor blocks. Input is in the form a hexadecimal color code or a valid Theme Color. If not set, this defaults to transparent. This setting only applies when inactive region dimming is enabled.",
        "scope": 4
      },
      "C_Cpp.inlayHints.autoDeclarationTypes.enabled": {
        "type": "boolean",
        "default": false,
        "markdownDescription": "Display inlay hints for deduced type when `auto` is used in a declaration:\n```cpp \n\n auto index /* : int */ = 0;\n```",
        "scope": 1
      },
      "C_Cpp.inlayHints.autoDeclarationTypes.showOnLeft": {
        "type": "boolean",
        "default": false,
        "markdownDescription": "Display inlay hints for deduced type when `auto` is used in a declaration on the left of the identifier:\n```cpp \n\n auto /* int */ index = 0;\n```",
        "scope": 1
      },
      "C_Cpp.inlayHints.parameterNames.enabled": {
        "type": "boolean",
        "default": false,
        "markdownDescription": "Display inlay hints for parameter names:\n```cpp \n\n int a = getArea(/* width: */ x, /* height: */ y);\n```",
        "scope": 1
      },
      "C_Cpp.inlayHints.parameterNames.suppressWhenArgumentContainsName": {
        "type": "boolean",
        "default": true,
        "markdownDescription": "Suppress parameter name hints when the argument text or inline comment contains the parameter name:\n```cpp \n\n int a = getArea(width, /* height: */ y);\n```",
        "scope": 1
      },
      "C_Cpp.inlayHints.parameterNames.hideLeadingUnderscores": {
        "type": "boolean",
        "default": true,
        "markdownDescription": "Hide leading `_` in parameter name hints.",
        "scope": 1
      },
      "C_Cpp.inlayHints.referenceOperator.enabled": {
        "type": "boolean",
        "default": false,
        "markdownDescription": "Display the inlay hint reference operator `&` for parameters passed by non-const reference:\n```cpp \n\n swap(/* &first: */ str1, /* &last: */ str2);\n```",
        "scope": 1
      },
      "C_Cpp.inlayHints.referenceOperator.showSpace": {
        "type": "boolean",
        "default": false,
        "markdownDescription": "Controls whether a space is shown after `&` for parameters passed by non-const reference:\n```cpp \n\n swap(/* & first: */ str1, /* & last: */ str2);\n```",
        "scope": 1
      },
      "C_Cpp.loggingLevel": {
        "type": "string",
        "enum": [
          "None",
          "Error",
          "Warning",
          "Information",
          "Debug"
        ],
        "default": "Error",
        "markdownDescription": "The verbosity of logging in the Output Panel. The order of levels from least verbose to most verbose is: `None` < `Error` < `Warning` < `Information` < `Debug`.",
        "scope": 3
      },
      "C_Cpp.autoAddFileAssociations": {
        "type": "boolean",
        "default": true,
        "markdownDescription": "Controls whether files are automatically added to `#files.associations#` when they are the target of a navigation operation from a C/C++ file.",
        "scope": 3
      },
      "C_Cpp.workspaceParsingPriority": {
        "type": "string",
        "enum": [
          "highest",
          "high",
          "medium",
          "low"
        ],
        "default": "highest",
        "markdownDescription": "Controls whether parsing of the non-active workspace files uses sleeps to avoid using 100% CPU. The values `highest`/`high`/`medium`/`low` correspond to approximately 100/75/50/25% CPU usage.",
        "scope": 3
      },
      "C_Cpp.workspaceSymbols": {
        "type": "string",
        "enum": [
          "All",
          "Just My Code"
        ],
        "default": "Just My Code",
        "description": "The symbols to include in the query results when 'Go to Symbol in Workspace' is invoked.",
        "scope": 3
      },
      "C_Cpp.exclusionPolicy": {
        "type": "string",
        "enum": [
          "checkFolders",
          "checkFilesAndFolders"
        ],
        "default": "checkFolders",
        "markdownDescription": "Instructs the extension when to use the `#files.exclude#` (and `#C_Cpp.files.exclude#`) setting when determining which files should be added to the code navigation database while traversing through the paths in the `browse.path` array. If your `#files.exclude#` setting only contains folders, then `checkFolders` is the best choice and will increase the speed at which the extension can initialize the code navigation database.",
        "enumDescriptions": [
          "The exclusion filters will only be evaluated once per folder (individual files are not checked).",
          "The exclusion filters will be evaluated against every file and folder encountered."
        ],
        "scope": 4
      },
      "C_Cpp.preferredPathSeparator": {
        "type": "string",
        "enum": [
          "Forward Slash",
          "Backslash"
        ],
        "default": "Forward Slash",
        "markdownDescription": "The character used as a path separator for `#include` auto-completion results.",
        "scope": 6
      },
      "C_Cpp.simplifyStructuredComments": {
        "type": "boolean",
        "default": true,
        "markdownDescription": "If `true`, tooltips of hover and auto-complete will only display certain labels of structured comments. Otherwise, all comments are displayed.",
        "scope": 1
      },
      "C_Cpp.commentContinuationPatterns": {
        "type": "array",
        "default": [
          "/**"
        ],
        "items": {
          "anyOf": [
            {
              "type": "string",
              "markdownDescription": "The pattern that begins a multiline or single line comment block. The continuation pattern defaults to ` * ` for multiline comment blocks or this string for single line comment blocks."
            },
            {
              "type": "object",
              "properties": {
                "begin": {
                  "type": "string",
                  "description": "The pattern that begins a multiline or single line comment block."
                },
                "continue": {
                  "type": "string",
                  "description": "The text that will be inserted on the next line when Enter is pressed inside a multiline or single line comment block."
                }
              }
            }
          ]
        },
        "description": "Defines the editor behavior for when the Enter key is pressed inside a multiline or single line comment block.",
        "scope": 3
      },
      "C_Cpp.configurationWarnings": {
        "type": "string",
        "enum": [
          "Enabled",
          "Disabled"
        ],
        "default": "Enabled",
        "description": "Determines whether pop up notifications will be shown when a configuration provider extension is unable to provide a configuration for a source file.",
        "scope": 4
      },
      "C_Cpp.intelliSenseCachePath": {
        "type": "string",
        "markdownDescription": "Defines the folder path for cached precompiled headers used by IntelliSense. The default cache path is `%LocalAppData%/Microsoft/vscode-cpptools` on Windows, `$XDG_CACHE_HOME/vscode-cpptools/` on Linux (or `$HOME/.cache/vscode-cpptools/` if `XDG_CACHE_HOME` is not defined), and `$HOME/Library/Caches/vscode-cpptools/` on macOS. The default path will be used if no path is specified or if a specified path is invalid.",
        "scope": 6
      },
      "C_Cpp.intelliSenseCacheSize": {
        "type": "number",
        "default": 5120,
        "markdownDescription": "Maximum size of the per-workspace hard drive space in megabytes (MB) for cached precompiled headers; the actual usage may fluctuate around this value. The default size is `5120` MB. Precompiled header caching is disabled when the size is `0`.",
        "scope": 6,
        "minimum": 0
      },
      "C_Cpp.intelliSenseMemoryLimit": {
        "type": "number",
        "default": 4096,
        "markdownDescription": "Memory usage limit in megabytes (MB) of an IntelliSense process. The default is `4096` and the maximum is `16384`. The extension will shutdown and restart an IntelliSense process when it exceeds the limit.",
        "scope": 6,
        "minimum": 256,
        "maximum": 16384
      },
      "C_Cpp.intelliSenseUpdateDelay": {
        "type": "number",
        "default": 2000,
        "description": "Controls the delay in milliseconds before IntelliSense starts updating after a modification.",
        "scope": 1,
        "minimum": 500,
        "maximum": 3000
      },
      "C_Cpp.default.includePath": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "markdownDescription": "The value to use in a configuration if `includePath` is not specified in `c_cpp_properties.json`. If `includePath` is specified, add `${default}` to the array to insert the values from this setting. Usually, this should not include system includes; instead, set `#C_Cpp.default.compilerPath#`.",
        "scope": 6
      },
      "C_Cpp.default.defines": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "markdownDescription": "The value to use in a configuration if `defines` is not specified, or the values to insert if `${default}` is present in `defines`.",
        "scope": 6
      },
      "C_Cpp.default.macFrameworkPath": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "markdownDescription": "The value to use in a configuration if `macFrameworkPath` is not specified, or the values to insert if `${default}` is present in `macFrameworkPath`.",
        "scope": 6
      },
      "C_Cpp.default.windowsSdkVersion": {
        "type": "string",
        "markdownDescription": "Version of the Windows SDK include path to use on Windows, e.g. `10.0.17134.0`.",
        "pattern": "^((\\d{2}\\.\\d{1}\\.\\d{5}\\.\\d{1}$|^8\\.1)|())$",
        "scope": 6
      },
      "C_Cpp.default.compileCommands": {
        "type": "string",
        "markdownDescription": "The value to use in a configuration if `compileCommands` is either not specified, or set to `${default}`.",
        "scope": 6
      },
      "C_Cpp.default.forcedInclude": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "markdownDescription": "The value to use in a configuration if `forcedInclude` is not specified, or the values to insert if `${default}` is present in `forcedInclude`.",
        "scope": 6
      },
      "C_Cpp.default.intelliSenseMode": {
        "type": "string",
        "enum": [
          "",
          "macos-clang-x86",
          "macos-clang-x64",
          "macos-clang-arm",
          "macos-clang-arm64",
          "macos-gcc-x86",
          "macos-gcc-x64",
          "macos-gcc-arm",
          "macos-gcc-arm64",
          "linux-clang-x86",
          "linux-clang-x64",
          "linux-clang-arm",
          "linux-clang-arm64",
          "linux-gcc-x86",
          "linux-gcc-x64",
          "linux-gcc-arm",
          "linux-gcc-arm64",
          "windows-clang-x86",
          "windows-clang-x64",
          "windows-clang-arm",
          "windows-clang-arm64",
          "windows-gcc-x86",
          "windows-gcc-x64",
          "windows-gcc-arm",
          "windows-gcc-arm64",
          "windows-msvc-x86",
          "windows-msvc-x64",
          "windows-msvc-arm",
          "windows-msvc-arm64",
          "clang-x86",
          "clang-x64",
          "clang-arm",
          "clang-arm64",
          "gcc-x86",
          "gcc-x64",
          "gcc-arm",
          "gcc-arm64",
          "msvc-x86",
          "msvc-x64",
          "msvc-arm",
          "msvc-arm64"
        ],
        "markdownDescription": "The value to use in a configuration if `intelliSenseMode` is either not specified or set to `${default}`.",
        "scope": 6
      },
      "C_Cpp.default.compilerPath": {
        "type": "string",
        "default": null,
        "markdownDescription": "The value to use in a configuration if `compilerPath` is either not specified or set to `${default}`.",
        "scope": 6
      },
      "C_Cpp.default.compilerArgs": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "markdownDescription": "The value to use in configuration if `compilerArgs` is either not specified or set to `${default}`.",
        "scope": 6
      },
      "C_Cpp.default.cStandard": {
        "type": "string",
        "enum": [
          "",
          "c89",
          "c99",
          "c11",
          "c17",
          "gnu89",
          "gnu99",
          "gnu11",
          "gnu17"
        ],
        "markdownDescription": "The value to use in a configuration if `cStandard` is either not specified or set to `${default}`.",
        "scope": 4
      },
      "C_Cpp.default.cppStandard": {
        "type": "string",
        "enum": [
          "",
          "c++98",
          "c++03",
          "c++11",
          "c++14",
          "c++17",
          "c++20",
          "c++23",
          "gnu++98",
          "gnu++03",
          "gnu++11",
          "gnu++14",
          "gnu++17",
          "gnu++20",
          "gnu++23"
        ],
        "markdownDescription": "The value to use in a configuration if `cppStandard` is either not specified or set to `${default}`.",
        "scope": 4
      },
      "C_Cpp.default.configurationProvider": {
        "type": "string",
        "markdownDescription": "The value to use in a configuration if `configurationProvider` is either not specified or set to `${default}`.",
        "scope": 4
      },
      "C_Cpp.default.mergeConfigurations": {
        "type": "boolean",
        "markdownDescription": "Set to `true` to merge include paths, defines, and forced includes with those from a configuration provider.",
        "scope": 4
      },
      "C_Cpp.default.browse.path": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "default": null,
        "markdownDescription": "The value to use in a configuration if `browse.path` is not specified, or the values to insert if `${default}` is present in `browse.path`.",
        "scope": 6
      },
      "C_Cpp.default.browse.databaseFilename": {
        "type": "string",
        "markdownDescription": "The value to use in a configuration if `browse.databaseFilename` is either not specified or set to `${default}`.",
        "scope": 6
      },
      "C_Cpp.default.browse.limitSymbolsToIncludedHeaders": {
        "type": "boolean",
        "default": true,
        "markdownDescription": "The value to use in a configuration if `browse.limitSymbolsToIncludedHeaders` is either not specified or set to `${default}`.",
        "scope": 4
      },
      "C_Cpp.default.systemIncludePath": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "markdownDescription": "The value to use for the system include path. If set, it overrides the system include path acquired via `compilerPath` and `compileCommands` settings.",
        "scope": 6
      },
      "C_Cpp.default.customConfigurationVariables": {
        "type": [
          "object",
          "null"
        ],
        "default": null,
        "patternProperties": {
          "(^.+$)": {
            "type": "string"
          }
        },
        "markdownDescription": "The value to use in a configuration if `customConfigurationVariables` is not set, or the values to insert if `${default}` is present as a key in `customConfigurationVariables`.",
        "scope": 6
      },
      "C_Cpp.default.enableConfigurationSquiggles": {
        "type": "boolean",
        "default": true,
        "markdownDescription": "Controls whether the extension will report errors detected in `c_cpp_properties.json`.",
        "scope": 4
      },
      "C_Cpp.default.dotConfig": {
        "type": "string",
        "default": null,
        "markdownDescription": "The value to use in a configuration if `dotConfig` is not specified, or the value to insert if `${default}` is present in `dotConfig`.",
        "scope": 4
      },
      "C_Cpp.updateChannel": {
        "type": "string",
        "enum": [
          "Default",
          "Insiders"
        ],
        "default": "Default",
        "markdownDescription": "Set to `Insiders` to automatically download and install the latest Insiders builds of the extension, which include upcoming features and bug fixes.",
        "scope": 1,
        "deprecationMessage": "This setting is deprecated. Pre-release extensions are now available via the Marketplace."
      },
      "C_Cpp.experimentalFeatures": {
        "type": "string",
        "enum": [
          "Enabled",
          "Disabled"
        ],
        "default": "Disabled",
        "description": "Controls whether \"experimental\" features are usable.",
        "scope": 3
      },
      "C_Cpp.suggestSnippets": {
        "type": "boolean",
        "default": true,
        "markdownDescription": "If `true`, snippets are provided by the language server.",
        "scope": 4
      },
      "C_Cpp.enhancedColorization": {
        "type": "string",
        "enum": [
          "Enabled",
          "Disabled"
        ],
        "default": "Enabled",
        "markdownDescription": "If enabled, code is colorized based on IntelliSense. This setting only applies if `#C_Cpp.intelliSenseEngine#` is set to `Default`.",
        "scope": 3
      },
      "C_Cpp.vcpkg.enabled": {
        "type": "boolean",
        "default": true,
        "markdownDescription": "Enable integration services for the [vcpkg dependency manager](https://aka.ms/vcpkg/).",
        "scope": 4
      },
      "C_Cpp.addNodeAddonIncludePaths": {
        "type": "boolean",
        "default": false,
        "markdownDescription": "Add include paths from `nan` and `node-addon-api` when they are dependencies.",
        "scope": 1
      },
      "C_Cpp.renameRequiresIdentifier": {
        "type": "boolean",
        "default": true,
        "markdownDescription": "If `true`, 'Rename Symbol' will require a valid C/C++ identifier.",
        "scope": 1
      },
      "C_Cpp.debugger.useBacktickCommandSubstitution": {
        "type": "boolean",
        "default": false,
        "markdownDescription": "If `true`, debugger shell command substitution will use obsolete backtick ``(`)``.",
        "scope": 3
      },
      "C_Cpp.codeFolding": {
        "type": "string",
        "enum": [
          "Enabled",
          "Disabled"
        ],
        "default": "Enabled",
        "description": "If enabled, code folding ranges are provided by the language server.",
        "scope": 3
      },
      "C_Cpp.autocompleteAddParentheses": {
        "type": "boolean",
        "default": false,
        "markdownDescription": "If `true`, autocomplete will automatically add `(` after function calls, in which case `)` may also be added, depending on the value of the `#editor.autoClosingBrackets#` setting.",
        "scope": 4
      },
      "C_Cpp.files.exclude": {
        "type": "object",
        "markdownDescription": "Configure glob patterns for excluding folders (and files if `#C_Cpp.exclusionPolicy#` is changed). These are specific to the C/C++ extension and are in addition to `#files.exclude#`, but unlike `#files.exclude#` they also apply to paths outside the current workspace folder and are not removed from the Explorer view. Read more about glob patterns [here](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options).",
        "default": {
          "**/.vscode": true,
          "**/.vs": true
        },
        "additionalProperties": {
          "anyOf": [
            {
              "type": "boolean",
              "markdownDescription": "The glob pattern to match file paths against. Set to `true` or `false` to enable or disable the pattern."
            },
            {
              "type": "object",
              "properties": {
                "when": {
                  "type": "string",
                  "pattern": "\\w*\\$\\(basename\\)\\w*",
                  "default": "$(basename).ext",
                  "markdownDescription": "Additional check on the siblings of a matching file. Use `$(basename)` as variable for the matching file name."
                }
              }
            }
          ]
        },
        "scope": 4
      },
      "C_Cpp.debugShortcut": {
        "type": "boolean",
        "default": true,
        "description": "Show the \"Run and Debug\" play button and \"Add Debug Configuration\" gear in the editor title bar for C++ files.",
        "scope": 4
      },
      "C_Cpp.legacyCompilerArgsBehavior": {
        "type": "boolean",
        "default": false,
        "markdownDescription": "Enable pre-v1.10.0 behavior for how shell escaping is handled in compiler arg settings. Shell escaping is no longer expected or supported by default in arg arrays starting in v1.10.0.",
        "scope": 4
      }
    }
  }
]