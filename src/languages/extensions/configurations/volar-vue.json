[
  {
    "type": "object",
    "title": "Volar",
    "properties": {
      "vue-semantic-server.trace.server": {
        "scope": 3,
        "type": "string",
        "enum": [
          "off",
          "messages",
          "verbose"
        ],
        "default": "off",
        "description": "Traces the communication between VS Code and the language server."
      },
      "vue-syntactic-server.trace.server": {
        "scope": 3,
        "type": "string",
        "enum": [
          "off",
          "messages",
          "verbose"
        ],
        "default": "off",
        "description": "Traces the communication between VS Code and the language server."
      },
      "volar.vueserver.configFilePath": {
        "type": "string",
        "default": "./volar.config.js",
        "description": "Path to volar.config.js.",
        "scope": 3
      },
      "volar.vueserver.maxFileSize": {
        "type": "number",
        "default": 20971520,
        "description": "Maximum file size for Vue Server to load. (default: 20MB)",
        "scope": 3
      },
      "volar.vueserver.petiteVue.processHtmlFile": {
        "type": "boolean",
        "default": false,
        "scope": 3
      },
      "volar.vueserver.vitePress.processMdFile": {
        "type": "boolean",
        "default": false,
        "scope": 3
      },
      "volar.vueserver.json.customBlockSchemaUrls": {
        "type": "object",
        "scope": 3
      },
      "volar.vueserver.diagnosticModel": {
        "type": "string",
        "default": "push",
        "enum": [
          "push",
          "pull"
        ],
        "enumDescriptions": [
          "Diagnostic push by language server.",
          "Diagnostic pull by language client."
        ],
        "description": "Diagnostic update model.",
        "scope": 3
      },
      "volar.vueserver.maxOldSpaceSize": {
        "type": [
          "number",
          "null"
        ],
        "default": null,
        "description": "Set --max-old-space-size option on server process. If you have problem on frequently \"Request textDocument/** failed.\" error, try setting higher memory(MB) on it.",
        "scope": 3
      },
      "volar.vueserver.reverseConfigFilePriority": {
        "type": "boolean",
        "default": false,
        "description": "Reverse priority for tsconfig pickup.",
        "scope": 3
      },
      "volar.vueserver.additionalExtensions": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "default": [],
        "description": "List any additional file extensions that should be processed as Vue files (requires restart).",
        "scope": 3
      },
      "volar.vueserver.fullCompletionList": {
        "type": "boolean",
        "default": false,
        "description": "Enable this option if you want to get complete CompletionList in language client. (Disable for better performance)",
        "scope": 3
      },
      "volar.icon.splitEditors": {
        "type": "boolean",
        "default": false,
        "description": "Show split editor icon in title area of editor.",
        "scope": 3
      },
      "volar.doctor.status": {
        "type": "boolean",
        "default": true,
        "description": "Show known problems in status bar.",
        "scope": 3
      },
      "volar.format.initialIndent": {
        "type": "object",
        "description": "Whether to have initial indent.",
        "default": {
          "html": true
        },
        "properties": {
          "html": {
            "type": "boolean",
            "default": true
          },
          "typescript": {
            "type": "boolean",
            "default": false
          },
          "javascript": {
            "type": "boolean",
            "default": false
          },
          "typescriptreact": {
            "type": "boolean",
            "default": false
          },
          "javascriptreact": {
            "type": "boolean",
            "default": false
          },
          "css": {
            "type": "boolean",
            "default": false
          },
          "scss": {
            "type": "boolean",
            "default": false
          },
          "less": {
            "type": "boolean",
            "default": false
          },
          "sass": {
            "type": "boolean",
            "default": false
          },
          "jade": {
            "type": "boolean",
            "default": false
          },
          "json": {
            "type": "boolean",
            "default": false
          },
          "jsonc": {
            "type": "boolean",
            "default": false
          },
          "json5": {
            "type": "boolean",
            "default": false
          }
        },
        "scope": 3
      },
      "volar.takeOverMode.extension": {
        "type": "string",
        "default": "Vue.volar",
        "description": "The extension that take over language support for *.ts.",
        "scope": 3
      },
      "volar.splitEditors.layout.left": {
        "type": "array",
        "default": [
          "script",
          "scriptSetup",
          "styles"
        ],
        "scope": 3
      },
      "volar.splitEditors.layout.right": {
        "type": "array",
        "default": [
          "template",
          "customBlocks"
        ],
        "scope": 3
      },
      "vue.features.updateImportsOnFileMove.enable": {
        "type": "boolean",
        "default": false,
        "description": "Enabled update imports on file move.",
        "scope": 3
      },
      "vue.features.codeActions.enable": {
        "type": "boolean",
        "default": false,
        "description": "Enabled code actions.",
        "scope": 3
      },
      "vue.features.codeLens.enable": {
        "type": "boolean",
        "default": true,
        "description": "Enabled code lens.",
        "scope": 3
      },
      "vue.features.complete.tagNameCasing": {
        "type": "string",
        "enum": [
          "autoKebab",
          "autoPascal",
          "kebab",
          "pascal"
        ],
        "enumDescriptions": [
          "Auto Detect from Content (Fallback to <kebab-case> if detect failed)",
          "Auto Detect from Content  (Fallback to <PascalCase> if detect failed)",
          "<kebab-case>",
          "<PascalCase>"
        ],
        "default": "autoPascal",
        "description": "Preferred tag name case.",
        "scope": 3
      },
      "vue.features.complete.propNameCasing": {
        "type": "string",
        "enum": [
          "autoKebab",
          "autoCamel",
          "kebab",
          "camel"
        ],
        "enumDescriptions": [
          "Auto Detect from Content (Fallback to :kebab-case=\"...\" if detect failed)",
          "Auto Detect from Content (Fallback to :camelCase=\"...\" if detect failed)",
          ":kebab-case=\"...\"",
          ":camelCase=\"...\""
        ],
        "default": "autoKebab",
        "description": "Preferred attr name case.",
        "scope": 3
      },
      "vue.features.complete.normalizeComponentImportName": {
        "type": "boolean",
        "default": true,
        "description": "Normalize import name for auto import. (\"myCompVue\" -> \"MyComp\")",
        "scope": 3
      },
      "vue.features.autoInsert.parentheses": {
        "type": "boolean",
        "default": true,
        "description": "Auto-wrap `()` to As Expression in interpolations for fix issue #520.",
        "scope": 3
      },
      "vue.features.autoInsert.dotValue": {
        "type": "boolean",
        "default": false,
        "description": "Auto-complete Ref value with `.value`.",
        "scope": 3
      },
      "vue.features.autoInsert.bracketSpacing": {
        "type": "boolean",
        "default": true,
        "description": "Auto add space between double curly brackets: {{|}} -> {{ | }}",
        "scope": 3
      },
      "vue.features.inlayHints.missingProps": {
        "type": "boolean",
        "default": false,
        "description": "Show inlay hints for missing required props.",
        "scope": 3
      },
      "vue.features.inlayHints.inlineHandlerLeading": {
        "type": "boolean",
        "default": false,
        "description": "Show inlay hints for event argument in inline handlers.",
        "scope": 3
      }
    }
  }
]