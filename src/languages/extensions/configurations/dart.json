[
  {
    "title": "Analyzer",
    "order": 1,
    "properties": {
      "dart.additionalAnalyzerFileExtensions": {
        "type": "array",
        "default": [],
        "description": "Additional file extensions that should be analyzed (usually used in combination with analyzer plugins).",
        "items": {
          "type": "string"
        },
        "scope": 3
      },
      "dart.analysisExcludedFolders": {
        "type": "array",
        "default": [],
        "description": "An array of paths to be excluded from Dart analysis. This option should usually be set at the Workspace level. Excluded folders will also be ignored when detecting project types.",
        "items": {
          "type": "string"
        },
        "scope": 4
      },
      "dart.analyzeAngularTemplates": {
        "type": "boolean",
        "default": true,
        "markdownDescription": "Whether to enable analysis for AngularDart templates (requires the Angular analyzer plugin to be enabled in `analysis_options.yaml`).",
        "scope": 3
      },
      "dart.analyzerAdditionalArgs": {
        "type": "array",
        "default": [],
        "description": "Additional arguments to pass to the Dart analysis server.",
        "scope": 3,
        "items": {
          "type": "string"
        }
      },
      "dart.analyzerDiagnosticsPort": {
        "type": [
          "null",
          "number"
        ],
        "default": null,
        "description": "The port number to be used for the Dart analyzer diagnostic server.",
        "scope": 3
      },
      "dart.analyzerPath": {
        "type": [
          "null",
          "string"
        ],
        "default": null,
        "description": "The path to a custom Dart analysis server.",
        "scope": 6
      },
      "dart.analyzerSshHost": {
        "type": [
          "null",
          "string"
        ],
        "default": null,
        "description": "An SSH host to run the analysis server.\nThis can be useful when modifying code on a remote machine using SSHFS.",
        "scope": 3
      },
      "dart.analyzerVmServicePort": {
        "type": [
          "null",
          "number"
        ],
        "default": null,
        "description": "The port number to be used for the Dart analysis server VM service.",
        "scope": 3
      },
      "dart.notifyAnalyzerErrors": {
        "type": "boolean",
        "default": true,
        "description": "Whether to show a notification the first few times an analysis server exception occurs.",
        "scope": 3
      },
      "dart.onlyAnalyzeProjectsWithOpenFiles": {
        "type": "boolean",
        "default": false,
        "description": "Whether to ignore workspace folders and perform analysis based on the open files, as if no workspace was open at all. This allows opening large folders without causing them to be completely analyzed.",
        "scope": 3
      },
      "dart.showTodos": {
        "type": "boolean",
        "default": true,
        "description": "Whether to show TODOs in the Problems list.",
        "scope": 3
      },
      "dart.useLsp": {
        "type": "boolean",
        "default": true,
        "markdownDescription": "Whether to run the analyzer in [LSP mode](https://microsoft.github.io/language-server-protocol/). Some features are not supported if this setting is disabled and in a future release LSP will be the only supported option.",
        "scope": 3
      }
    }
  },
  {
    "title": "DevTools",
    "order": 1,
    "properties": {
      "dart.updateDevTools": {
        "type": "boolean",
        "default": true,
        "description": "Whether to update DevTools if you are not using the latest version. This only applies to SDKs prior to Dart v2.15, since DevTools is included in the SDK since v2.15.",
        "scope": 3
      },
      "dart.devToolsBrowser": {
        "enum": [
          "chrome",
          "default"
        ],
        "enumDescriptions": [
          "Locate and launch Google Chrome from your system",
          "Use your systems default web browser"
        ],
        "default": "chrome",
        "description": "Whether to launch external DevTools windows using Chrome or the system default browser.",
        "scope": 3
      },
      "dart.devToolsPort": {
        "type": [
          "null",
          "number"
        ],
        "default": null,
        "description": "The port number to be used for the Dart DevTools.",
        "scope": 3
      },
      "dart.devToolsReuseWindows": {
        "type": "boolean",
        "default": true,
        "description": "Whether to try to reuse existing DevTools windows instead of launching new ones. Only works for instances of DevTools launched by the DevTools server on the local machine.",
        "scope": 3
      },
      "dart.devToolsTheme": {
        "enum": [
          "dark",
          "light"
        ],
        "default": "dark",
        "description": "The theme to use for Dart DevTools.",
        "scope": 3
      },
      "dart.embedDevTools": {
        "type": "boolean",
        "default": true,
        "markdownDescription": "Whether to load [Dart DevTools](https://dart.dev/tools/dart-devtools) embedded inside VS Code.",
        "scope": 3
      },
      "dart.openDevTools": {
        "enum": [
          "never",
          "flutter",
          "always"
        ],
        "enumDescriptions": [
          "Do not automatically launch DevTools when starting a debug session",
          "Automatically launch DevTools when starting a Flutter debug session",
          "Automatically launch DevTools when starting any debug session"
        ],
        "default": "never",
        "description": "Whether to automatically open DevTools at the start of a debug session. If embedded DevTools is enabled, this will launch the Widget Inspector embedded for Flutter projects, or launch DevTools externally in a browser for Dart projects.",
        "scope": 3
      },
      "dart.shareDevToolsWithFlutter": {
        "type": "boolean",
        "default": true,
        "markdownDescription": "Whether to eagerly run DevTools for Flutter workspaces and share the spawned server with `flutter run`.",
        "scope": 3
      },
      "dart.showInspectorNotificationsForWidgetErrors": {
        "type": "boolean",
        "default": true,
        "markdownDescription": "Whether to show notifications for widget errors that offer Inspect Widget links. This requires that the `#dart.shareDevToolsWithFlutter#` setting is also enabled.",
        "scope": 3
      }
    }
  },
  {
    "title": "Editor",
    "order": 1,
    "properties": {
      "dart.analysisServerFolding": {
        "type": "boolean",
        "default": true,
        "description": "Whether to use folding data from the Dart analysis server instead of the built-in VS Code indent-based folding.",
        "scope": 3
      },
      "dart.autoImportCompletions": {
        "type": "boolean",
        "default": true,
        "description": "Whether to include symbols that have not been imported in the code completion list and automatically insert the required import when selecting them (requires restart).",
        "scope": 3
      },
      "dart.automaticCommentSlashes": {
        "enum": [
          "none",
          "tripleSlash",
          "all"
        ],
        "default": "tripleSlash",
        "markdownDescription": "Determines when to insert comment slashes when pressing `<enter>` in the editor (requires restart).\n\nWhen using `tripleSlash`, double-slashes will still be included when breaking existing double-slash comments across additional lines.",
        "enumDescriptions": [
          "Never insert slashes automatically",
          "Insert `///` when pressing `<enter>` at the end of a triple-slash comment",
          "Insert `///` when pressing `<enter>` at the end of a triple-slash comment and also `//` when pressing `<enter>` at the end of a double-slash comment"
        ],
        "scope": 3
      },
      "dart.closingLabels": {
        "type": "boolean",
        "default": true,
        "description": "Whether to show annotations against constructor, method invocations and lists that span multiple lines.",
        "scope": 3
      },
      "dart.completeFunctionCalls": {
        "type": "boolean",
        "default": true,
        "markdownDescription": "Whether to insert parentheses and placeholders for positional and required arguments during code completions when using LSP. This feature is automatically disabled if commit characters are enabled.",
        "scope": 4
      },
      "dart.doNotFormat": {
        "type": "array",
        "default": [],
        "markdownDescription": "An array of glob patterns that should be excluded for formatting. The pattern is matched against the absolute path of the file. Use `**/test/**` to skip formatting for all test directories.",
        "items": {
          "type": "string"
        },
        "scope": 4
      },
      "dart.enableCompletionCommitCharacters": {
        "type": "boolean",
        "default": false,
        "markdownDescription": "Whether to automatically commit the selected completion item when pressing certain keys such as . , ( and [. This setting does not currently apply to LSP, see `#dart.previewCommitCharacters#`.",
        "scope": 4
      },
      "dart.enableSdkFormatter": {
        "type": "boolean",
        "default": true,
        "markdownDescription": "Whether to enable the [dart_style](https://pub.dev/packages/dart_style) formatter for Dart code.",
        "scope": 3
      },
      "dart.enableSnippets": {
        "type": "boolean",
        "default": true,
        "description": "Whether to include Dart and Flutter snippets in code completion.",
        "scope": 3
      },
      "dart.insertArgumentPlaceholders": {
        "type": "boolean",
        "default": true,
        "markdownDescription": "Whether to insert argument placeholders during code completions. This feature is automatically disabled when `enableCompletionCommitCharacters` is enabled.",
        "scope": 4
      },
      "dart.lineLength": {
        "type": "integer",
        "default": 80,
        "description": "The maximum length of a line of code. This is used by the document formatter.",
        "scope": 4
      },
      "dart.lspSnippetTextEdits": {
        "type": "boolean",
        "default": true,
        "markdownDescription": "Whether to enable [Snippet support in LSP TextEdits](https://github.com/rust-analyzer/rust-analyzer/blob/979e788957ced1957ee9ac1da70fb97abf9fe2b1/docs/dev/lsp-extensions.md#snippet-textedit).",
        "scope": 3
      },
      "dart.renameFilesWithClasses": {
        "default": "never",
        "enum": [
          "never",
          "prompt",
          "always"
        ],
        "markdownDescription": "Whether to rename files when renaming classes with matching names (for example renaming 'class Person' inside 'person.dart'). If set to 'prompt', will ask each time before renaming. If set to 'always', the file will automatically be renamed. This setting requires using LSP and a Dart SDK of at least v2.15.",
        "scope": 3
      },
      "dart.showDartPadSampleCodeLens": {
        "type": "boolean",
        "default": true,
        "description": "Whether to show CodeLens actions in the editor for opening online DartPad samples.",
        "scope": 3
      },
      "dart.showIgnoreQuickFixes": {
        "type": "boolean",
        "default": true,
        "description": "Whether to show quick fixes for ignoring hints and lints.",
        "scope": 3
      },
      "dart.showMainCodeLens": {
        "type": "boolean",
        "default": true,
        "description": "Whether to show CodeLens actions in the editor for quick running / debugging scripts with main functions.",
        "scope": 3
      },
      "dart.showTestCodeLens": {
        "type": "boolean",
        "default": true,
        "description": "Whether to show CodeLens actions in the editor for quick running / debugging tests.",
        "scope": 3
      },
      "dart.updateImportsOnRename": {
        "type": "boolean",
        "default": true,
        "description": "Whether to automatically update imports when moving or renaming files. Currently only supports single file moves / renames.",
        "scope": 3
      },
      "dart.warnWhenEditingFilesOutsideWorkspace": {
        "type": "boolean",
        "default": true,
        "description": "Whether to show a warning when modifying files outside of the workspace.",
        "scope": 3
      },
      "dart.warnWhenEditingFilesInPubCache": {
        "type": "boolean",
        "default": true,
        "markdownDescription": "Whether to show a warning when modifying files in the [system package cache](https://dart.dev/tools/pub/glossary#system-cache) directory.",
        "scope": 3
      }
    }
  },
  {
    "title": "Flutter",
    "order": 1,
    "properties": {
      "dart.flutterAdbConnectOnChromeOs": {
        "type": "boolean",
        "default": false,
        "markdownDescription": "Whether to automatically run `adb connect 100.115.92.2:5555` when spawning the Flutter daemon when running on Chrome OS.",
        "scope": 3
      },
      "dart.flutterAdditionalArgs": {
        "type": "array",
        "default": [],
        "markdownDescription": "Additional args to pass to all `flutter` commands including `flutter daemon`. Do not use this to pass arguments to your Flutter app, use the `args` field in a `launch.json` or the `#dart.flutterRunAdditionalArgs#` setting.",
        "scope": 4,
        "items": {
          "type": "string"
        }
      },
      "dart.flutterAttachAdditionalArgs": {
        "type": "array",
        "default": [],
        "markdownDescription": "Additional args to pass to the `flutter attach` command. Using the `args`/`toolArgs` fields in `launch.json` is usually better than this setting as this setting will apply to _all_ projects.",
        "scope": 4,
        "items": {
          "type": "string"
        }
      },
      "dart.flutterCreateAndroidLanguage": {
        "enum": [
          "java",
          "kotlin"
        ],
        "default": "kotlin",
        "description": "The programming language to use for Android apps when creating new projects using the 'Flutter: New Project' command.",
        "scope": 3
      },
      "dart.flutterCreateIOSLanguage": {
        "enum": [
          "objc",
          "swift"
        ],
        "default": "swift",
        "description": "The programming language to use for iOS apps when creating new projects using the 'Flutter: New Project' command.",
        "scope": 3
      },
      "dart.flutterCreateOffline": {
        "type": "boolean",
        "default": false,
        "description": "Whether to use offline mode when creating new projects with the 'Flutter: New Project' command.",
        "scope": 3
      },
      "dart.flutterCreateOrganization": {
        "type": [
          "null",
          "string"
        ],
        "default": null,
        "markdownDescription": "The organization responsible for your new Flutter project, in reverse domain name notation (e.g. `com.google`). This string is used in Java package names and as prefix in the iOS bundle identifier when creating new projects using the 'Flutter: New Project' command.",
        "scope": 3
      },
      "dart.flutterCustomEmulators": {
        "type": "array",
        "default": [],
        "description": "Custom emulators to show in the emulator list for easier launching. If IDs match existing emulators returned by Flutter, the custom emulators will override them.",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "executable": {
              "type": "string"
            },
            "args": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "env": {}
          }
        },
        "scope": 3
      },
      "dart.flutterGutterIcons": {
        "type": "boolean",
        "default": true,
        "description": "Whether to show Flutter icons and colors in the editor gutter.",
        "scope": 3
      },
      "dart.flutterHotReloadOnSave": {
        "enum": [
          "never",
          "always",
          "manual"
        ],
        "enumDescriptions": [
          "Do not reload when saving",
          "Reload for all saves, manual or automatic",
          "Only reload for manual saves (requires pressing Save explicitly if using autosave)"
        ],
        "default": "manual",
        "markdownDescription": "Whether to automatically send a Hot Reload request to Flutter apps during a debug session when saving files. Dart apps are controlled by the hotReloadOnSave setting.",
        "scope": 3
      },
      "dart.hotReloadOnSave": {
        "enum": [
          "never",
          "always",
          "manual"
        ],
        "enumDescriptions": [
          "Do not reload when saving",
          "Reload for all saves, manual or automatic",
          "Only reload for manual saves (requires pressing Save explicitly if using autosave)"
        ],
        "default": "never",
        "markdownDescription": "Whether to automatically send a Hot Reload request to Dart apps during a debug session when saving files. Flutter apps are controlled by the flutterHotReloadOnSave setting.",
        "scope": 3
      },
      "dart.flutterHotRestartOnSave": {
        "type": "boolean",
        "default": true,
        "description": "Whether to automatically send a Hot Restart request during a debug session when saving files if Hot Reload is not available but Hot Restart is.",
        "scope": 3
      },
      "dart.flutterOutline": {
        "type": "boolean",
        "default": true,
        "description": "Whether to show the Flutter Outline tree in the sidebar.",
        "scope": 3
      },
      "dart.flutterRunAdditionalArgs": {
        "type": "array",
        "default": [],
        "markdownDescription": "Additional args to pass to the `flutter run` command. Using the `args`/`toolArgs` fields in `launch.json` is usually better than this setting as this setting will apply to _all_ projects.",
        "scope": 4,
        "items": {
          "type": "string"
        }
      },
      "dart.flutterScreenshotPath": {
        "type": [
          "null",
          "string"
        ],
        "default": null,
        "description": "The path to a directory to save Flutter screenshots.",
        "scope": 6
      },
      "dart.flutterSelectDeviceWhenConnected": {
        "type": "boolean",
        "default": true,
        "description": "Whether to set newly connected devices as the current device in Flutter projects.",
        "scope": 3
      },
      "dart.flutterShowEmulators": {
        "enum": [
          "local",
          "always"
        ],
        "enumDescriptions": [
          "Only show for local workspaces",
          "Always show, even for remote sessions"
        ],
        "default": "local",
        "markdownDescription": "When to show the Flutter emulators. These are usually hidden for remote workspaces because it is usually not possible to see or interact with emulators in a remote session. If you are using remoting/containers in a way that you can interact with launched emulator processes, you may wish to set this to 'always'.",
        "scope": 3
      },
      "dart.flutterShowWebServerDevice": {
        "enum": [
          "remote",
          "always"
        ],
        "enumDescriptions": [
          "Only show for remote workspaces (includes browser-based workspaces)",
          "Always show, even for local sessions"
        ],
        "default": "remote",
        "markdownDescription": "When to show the Flutter headless web-server device. This requires using the Dart Debug extension for Chrome and is usually only used for remote environments where Chrome is not available such as browser/cloud-based IDEs (requires restart).",
        "scope": 3
      },
      "dart.flutterTestAdditionalArgs": {
        "type": "array",
        "default": [],
        "markdownDescription": "Additional args to pass to the `flutter test` command. Using the `args`/`toolArgs` fields in `launch.json` is usually better than this setting as this setting will apply to _all_ projects.",
        "scope": 4,
        "items": {
          "type": "string"
        }
      },
      "dart.flutterTrackWidgetCreation": {
        "type": "boolean",
        "default": true,
        "markdownDescription": "Whether to pass `--track-widget-creation` to Flutter apps (required to support 'Inspect Widget'). This setting is always ignored when running in Profile or Release mode.",
        "scope": 4
      },
      "dart.flutterWebRenderer": {
        "enum": [
          "auto",
          "html",
          "canvaskit"
        ],
        "enumDescriptions": [
          "Allow Flutter to pick the best renderer based on the users device",
          "Always use the HTML renderer",
          "Always use the CanvasKit renderer"
        ],
        "default": "auto",
        "markdownDescription": "Sets the [Web renderer](https://flutter.dev/docs/development/tools/web-renderers) used for Flutter web apps.",
        "scope": 3
      }
    }
  },
  {
    "title": "Logging",
    "order": 1,
    "properties": {
      "dart.analyzerInstrumentationLogFile": {
        "type": [
          "null",
          "string"
        ],
        "default": null,
        "description": "The path to a log file for very detailed logging in the Dart analysis server that may be useful when trying to diagnose analysis server issues.",
        "scope": 6
      },
      "dart.analyzerLogFile": {
        "type": [
          "null",
          "string"
        ],
        "default": null,
        "description": "The path to a log file for communication between Dart Code and the analysis server.",
        "scope": 6
      },
      "dart.dapLogFile": {
        "type": [
          "null",
          "string"
        ],
        "default": null,
        "markdownDescription": "The path to a log file for communication with the DAP debug adapters. This is useful when trying to diagnose issues with debugging such as missed breakpoints.",
        "scope": 6
      },
      "dart.devToolsLogFile": {
        "type": [
          "null",
          "string"
        ],
        "default": null,
        "description": "The path to a low-traffic log file for the Dart DevTools service.",
        "scope": 6
      },
      "dart.extensionLogFile": {
        "type": [
          "null",
          "string"
        ],
        "default": null,
        "description": "The path to a low-traffic log file for basic extension and editor issues.",
        "scope": 6
      },
      "dart.flutterDaemonLogFile": {
        "type": [
          "null",
          "string"
        ],
        "default": null,
        "markdownDescription": "The path to a log file for the `flutter daemon` service, which provides information about connected devices to show in the status bar.",
        "scope": 6
      },
      "dart.flutterRunLogFile": {
        "type": [
          "null",
          "string"
        ],
        "default": null,
        "markdownDescription": "The path to a log file for `flutter run`, which is used to launch Flutter apps from VS Code. This is useful when trying to diagnose issues with apps launching (or failing to) on simulators and devices. Use `${name}` in the log file name to prevent concurrent debug sessions overwriting each others logs.",
        "scope": 6
      },
      "dart.flutterTestLogFile": {
        "type": [
          "null",
          "string"
        ],
        "default": null,
        "markdownDescription": "The path to a log file for `flutter test`, which is used to run unit tests from VS Code. This is useful when trying to diagnose issues with unit test executions. Use `${name}` in the log file name to prevent concurrent debug sessions overwriting each others logs.",
        "scope": 6
      },
      "dart.maxLogLineLength": {
        "type": "number",
        "default": 2000,
        "description": "The maximum length of a line in the log file. Lines longer than this will be truncated and suffixed with an ellipsis.",
        "scope": 3
      },
      "dart.dartTestLogFile": {
        "type": [
          "null",
          "string"
        ],
        "default": null,
        "markdownDescription": "The path to a log file for Dart test runs. This is useful when trying to diagnose issues with unit test executions. Use `${name}` in the log file name to prevent concurrent debug sessions overwriting each others logs.",
        "scope": 6
      },
      "dart.vmServiceLogFile": {
        "type": [
          "null",
          "string"
        ],
        "default": null,
        "markdownDescription": "The path to a log file for communication between Dart Code and the VM service. This is useful when trying to diagnose issues with debugging such as missed breakpoints. Use `${name}` in the log file name to prevent concurrent debug sessions overwriting each others logs.",
        "scope": 6
      },
      "dart.webDaemonLogFile": {
        "type": [
          "null",
          "string"
        ],
        "default": null,
        "markdownDescription": "The path to a log file for communication between Dart Code and the webdev daemon. This is useful when trying to diagnose issues with launching web apps. Use `${name`} in the log file name to prevent concurrent debug sessions overwriting each others logs.",
        "scope": 6
      }
    }
  },
  {
    "title": "Pub",
    "order": 1,
    "properties": {
      "dart.promptToGetPackages": {
        "type": "boolean",
        "default": true,
        "description": "Whether to prompt to get packages when opening a project with out of date packages.",
        "scope": 4
      },
      "dart.pubAdditionalArgs": {
        "type": "array",
        "default": [],
        "markdownDescription": "Additional args to pass to all `pub` commands.",
        "scope": 4,
        "items": {
          "type": "string"
        }
      },
      "dart.runPubGetOnPubspecChanges": {
        "type": "boolean",
        "default": true,
        "markdownDescription": "Whether to automatically run `pub get` whenever `pubspec.yaml` is saved.",
        "scope": 4
      }
    }
  },
  {
    "title": "Run and Debug",
    "order": 1,
    "properties": {
      "dart.buildRunnerAdditionalArgs": {
        "type": "array",
        "default": [],
        "markdownDescription": "Additional args to pass to the `build_runner` when building/watching/serving.",
        "scope": 3,
        "items": {
          "type": "string"
        }
      },
      "dart.cliConsole": {
        "enum": [
          "debugConsole",
          "terminal",
          "externalTerminal"
        ],
        "default": "debugConsole",
        "description": "Whether to run Dart CLI apps in the Debug Console or a terminal. The Debug Console has more functionality because the process is controlled by the debug adapter, but is unable to accept input from the user via stdin.",
        "enumDescriptions": [
          "Run in the Debug Console pane, using the input as a REPL to evaluate expressions",
          "Run in the VS Code integrated terminal where input will be sent to stdin",
          "Run in an external terminal where input will be sent to stdin"
        ],
        "scope": 3
      },
      "dart.debugExtensionBackendProtocol": {
        "enum": [
          "sse",
          "ws"
        ],
        "enumDescriptions": [
          "Server-Sent Events",
          "WebSockets"
        ],
        "default": "ws",
        "description": "The protocol to use for the Dart Debug Extension backend service and injected client. Using WebSockets can improve performance but may fail when connecting through some proxy servers.",
        "scope": 3
      },
      "dart.debugExternalPackageLibraries": {
        "type": "boolean",
        "default": false,
        "markdownDescription": "Whether to mark external pub package libraries (including `package:flutter`) as debuggable, enabling stepping into them while debugging.",
        "scope": 3
      },
      "dart.evaluateGettersInDebugViews": {
        "type": "boolean",
        "default": true,
        "description": "Whether to evaluate getters in order to display them in debug views (such as the Variables, Watch and Hovers views).",
        "scope": 4
      },
      "dart.evaluateToStringInDebugViews": {
        "type": "boolean",
        "default": true,
        "description": "Whether to call toString() on objects when rendering them in debug views (such as the Variables, Watch and Hovers views). Only applies to views of 100 or fewer values for performance reasons.",
        "scope": 3
      },
      "dart.hotReloadProgress": {
        "enum": [
          "notification",
          "statusBar"
        ],
        "enumDescriptions": [
          "Hot reload progress will be shown in a toast notification",
          "Hot reload progress will be shown only in the status bar"
        ],
        "default": "notification",
        "description": "Determines how to display Hot Restart and Hot Reload progress.",
        "scope": 3
      },
      "dart.promptToRunIfErrors": {
        "type": "boolean",
        "default": true,
        "description": "Whether to prompt before running if there are errors in your project. Test scripts will be excluded from the check unless they're the script being run.",
        "scope": 3
      },
      "dart.showDartDeveloperLogs": {
        "type": "boolean",
        "default": true,
        "markdownDescription": "Whether to show logs from the `dart:developer` `log()` function in the debug console.",
        "scope": 4
      },
      "dart.showDevToolsDebugToolBarButtons": {
        "type": "boolean",
        "default": true,
        "description": "Whether to show DevTools buttons in the floating Debug toolbar.",
        "scope": 3
      },
      "dart.suppressTestTimeouts": {
        "enum": [
          "never",
          "debug",
          "always"
        ],
        "enumDescriptions": [
          "Do not suppress test timeouts",
          "Suppress test timeouts when Debugging",
          "Suppress test timeouts both when Running and Debugging"
        ],
        "default": "never",
        "markdownDescription": "Whether to suppress test timeouts when running/debugging tests. To work properly this requires package:test version 1.20.1 or newer. For older versions, the default timeout will be increased to 1d but this will not affect tests that have explicit (non-factor) timeouts set with @timeout.",
        "scope": 4
      },
      "dart.cliAdditionalArgs": {
        "type": "array",
        "default": [],
        "markdownDescription": "Additional args to pass to the `dart` command when running CLI scripts. Using the `args`/`toolArgs` fields in `launch.json` is usually better than this setting as this setting will apply to _all_ projects.",
        "scope": 4,
        "items": {
          "type": "string"
        }
      },
      "dart.testAdditionalArgs": {
        "type": "array",
        "default": [],
        "markdownDescription": "Additional args to pass to the `dart test` command. Using the `args`/`toolArgs` fields in `launch.json` is usually better than this setting as this setting will apply to _all_ projects.",
        "scope": 4,
        "items": {
          "type": "string"
        }
      },
      "dart.vmAdditionalArgs": {
        "type": "array",
        "default": [],
        "description": "Additional args to pass to the Dart VM when running/debugging command line apps or Dart test scripts.",
        "scope": 4,
        "items": {
          "type": "string"
        }
      }
    }
  },
  {
    "title": "SDK",
    "order": 1,
    "properties": {
      "dart.checkForSdkUpdates": {
        "type": "boolean",
        "default": true,
        "description": "Whether to check you are using the latest version of the Dart SDK at startup.",
        "scope": 3
      },
      "dart.sdkPath": {
        "type": [
          "null",
          "string"
        ],
        "default": null,
        "markdownDescription": "The location of the Dart SDK to use for analyzing and executing code. If blank, Dart Code will attempt to find it from the `PATH` environment variable. When editing a Flutter project, the version of Dart included in the Flutter SDK is used in preference.",
        "scope": 6
      },
      "dart.sdkPaths": {
        "type": "array",
        "default": [],
        "description": "An array of paths that either directly point to a Dart SDK or the parent directory of multiple Dart SDKs. When set, the version number in the status bar can be used to quickly switch between SDKs.",
        "items": {
          "type": "string"
        },
        "scope": 6
      },
      "dart.debugSdkLibraries": {
        "type": "boolean",
        "default": false,
        "markdownDescription": "Whether to mark Dart SDK libraries (`dart:*`) as debuggable, enabling stepping into them while debugging.",
        "scope": 3
      },
      "dart.flutterSdkPath": {
        "type": [
          "null",
          "string"
        ],
        "default": null,
        "markdownDescription": "The location of the Flutter SDK to use. If blank, Dart Code will attempt to find it from the project directory, `FLUTTER_ROOT` environment variable and the `PATH` environment variable.",
        "scope": 6
      },
      "dart.flutterSdkPaths": {
        "type": "array",
        "default": [],
        "description": "An array of paths that either directly point to a Flutter SDK or the parent directory of multiple Flutter SDKs. When set, the version number in the status bar can be used to quickly switch between SDKs.",
        "items": {
          "type": "string"
        },
        "scope": 6
      }
    }
  },
  {
    "title": "Testing",
    "order": 1,
    "properties": {
      "dart.allowTestsOutsideTestFolder": {
        "type": "boolean",
        "default": false,
        "markdownDescription": "Whether to consider files ending `_test.dart` that are outside of the test directory as tests. This should be enabled if you put tests inside the `lib` directory of your Flutter app so they will be run with `flutter test` and not `flutter run`.",
        "scope": 3
      },
      "dart.openTestView": {
        "type": "array",
        "items": {
          "enum": [
            "testRunStart",
            "testFailure"
          ]
        },
        "default": [
          "testRunStart"
        ],
        "description": "When to automatically switch focus to the test list (array to support multiple values).",
        "scope": 3
      },
      "dart.showSkippedTests": {
        "type": "boolean",
        "default": true,
        "markdownDescription": "Whether to show skipped tests in the test tree.",
        "scope": 3
      }
    }
  },
  {
    "title": "Other",
    "order": 2,
    "properties": {
      "dart.projectSearchDepth": {
        "type": "number",
        "default": 3,
        "description": "How many levels (including the workspace roots) down the workspace to search for Dart/Flutter projects. Increasing this number may help detect Flutter projects that are deeply nested in your workspace but slow down all operations that search for projects, including extension activation.",
        "scope": 3
      },
      "dart.env": {
        "type": "object",
        "default": {},
        "description": "Additional environment variables to be added to all Dart/Flutter processes spawned by the Dart and Flutter extensions.",
        "scope": 3
      }
    }
  },
  {
    "title": "Experimental",
    "order": 3,
    "properties": {
      "dart.enableServerSnippets": {
        "type": "boolean",
        "default": false,
        "markdownDescription": "Whether to enable using code snippets from the Dart Analysis Server and disable the snippets included in the extension. If the version of the Dart/Flutter SDK you're using does not support server snippets, this will result in no snippets being available.",
        "scope": 3
      },
      "dart.normalizeFileCasing": {
        "type": "boolean",
        "default": false,
        "description": "Whether to normalize file casings before sending them to the LSP server. This may fix issues with file_names lints not disappearing after renaming a file if the VS Code API continues to use the original casing.",
        "scope": 3
      },
      "dart.previewBazelWorkspaceCustomScripts": {
        "type": "boolean",
        "default": false,
        "markdownDescription": "EXPERIMENTAL: Whether to look for custom script definitions at `dart/config/intellij-plugins/flutter.json` in Bazel workspaces. Currently supported for macOS and Linux only.",
        "scope": 3
      },
      "dart.previewCommitCharacters": {
        "type": "boolean",
        "default": false,
        "description": "EXPERIMENTAL: Whether to enable commit characters for the LSP server. In a future release, the dart.enableCompletionCommitCharacters setting will also apply to LSP.",
        "scope": 3
      },
      "dart.previewFlutterUiGuides": {
        "type": "boolean",
        "default": false,
        "markdownDescription": "EXPERIMENTAL: Whether to enable the [Flutter UI Guides preview](https://dartcode.org/releases/v3-1/#preview-flutter-ui-guides).",
        "scope": 3
      },
      "dart.previewFlutterUiGuidesCustomTracking": {
        "type": "boolean",
        "default": false,
        "description": "EXPERIMENTAL: Whether to enable custom tracking of Flutter UI guidelines (to hide some latency of waiting for the next Flutter Outline).",
        "scope": 3
      },
      "dart.previewHotReloadOnSaveWatcher": {
        "type": "boolean",
        "default": false,
        "markdownDescription": "Whether to perform hot reload on save based on a filesystem watcher for Dart files rather than using VS Code's `onDidSave` event. This allows reloads to trigger when external tools modify Dart source files.",
        "scope": 3
      },
      "dart.previewSdkDaps": {
        "type": "boolean",
        "default": false,
        "markdownDescription": "PREVIEW: Whether to use the new debug adapters shipped in the Dart and Flutter SDKs. This setting will only apply if your SDK is new enough to include an appropriate version of the DAP server.",
        "scope": 3
      }
    }
  }
]